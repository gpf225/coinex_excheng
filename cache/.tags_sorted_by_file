!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_PROGRAM_VERSION	5.8	//
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
dict_ses_hash_compare	ca_config.c	/^int dict_ses_hash_compare(const void *key1, const void *key2)$/;"	f
dict_ses_hash_func	ca_config.c	/^uint32_t dict_ses_hash_func(const void *key)$/;"	f
init_config	ca_config.c	/^int init_config(const char *path)$/;"	f
read_config_from_json	ca_config.c	/^static int read_config_from_json(json_t *root)$/;"	f	file:
read_depth_interval_cfg	ca_config.c	/^static int read_depth_interval_cfg(json_t *root, const char *key)$/;"	f	file:
settings	ca_config.c	/^struct settings settings;$/;"	v	typeref:struct:settings
INTERVAL_MAX_LEN	ca_config.h	40;"	d
MARKET_DEALS_MAX	ca_config.h	41;"	d
MARKET_NAME_MAX_LEN	ca_config.h	39;"	d
_CA_CONFIG_H_	ca_config.h	7;"	d
alert	ca_config.h	/^    alert_cfg           alert;$/;"	m	struct:settings
backend_timeout	ca_config.h	/^    double              backend_timeout;$/;"	m	struct:settings
cache_timeout	ca_config.h	/^    int                 cache_timeout;$/;"	m	struct:settings
count	ca_config.h	/^    int    count;$/;"	m	struct:depth_merge_cfg
deal_max	ca_config.h	/^    int                 deal_max;$/;"	m	struct:settings
debug	ca_config.h	/^    bool                debug;$/;"	m	struct:settings
depth_interval	ca_config.h	/^    depth_interval_cfg  depth_interval;$/;"	m	struct:settings
depth_interval_cfg	ca_config.h	/^} depth_interval_cfg;$/;"	t	typeref:struct:depth_merge_cfg
depth_limit_max	ca_config.h	/^    int                 depth_limit_max;$/;"	m	struct:settings
depth_merge_cfg	ca_config.h	/^typedef struct depth_merge_cfg {$/;"	s
interval	ca_config.h	/^    char   **interval;$/;"	m	struct:depth_merge_cfg
kline_max	ca_config.h	/^    int                 kline_max;$/;"	m	struct:settings
log	ca_config.h	/^    log_cfg             log;$/;"	m	struct:settings
market_interval	ca_config.h	/^    double              market_interval;$/;"	m	struct:settings
marketprice	ca_config.h	/^    rpc_clt_cfg         marketprice;$/;"	m	struct:settings
matchengine	ca_config.h	/^    rpc_clt_cfg         matchengine;$/;"	m	struct:settings
process	ca_config.h	/^    process_cfg         process;$/;"	m	struct:settings
settings	ca_config.h	/^struct settings {$/;"	s
sub_deals_interval	ca_config.h	/^    double              sub_deals_interval;$/;"	m	struct:settings
sub_depth_interval	ca_config.h	/^    double              sub_depth_interval;$/;"	m	struct:settings
sub_kline_interval	ca_config.h	/^    double              sub_kline_interval;$/;"	m	struct:settings
sub_status_interval	ca_config.h	/^    double              sub_status_interval;$/;"	m	struct:settings
svr	ca_config.h	/^    rpc_svr_cfg         svr;$/;"	m	struct:settings
deals	ca_deals.c	/^    list_t   *deals;$/;"	m	struct:dict_deals_sub_val	file:
deals_request	ca_deals.c	/^static int deals_request(const char *market, uint64_t last_id)$/;"	f	file:
deals_sub_reply	ca_deals.c	/^static int deals_sub_reply(const char *market, json_t *result)$/;"	f	file:
deals_sub_send_full	ca_deals.c	/^void deals_sub_send_full(nw_ses *ses)$/;"	f
deals_sub_send_market	ca_deals.c	/^static int deals_sub_send_market(nw_ses *ses, const char *market)$/;"	f	file:
deals_subscribe	ca_deals.c	/^int deals_subscribe(nw_ses *ses, const char *market)$/;"	f
deals_unsubscribe	ca_deals.c	/^void deals_unsubscribe(nw_ses *ses, const char *market)$/;"	f
deals_unsubscribe_all	ca_deals.c	/^void deals_unsubscribe_all(nw_ses *ses)$/;"	f
dict_create_deals_session	ca_deals.c	/^static dict_t* dict_create_deals_session(void)$/;"	f	file:
dict_deals_key	ca_deals.c	/^struct dict_deals_key {$/;"	s	file:
dict_deals_sub	ca_deals.c	/^static dict_t *dict_deals_sub;$/;"	v	file:
dict_deals_sub_hash_function	ca_deals.c	/^static uint32_t dict_deals_sub_hash_function(const void *key)$/;"	f	file:
dict_deals_sub_key_compare	ca_deals.c	/^static int dict_deals_sub_key_compare(const void *key1, const void *key2)$/;"	f	file:
dict_deals_sub_key_dup	ca_deals.c	/^static void *dict_deals_sub_key_dup(const void *key)$/;"	f	file:
dict_deals_sub_key_free	ca_deals.c	/^static void dict_deals_sub_key_free(void *key)$/;"	f	file:
dict_deals_sub_val	ca_deals.c	/^struct dict_deals_sub_val {$/;"	s	file:
dict_deals_sub_val_dup	ca_deals.c	/^static void *dict_deals_sub_val_dup(const void *val)$/;"	f	file:
dict_deals_sub_val_free	ca_deals.c	/^static void dict_deals_sub_val_free(void *key)$/;"	f	file:
init_deals	ca_deals.c	/^int init_deals(void)$/;"	f
last_id	ca_deals.c	/^    uint64_t last_id;$/;"	m	struct:dict_deals_sub_val	file:
list_free	ca_deals.c	/^static void list_free(void *value)$/;"	f	file:
market	ca_deals.c	/^    char     market[MARKET_NAME_MAX_LEN];$/;"	m	struct:state_data	file:
market	ca_deals.c	/^    char market[MARKET_NAME_MAX_LEN];$/;"	m	struct:dict_deals_key	file:
marketprice	ca_deals.c	/^static rpc_clt *marketprice;$/;"	v	file:
notify_message	ca_deals.c	/^static int notify_message(nw_ses *ses, int command, json_t *message)$/;"	f	file:
on_backend_connect	ca_deals.c	/^static void on_backend_connect(nw_ses *ses, bool result)$/;"	f	file:
on_backend_recv_pkg	ca_deals.c	/^static void on_backend_recv_pkg(nw_ses *ses, rpc_pkg *pkg)$/;"	f	file:
on_timeout	ca_deals.c	/^static void on_timeout(nw_state_entry *entry)$/;"	f	file:
on_timer	ca_deals.c	/^static void on_timer(nw_timer *timer, void *privdata) $/;"	f	file:
sessions	ca_deals.c	/^    dict_t   *sessions; $/;"	m	struct:dict_deals_sub_val	file:
state_context	ca_deals.c	/^static nw_state *state_context;$/;"	v	file:
state_data	ca_deals.c	/^struct state_data {$/;"	s	file:
timer	ca_deals.c	/^static nw_timer timer;$/;"	v	file:
_CA_DEALS_REQUEST_H_	ca_deals.h	2;"	d
depth_request	ca_depth.c	/^static int depth_request(const char *market, const char *interval)$/;"	f	file:
depth_set_key	ca_depth.c	/^static void depth_set_key(struct dict_depth_key *key, const char *market, const char *interval)$/;"	f	file:
depth_sub_reply	ca_depth.c	/^static int depth_sub_reply(const char *market, const char *interval, json_t *result)$/;"	f	file:
depth_subscribe	ca_depth.c	/^int depth_subscribe(nw_ses *ses, const char *market, const char *interval)$/;"	f
depth_unsubscribe	ca_depth.c	/^int depth_unsubscribe(nw_ses *ses, const char *market, const char *interval)$/;"	f
depth_unsubscribe_all	ca_depth.c	/^int depth_unsubscribe_all(nw_ses *ses)$/;"	f
dict_create_depth_session	ca_depth.c	/^static dict_t* dict_create_depth_session(void)$/;"	f	file:
dict_depth_key	ca_depth.c	/^struct dict_depth_key {$/;"	s	file:
dict_depth_sub	ca_depth.c	/^static dict_t *dict_depth_sub;$/;"	v	file:
dict_depth_sub_hash_func	ca_depth.c	/^uint32_t dict_depth_sub_hash_func(const void *key)$/;"	f
dict_depth_sub_key_compare	ca_depth.c	/^int dict_depth_sub_key_compare(const void *key1, const void *key2)$/;"	f
dict_depth_sub_key_dup	ca_depth.c	/^void *dict_depth_sub_key_dup(const void *key)$/;"	f
dict_depth_sub_key_free	ca_depth.c	/^void dict_depth_sub_key_free(void *key)$/;"	f
dict_depth_sub_val	ca_depth.c	/^struct dict_depth_sub_val {$/;"	s	file:
dict_depth_sub_val_dup	ca_depth.c	/^static void *dict_depth_sub_val_dup(const void *val)$/;"	f	file:
dict_depth_sub_val_free	ca_depth.c	/^static void dict_depth_sub_val_free(void *key)$/;"	f	file:
init_depth	ca_depth.c	/^int init_depth(void)$/;"	f
interval	ca_depth.c	/^    char      interval[INTERVAL_MAX_LEN];$/;"	m	struct:dict_depth_key	file:
interval	ca_depth.c	/^    char      interval[INTERVAL_MAX_LEN];$/;"	m	struct:state_data	file:
is_depth_equal	ca_depth.c	/^static bool is_depth_equal(json_t *last, json_t *now)$/;"	f	file:
is_json_equal	ca_depth.c	/^static bool is_json_equal(json_t *l, json_t *r)$/;"	f	file:
last	ca_depth.c	/^    json_t   *last;$/;"	m	struct:dict_depth_sub_val	file:
market	ca_depth.c	/^    char      market[MARKET_NAME_MAX_LEN];$/;"	m	struct:dict_depth_key	file:
market	ca_depth.c	/^    char      market[MARKET_NAME_MAX_LEN];$/;"	m	struct:state_data	file:
matchengine	ca_depth.c	/^static rpc_clt *matchengine;$/;"	v	file:
notify_message	ca_depth.c	/^static int notify_message(nw_ses *ses, int command, json_t *message)$/;"	f	file:
on_backend_connect	ca_depth.c	/^static void on_backend_connect(nw_ses *ses, bool result)$/;"	f	file:
on_backend_recv_pkg	ca_depth.c	/^static void on_backend_recv_pkg(nw_ses *ses, rpc_pkg *pkg)$/;"	f	file:
on_timeout	ca_depth.c	/^static void on_timeout(nw_state_entry *entry)$/;"	f	file:
on_timer	ca_depth.c	/^static void on_timer(nw_timer *timer, void *privdata) $/;"	f	file:
sessions	ca_depth.c	/^    dict_t   *sessions; $/;"	m	struct:dict_depth_sub_val	file:
state_context	ca_depth.c	/^static nw_state *state_context;$/;"	v	file:
state_data	ca_depth.c	/^struct state_data {$/;"	s	file:
time	ca_depth.c	/^    double   time;$/;"	m	struct:dict_depth_sub_val	file:
timer	ca_depth.c	/^static nw_timer timer;$/;"	v	file:
_CA_DEPTH_H_	ca_depth.h	2;"	d
__process__	ca_main.c	/^const char *__process__ = "cache";$/;"	v
__version__	ca_main.c	/^const char *__version__ = "0.1.0";$/;"	v
cron_timer	ca_main.c	/^nw_timer cron_timer;$/;"	v
init_log	ca_main.c	/^static int init_log(void)$/;"	f	file:
init_process	ca_main.c	/^static int init_process(void)$/;"	f	file:
main	ca_main.c	/^int main(int argc, char *argv[])$/;"	f
on_cron_check	ca_main.c	/^static void on_cron_check(nw_timer *timer, void *data)$/;"	f	file:
dict_market	ca_market.c	/^static dict_t *dict_market = NULL;$/;"	v	file:
dict_market_val_dup	ca_market.c	/^static void *dict_market_val_dup(const void *key)$/;"	f	file:
dict_market_val_free	ca_market.c	/^static void dict_market_val_free(void *val)$/;"	f	file:
dict_str_compare	ca_market.c	/^static int dict_str_compare(const void *value1, const void *value2)$/;"	f	file:
dict_str_dup	ca_market.c	/^static void *dict_str_dup(const void *value)$/;"	f	file:
dict_str_free	ca_market.c	/^static void dict_str_free(void *value)$/;"	f	file:
dict_str_hash_func	ca_market.c	/^static uint32_t dict_str_hash_func(const void *key)$/;"	f	file:
get_market	ca_market.c	/^dict_t *get_market(void)$/;"	f
id	ca_market.c	/^    int     id;$/;"	m	struct:market_val	file:
init_market	ca_market.c	/^int init_market(void)$/;"	f
market_exist	ca_market.c	/^bool market_exist(const char *market)$/;"	f
market_timer	ca_market.c	/^static nw_timer market_timer;$/;"	v	file:
market_val	ca_market.c	/^struct market_val {$/;"	s	file:
matchengine	ca_market.c	/^static rpc_clt *matchengine = NULL;$/;"	v	file:
on_backend_connect	ca_market.c	/^static void on_backend_connect(nw_ses *ses, bool result)$/;"	f	file:
on_backend_recv_pkg	ca_market.c	/^static void on_backend_recv_pkg(nw_ses *ses, rpc_pkg *pkg)$/;"	f	file:
on_market_list_reply	ca_market.c	/^static int on_market_list_reply(json_t *result)$/;"	f	file:
on_market_timer	ca_market.c	/^static void on_market_timer(nw_timer *timer, void *privdata)$/;"	f	file:
on_timeout	ca_market.c	/^static void on_timeout(nw_state_entry *entry)$/;"	f	file:
query_market_list	ca_market.c	/^static int query_market_list(void)$/;"	f	file:
re_subscribe_all	ca_market.c	/^static void re_subscribe_all(void)$/;"	f	file:
state_context	ca_market.c	/^static nw_state *state_context;$/;"	v	file:
_CA_MARKET_H_	ca_market.h	7;"	d
add_subscribe_all_ses	ca_server.c	/^static void add_subscribe_all_ses(nw_ses *ses)$/;"	f	file:
del_subscribe_all_ses	ca_server.c	/^static void del_subscribe_all_ses(nw_ses *ses)$/;"	f	file:
dict_sub_all	ca_server.c	/^static dict_t *dict_sub_all;$/;"	v	file:
get_sub_all_dict	ca_server.c	/^dict_t *get_sub_all_dict()$/;"	f
init_server	ca_server.c	/^int init_server(void)$/;"	f
on_method_subscribe_all	ca_server.c	/^static int on_method_subscribe_all(nw_ses *ses, rpc_pkg *pkg, json_t *params)$/;"	f	file:
reply_error	ca_server.c	/^int reply_error(nw_ses *ses, rpc_pkg *pkg, int code, const char *message)$/;"	f
reply_error_internal_error	ca_server.c	/^int reply_error_internal_error(nw_ses *ses, rpc_pkg *pkg)$/;"	f
reply_error_invalid_argument	ca_server.c	/^int reply_error_invalid_argument(nw_ses *ses, rpc_pkg *pkg)$/;"	f
reply_json	ca_server.c	/^int reply_json(nw_ses *ses, rpc_pkg *pkg, const json_t *json)$/;"	f
reply_result	ca_server.c	/^int reply_result(nw_ses *ses, rpc_pkg *pkg, json_t *result)$/;"	f
reply_time_out	ca_server.c	/^int reply_time_out(nw_ses *ses, rpc_pkg *pkg)$/;"	f
svr	ca_server.c	/^static rpc_svr *svr;$/;"	v	file:
svr_on_connection_close	ca_server.c	/^static void svr_on_connection_close(nw_ses *ses)$/;"	f	file:
svr_on_new_connection	ca_server.c	/^static void svr_on_new_connection(nw_ses *ses)$/;"	f	file:
svr_on_recv_pkg	ca_server.c	/^static void svr_on_recv_pkg(nw_ses *ses, rpc_pkg *pkg)$/;"	f	file:
_RH_SERVER_H_	ca_server.h	7;"	d
dict_create_status_session	ca_status.c	/^static dict_t* dict_create_status_session(void)$/;"	f	file:
dict_status_key	ca_status.c	/^struct dict_status_key {$/;"	s	file:
dict_status_sub	ca_status.c	/^static dict_t *dict_status_sub;$/;"	v	file:
dict_status_sub_hash_function	ca_status.c	/^static uint32_t dict_status_sub_hash_function(const void *key)$/;"	f	file:
dict_status_sub_key_compare	ca_status.c	/^static int dict_status_sub_key_compare(const void *key1, const void *key2)$/;"	f	file:
dict_status_sub_key_dup	ca_status.c	/^static void *dict_status_sub_key_dup(const void *key)$/;"	f	file:
dict_status_sub_key_free	ca_status.c	/^static void dict_status_sub_key_free(void *key)$/;"	f	file:
dict_status_sub_val	ca_status.c	/^struct dict_status_sub_val {$/;"	s	file:
dict_status_sub_val_dup	ca_status.c	/^static void *dict_status_sub_val_dup(const void *val)$/;"	f	file:
dict_status_sub_val_free	ca_status.c	/^static void dict_status_sub_val_free(void *key)$/;"	f	file:
init_status	ca_status.c	/^int init_status(void)$/;"	f
market	ca_status.c	/^    char        market[MARKET_NAME_MAX_LEN];$/;"	m	struct:dict_status_key	file:
market	ca_status.c	/^    char        market[MARKET_NAME_MAX_LEN];$/;"	m	struct:state_data	file:
marketprice	ca_status.c	/^static rpc_clt *marketprice;$/;"	v	file:
notify_message	ca_status.c	/^static int notify_message(nw_ses *ses, int command, json_t *message)$/;"	f	file:
on_backend_connect	ca_status.c	/^static void on_backend_connect(nw_ses *ses, bool result)$/;"	f	file:
on_backend_recv_pkg	ca_status.c	/^static void on_backend_recv_pkg(nw_ses *ses, rpc_pkg *pkg)$/;"	f	file:
on_timeout	ca_status.c	/^static void on_timeout(nw_state_entry *entry)$/;"	f	file:
on_timer	ca_status.c	/^static void on_timer(nw_timer *timer, void *privdata) $/;"	f	file:
send_last_state	ca_status.c	/^static void send_last_state(nw_ses *ses, const char *market)$/;"	f	file:
sessions	ca_status.c	/^    dict_t      *sessions; $/;"	m	struct:dict_status_sub_val	file:
state_context	ca_status.c	/^static nw_state *state_context;$/;"	v	file:
state_data	ca_status.c	/^struct state_data {$/;"	s	file:
status_request	ca_status.c	/^static int status_request(const char *market)$/;"	f	file:
status_sub_reply	ca_status.c	/^static int status_sub_reply(const char *market, json_t *result)$/;"	f	file:
status_subscribe	ca_status.c	/^int status_subscribe(nw_ses *ses, const char *market)$/;"	f
status_unsubscribe	ca_status.c	/^void status_unsubscribe(nw_ses *ses, const char *market)$/;"	f
status_unsubscribe_all	ca_status.c	/^void status_unsubscribe_all(nw_ses *ses)$/;"	f
sub_last	ca_status.c	/^    json_t      *sub_last;$/;"	m	struct:dict_status_sub_val	file:
timer	ca_status.c	/^static nw_timer timer;$/;"	v	file:
_CA_STATUS_REQUEST_H_	ca_status.h	2;"	d
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
INCS	makefile	/^INCS = -I ..\/network -I ..\/utils$/;"	m
LIBS	makefile	/^LIBS = -L ..\/utils -lutils -L ..\/network -lnetwork -Wl,-Bstatic -lev -ljansson -lmpdec -lrdkafka -lhiredis -lcurl -lssl -lcrypto -lz -Wl,-Bdynamic -lm -lpthread -ldl$/;"	m
TARGET	makefile	/^TARGET  := cache.exe$/;"	m
