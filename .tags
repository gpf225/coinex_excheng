!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AF_LOCAL	depends/hiredis/net.h	/^#define AF_LOCAL /;"	d
AH_LISTENER_BIND	accesshttp/ah_config.h	/^# define AH_LISTENER_BIND /;"	d
ALERT_EMAILS	alertcenter/send_alert.py	/^ALERT_EMAILS = ['yang@haipo.me']$/;"	v
ARRAY_SIZE	utils/http_parser.c	/^# define ARRAY_SIZE(/;"	d	file:
AR_LISTENER_BIND	accessrest/ar_config.h	/^# define AR_LISTENER_BIND /;"	d
ASSET_NAME_MAX_LEN	accessws/aw_config.h	/^# define ASSET_NAME_MAX_LEN /;"	d
ASSET_NAME_MAX_LEN	matchengine/me_config.h	/^# define ASSET_NAME_MAX_LEN /;"	d
AW_HTTP_H	accessws/aw_http.h	/^# define AW_HTTP_H$/;"	d
AW_LISTENER_BIND	accessws/aw_config.h	/^# define AW_LISTENER_BIND /;"	d
BALANCE_TYPE_AVAILABLE	matchengine/me_balance.h	/^# define BALANCE_TYPE_AVAILABLE /;"	d
BALANCE_TYPE_FROZEN	matchengine/me_balance.h	/^# define BALANCE_TYPE_FROZEN /;"	d
BALANCE_TYPE_LOCK	matchengine/me_balance.h	/^# define BALANCE_TYPE_LOCK /;"	d
BIT_AT	utils/http_parser.c	/^# define BIT_AT(/;"	d	file:
BUSINESS_NAME_MAX_LEN	matchengine/me_config.h	/^# define BUSINESS_NAME_MAX_LEN /;"	d
CALLBACK_DATA	utils/http_parser.c	/^#define CALLBACK_DATA(/;"	d	file:
CALLBACK_DATA_	utils/http_parser.c	/^#define CALLBACK_DATA_(/;"	d	file:
CALLBACK_DATA_NOADVANCE	utils/http_parser.c	/^#define CALLBACK_DATA_NOADVANCE(/;"	d	file:
CALLBACK_NOTIFY	utils/http_parser.c	/^#define CALLBACK_NOTIFY(/;"	d	file:
CALLBACK_NOTIFY_	utils/http_parser.c	/^#define CALLBACK_NOTIFY_(/;"	d	file:
CALLBACK_NOTIFY_NOADVANCE	utils/http_parser.c	/^#define CALLBACK_NOTIFY_NOADVANCE(/;"	d	file:
CC	depends/hiredis/Makefile	/^CC:=$(shell sh -c 'type $(CC) >\/dev\/null 2>\/dev\/null && echo $(CC) || echo gcc')$/;"	m
CHUNKED	utils/http_parser.c	/^#define CHUNKED /;"	d	file:
CLEAN_INTERVAL	accessws/aw_depth.c	/^# define CLEAN_INTERVAL /;"	d	file:
CLOSE	utils/http_parser.c	/^#define CLOSE /;"	d	file:
CMD_ASSET_HISTORY	utils/ut_rpc_cmd.h	/^# define CMD_ASSET_HISTORY /;"	d
CMD_ASSET_LIST	utils/ut_rpc_cmd.h	/^# define CMD_ASSET_LIST /;"	d
CMD_ASSET_LOCK	utils/ut_rpc_cmd.h	/^# define CMD_ASSET_LOCK /;"	d
CMD_ASSET_QUERY	utils/ut_rpc_cmd.h	/^# define CMD_ASSET_QUERY /;"	d
CMD_ASSET_QUERY_LOCK	utils/ut_rpc_cmd.h	/^# define CMD_ASSET_QUERY_LOCK /;"	d
CMD_ASSET_SUMMARY	utils/ut_rpc_cmd.h	/^# define CMD_ASSET_SUMMARY /;"	d
CMD_ASSET_UNLOCK	utils/ut_rpc_cmd.h	/^# define CMD_ASSET_UNLOCK /;"	d
CMD_ASSET_UPDATE	utils/ut_rpc_cmd.h	/^# define CMD_ASSET_UPDATE /;"	d
CMD_CONFIG_UPDATE_ASSET	utils/ut_rpc_cmd.h	/^# define CMD_CONFIG_UPDATE_ASSET /;"	d
CMD_CONFIG_UPDATE_MARKET	utils/ut_rpc_cmd.h	/^# define CMD_CONFIG_UPDATE_MARKET /;"	d
CMD_MARKET_DEALS	utils/ut_rpc_cmd.h	/^# define CMD_MARKET_DEALS /;"	d
CMD_MARKET_DEALS_EXT	utils/ut_rpc_cmd.h	/^# define CMD_MARKET_DEALS_EXT /;"	d
CMD_MARKET_KLINE	utils/ut_rpc_cmd.h	/^# define CMD_MARKET_KLINE /;"	d
CMD_MARKET_LAST	utils/ut_rpc_cmd.h	/^# define CMD_MARKET_LAST /;"	d
CMD_MARKET_LIST	utils/ut_rpc_cmd.h	/^# define CMD_MARKET_LIST /;"	d
CMD_MARKET_STATUS	utils/ut_rpc_cmd.h	/^# define CMD_MARKET_STATUS /;"	d
CMD_MARKET_SUMMARY	utils/ut_rpc_cmd.h	/^# define CMD_MARKET_SUMMARY /;"	d
CMD_MARKET_USER_DEALS	utils/ut_rpc_cmd.h	/^# define CMD_MARKET_USER_DEALS /;"	d
CMD_MONITOR_DAILY	utils/ut_rpc_cmd.h	/^# define CMD_MONITOR_DAILY /;"	d
CMD_MONITOR_INC	utils/ut_rpc_cmd.h	/^# define CMD_MONITOR_INC /;"	d
CMD_MONITOR_LIST_HOST	utils/ut_rpc_cmd.h	/^# define CMD_MONITOR_LIST_HOST /;"	d
CMD_MONITOR_LIST_KEY	utils/ut_rpc_cmd.h	/^# define CMD_MONITOR_LIST_KEY /;"	d
CMD_MONITOR_LIST_SCOPE	utils/ut_rpc_cmd.h	/^# define CMD_MONITOR_LIST_SCOPE /;"	d
CMD_MONITOR_QUERY	utils/ut_rpc_cmd.h	/^# define CMD_MONITOR_QUERY /;"	d
CMD_MONITOR_SET	utils/ut_rpc_cmd.h	/^# define CMD_MONITOR_SET /;"	d
CMD_ORDER_BOOK	utils/ut_rpc_cmd.h	/^# define CMD_ORDER_BOOK /;"	d
CMD_ORDER_CANCEL	utils/ut_rpc_cmd.h	/^# define CMD_ORDER_CANCEL /;"	d
CMD_ORDER_CANCEL_STOP	utils/ut_rpc_cmd.h	/^# define CMD_ORDER_CANCEL_STOP /;"	d
CMD_ORDER_DEALS	utils/ut_rpc_cmd.h	/^# define CMD_ORDER_DEALS /;"	d
CMD_ORDER_DEPTH	utils/ut_rpc_cmd.h	/^# define CMD_ORDER_DEPTH /;"	d
CMD_ORDER_FINISHED	utils/ut_rpc_cmd.h	/^# define CMD_ORDER_FINISHED /;"	d
CMD_ORDER_FINISHED_DETAIL	utils/ut_rpc_cmd.h	/^# define CMD_ORDER_FINISHED_DETAIL /;"	d
CMD_ORDER_FINISHED_STOP	utils/ut_rpc_cmd.h	/^# define CMD_ORDER_FINISHED_STOP /;"	d
CMD_ORDER_PENDING	utils/ut_rpc_cmd.h	/^# define CMD_ORDER_PENDING /;"	d
CMD_ORDER_PENDING_DETAIL	utils/ut_rpc_cmd.h	/^# define CMD_ORDER_PENDING_DETAIL /;"	d
CMD_ORDER_PENDING_STOP	utils/ut_rpc_cmd.h	/^# define CMD_ORDER_PENDING_STOP /;"	d
CMD_ORDER_PUT_LIMIT	utils/ut_rpc_cmd.h	/^# define CMD_ORDER_PUT_LIMIT /;"	d
CMD_ORDER_PUT_MARKET	utils/ut_rpc_cmd.h	/^# define CMD_ORDER_PUT_MARKET /;"	d
CMD_ORDER_PUT_STOP_LIMIT	utils/ut_rpc_cmd.h	/^# define CMD_ORDER_PUT_STOP_LIMIT /;"	d
CMD_ORDER_PUT_STOP_MARKET	utils/ut_rpc_cmd.h	/^# define CMD_ORDER_PUT_STOP_MARKET /;"	d
CMD_ORDER_STOP_BOOK	utils/ut_rpc_cmd.h	/^# define CMD_ORDER_STOP_BOOK /;"	d
CONNECTION	utils/http_parser.c	/^#define CONNECTION /;"	d	file:
CONN_FD	depends/hiredis/test.c	/^    CONN_FD$/;"	e	enum:connection_type	file:
CONN_TCP	depends/hiredis/test.c	/^    CONN_TCP,$/;"	e	enum:connection_type	file:
CONN_UNIX	depends/hiredis/test.c	/^    CONN_UNIX,$/;"	e	enum:connection_type	file:
CONTENT_LENGTH	utils/http_parser.c	/^#define CONTENT_LENGTH /;"	d	file:
COUNT_HEADER_SIZE	utils/http_parser.c	/^#define COUNT_HEADER_SIZE(/;"	d	file:
CR	utils/http_parser.c	/^#define CR /;"	d	file:
CRC32C	utils/ut_crc32.c	/^#define CRC32C(/;"	d	file:
CURRENT_STATE	utils/http_parser.c	/^#define CURRENT_STATE(/;"	d	file:
CXX	depends/hiredis/Makefile	/^CXX:=$(shell sh -c 'type $(CXX) >\/dev\/null 2>\/dev\/null && echo $(CXX) || echo g++')$/;"	m
DEALS_QUERY_LIMIT	accessws/aw_deals.c	/^# define DEALS_QUERY_LIMIT /;"	d	file:
DEBUG	depends/hiredis/Makefile	/^DEBUG?= -g -ggdb$/;"	m
DICT_COMPARE_KEY	utils/ut_dict.c	/^# define DICT_COMPARE_KEY(/;"	d	file:
DICT_ERR	depends/hiredis/dict.h	/^#define DICT_ERR /;"	d
DICT_FREE_HASH_KEY	utils/ut_dict.c	/^# define DICT_FREE_HASH_KEY(/;"	d	file:
DICT_FREE_HASH_VAL	utils/ut_dict.c	/^# define DICT_FREE_HASH_VAL(/;"	d	file:
DICT_HASH_KEY	utils/ut_dict.c	/^# define DICT_HASH_KEY(/;"	d	file:
DICT_HT_INITIAL_SIZE	depends/hiredis/dict.h	/^#define DICT_HT_INITIAL_SIZE /;"	d
DICT_NOTUSED	depends/hiredis/dict.h	/^#define DICT_NOTUSED(/;"	d
DICT_OK	depends/hiredis/dict.h	/^#define DICT_OK /;"	d
DICT_SET_HASH_KEY	utils/ut_dict.c	/^# define DICT_SET_HASH_KEY(/;"	d	file:
DICT_SET_HASH_VAL	utils/ut_dict.c	/^# define DICT_SET_HASH_VAL(/;"	d	file:
DLOG_DEBUG	utils/ut_log.h	/^    DLOG_DEBUG  = 0x20,$/;"	e	enum:__anon8
DLOG_ERROR	utils/ut_log.h	/^    DLOG_ERROR  = 0x2,$/;"	e	enum:__anon8
DLOG_FATAL	utils/ut_log.h	/^    DLOG_FATAL  = 0x1,$/;"	e	enum:__anon8
DLOG_INFO	utils/ut_log.h	/^    DLOG_INFO   = 0x8,$/;"	e	enum:__anon8
DLOG_LOG_PID	utils/ut_log.h	/^# define DLOG_LOG_PID /;"	d
DLOG_NOTICE	utils/ut_log.h	/^    DLOG_NOTICE = 0x10,$/;"	e	enum:__anon8
DLOG_NO_CACHE	utils/ut_log.h	/^# define DLOG_NO_CACHE /;"	d
DLOG_NO_TIMESTAMP	utils/ut_log.h	/^# define DLOG_NO_TIMESTAMP /;"	d
DLOG_REMOTE_LOG	utils/ut_log.h	/^# define DLOG_REMOTE_LOG /;"	d
DLOG_SHIFT_BY_DAY	utils/ut_log.h	/^    DLOG_SHIFT_BY_DAY,$/;"	e	enum:__anon6
DLOG_SHIFT_BY_HOUR	utils/ut_log.h	/^    DLOG_SHIFT_BY_HOUR,$/;"	e	enum:__anon6
DLOG_SHIFT_BY_MIN	utils/ut_log.h	/^    DLOG_SHIFT_BY_MIN,$/;"	e	enum:__anon6
DLOG_SHIFT_BY_SIZE	utils/ut_log.h	/^    DLOG_SHIFT_BY_SIZE = 1,$/;"	e	enum:__anon6
DLOG_TRACE	utils/ut_log.h	/^    DLOG_TRACE  = 0x40,$/;"	e	enum:__anon8
DLOG_USER1	utils/ut_log.h	/^    DLOG_USER1  = 0x80,$/;"	e	enum:__anon8
DLOG_USER2	utils/ut_log.h	/^    DLOG_USER2  = 0x100,$/;"	e	enum:__anon8
DLOG_USE_FORK	utils/ut_log.h	/^# define DLOG_USE_FORK /;"	d
DLOG_WARN	utils/ut_log.h	/^    DLOG_WARN   = 0x4,$/;"	e	enum:__anon8
DYLIBNAME	depends/hiredis/Makefile	/^DYLIBNAME=$(LIBNAME).$(DYLIBSUFFIX)$/;"	m
DYLIBSUFFIX	depends/hiredis/Makefile	/^  DYLIBSUFFIX=dylib$/;"	m
DYLIBSUFFIX	depends/hiredis/Makefile	/^DYLIBSUFFIX=so$/;"	m
DYLIB_MAJOR_NAME	depends/hiredis/Makefile	/^DYLIB_MAJOR_NAME=$(LIBNAME).$(DYLIBSUFFIX).$(HIREDIS_MAJOR)$/;"	m
DYLIB_MAKE_CMD	depends/hiredis/Makefile	/^  DYLIB_MAKE_CMD=$(CC) -G -o $(DYLIBNAME) -h $(DYLIB_MINOR_NAME) $(LDFLAGS)$/;"	m
DYLIB_MAKE_CMD	depends/hiredis/Makefile	/^  DYLIB_MAKE_CMD=$(CC) -shared -Wl,-install_name,$(DYLIB_MINOR_NAME) -o $(DYLIBNAME) $(LDFLAGS)$/;"	m
DYLIB_MAKE_CMD	depends/hiredis/Makefile	/^DYLIB_MAKE_CMD=$(CC) -shared -Wl,-soname,$(DYLIB_MINOR_NAME) -o $(DYLIBNAME) $(LDFLAGS)$/;"	m
DYLIB_MINOR_NAME	depends/hiredis/Makefile	/^  DYLIB_MINOR_NAME=$(LIBNAME).$(HIREDIS_SONAME).$(DYLIBSUFFIX)$/;"	m
DYLIB_MINOR_NAME	depends/hiredis/Makefile	/^DYLIB_MINOR_NAME=$(LIBNAME).$(DYLIBSUFFIX).$(HIREDIS_SONAME)$/;"	m
ELEM_AT	utils/http_parser.c	/^# define ELEM_AT(/;"	d	file:
ERR_RET	utils/ut_misc.h	/^# define ERR_RET(/;"	d
ERR_RET	utils/ut_misc.h	/^# undef ERR_RET$/;"	d
ERR_RET_LN	utils/ut_misc.h	/^# define ERR_RET_LN(/;"	d
ERR_RET_LN	utils/ut_misc.h	/^# undef ERR_RET_LN$/;"	d
EXAMPLES	depends/hiredis/Makefile	/^EXAMPLES=hiredis-example hiredis-example-libevent hiredis-example-libev hiredis-example-glib$/;"	m
ExampleQt	depends/hiredis/examples/example-qt.h	/^        ExampleQt(const char * value, QObject * parent = 0)$/;"	f	class:ExampleQt
ExampleQt	depends/hiredis/examples/example-qt.h	/^class ExampleQt : public QObject {$/;"	c
FLOAT_WIDTH_TEST	depends/hiredis/test.c	/^#define FLOAT_WIDTH_TEST(/;"	d	file:
F_CHUNKED	utils/http_parser.h	/^  { F_CHUNKED               = 1 << 0$/;"	e	enum:flags
F_CONNECTION_CLOSE	utils/http_parser.h	/^  , F_CONNECTION_CLOSE      = 1 << 2$/;"	e	enum:flags
F_CONNECTION_KEEP_ALIVE	utils/http_parser.h	/^  , F_CONNECTION_KEEP_ALIVE = 1 << 1$/;"	e	enum:flags
F_CONNECTION_UPGRADE	utils/http_parser.h	/^  , F_CONNECTION_UPGRADE    = 1 << 3$/;"	e	enum:flags
F_CONTENTLENGTH	utils/http_parser.h	/^  , F_CONTENTLENGTH         = 1 << 7$/;"	e	enum:flags
F_SKIPBODY	utils/http_parser.h	/^  , F_SKIPBODY              = 1 << 6$/;"	e	enum:flags
F_TRAILING	utils/http_parser.h	/^  , F_TRAILING              = 1 << 4$/;"	e	enum:flags
F_UPGRADE	utils/http_parser.h	/^  , F_UPGRADE               = 1 << 5$/;"	e	enum:flags
HIREDIS_MAJOR	depends/hiredis/Makefile	/^HIREDIS_MAJOR=$(shell grep HIREDIS_MAJOR hiredis.h | awk '{print $$3}')$/;"	m
HIREDIS_MAJOR	depends/hiredis/hiredis.h	/^#define HIREDIS_MAJOR /;"	d
HIREDIS_MINOR	depends/hiredis/Makefile	/^HIREDIS_MINOR=$(shell grep HIREDIS_MINOR hiredis.h | awk '{print $$3}')$/;"	m
HIREDIS_MINOR	depends/hiredis/hiredis.h	/^#define HIREDIS_MINOR /;"	d
HIREDIS_PATCH	depends/hiredis/Makefile	/^HIREDIS_PATCH=$(shell grep HIREDIS_PATCH hiredis.h | awk '{print $$3}')$/;"	m
HIREDIS_PATCH	depends/hiredis/hiredis.h	/^#define HIREDIS_PATCH /;"	d
HIREDIS_SONAME	depends/hiredis/Makefile	/^HIREDIS_SONAME=$(shell grep HIREDIS_SONAME hiredis.h | awk '{print $$3}')$/;"	m
HIREDIS_SONAME	depends/hiredis/hiredis.h	/^#define HIREDIS_SONAME /;"	d
HISTORY_HASH_NUM	utils/ut_define.h	/^# define HISTORY_HASH_NUM /;"	d
HISTORY_ORDER_DEAL	matchengine/me_history.c	/^    HISTORY_ORDER_DEAL,$/;"	e	enum:__anon12	file:
HISTORY_ORDER_DETAIL	matchengine/me_history.c	/^    HISTORY_ORDER_DETAIL,$/;"	e	enum:__anon12	file:
HISTORY_USER_BALANCE	matchengine/me_history.c	/^    HISTORY_USER_BALANCE,$/;"	e	enum:__anon12	file:
HISTORY_USER_DEAL	matchengine/me_history.c	/^    HISTORY_USER_DEAL,$/;"	e	enum:__anon12	file:
HISTORY_USER_ORDER	matchengine/me_history.c	/^    HISTORY_USER_ORDER,$/;"	e	enum:__anon12	file:
HISTORY_USER_STOP	matchengine/me_history.c	/^    HISTORY_USER_STOP,$/;"	e	enum:__anon12	file:
HTTP_BOTH	utils/http_parser.h	/^enum http_parser_type { HTTP_REQUEST, HTTP_RESPONSE, HTTP_BOTH };$/;"	e	enum:http_parser_type
HTTP_ERRNO_GEN	utils/http_parser.h	/^#define HTTP_ERRNO_GEN(/;"	d
HTTP_ERRNO_GEN	utils/http_parser.h	/^#undef HTTP_ERRNO_GEN$/;"	d
HTTP_ERRNO_MAP	utils/http_parser.h	/^  HTTP_ERRNO_MAP(HTTP_ERRNO_GEN)$/;"	e	enum:http_errno
HTTP_ERRNO_MAP	utils/http_parser.h	/^#define HTTP_ERRNO_MAP(/;"	d
HTTP_MAX_HEADER_SIZE	utils/http_parser.h	/^# define HTTP_MAX_HEADER_SIZE /;"	d
HTTP_METHOD_MAP	utils/http_parser.h	/^  HTTP_METHOD_MAP(XX)$/;"	e	enum:http_method
HTTP_METHOD_MAP	utils/http_parser.h	/^#define HTTP_METHOD_MAP(/;"	d
HTTP_PARSER_ERRNO	utils/http_parser.h	/^#define HTTP_PARSER_ERRNO(/;"	d
HTTP_PARSER_STRICT	utils/http_parser.h	/^# define HTTP_PARSER_STRICT /;"	d
HTTP_PARSER_VERSION_MAJOR	utils/http_parser.h	/^#define HTTP_PARSER_VERSION_MAJOR /;"	d
HTTP_PARSER_VERSION_MINOR	utils/http_parser.h	/^#define HTTP_PARSER_VERSION_MINOR /;"	d
HTTP_PARSER_VERSION_PATCH	utils/http_parser.h	/^#define HTTP_PARSER_VERSION_PATCH /;"	d
HTTP_REQUEST	utils/http_parser.h	/^enum http_parser_type { HTTP_REQUEST, HTTP_RESPONSE, HTTP_BOTH };$/;"	e	enum:http_parser_type
HTTP_RESPONSE	utils/http_parser.h	/^enum http_parser_type { HTTP_REQUEST, HTTP_RESPONSE, HTTP_BOTH };$/;"	e	enum:http_parser_type
HTTP_STATUS_MAP	utils/http_parser.h	/^  HTTP_STATUS_MAP(XX)$/;"	e	enum:http_status
HTTP_STATUS_MAP	utils/http_parser.h	/^#define HTTP_STATUS_MAP(/;"	d
HTTP_STRERROR_GEN	utils/http_parser.c	/^#define HTTP_STRERROR_GEN(/;"	d	file:
HTTP_STRERROR_GEN	utils/http_parser.c	/^#undef HTTP_STRERROR_GEN$/;"	d	file:
INCLUDE_PATH	depends/hiredis/Makefile	/^INCLUDE_PATH?=include\/hiredis$/;"	m
INCS	accesshttp/makefile	/^INCS = -I ..\/network -I ..\/utils$/;"	m
INCS	accessrest/makefile	/^INCS = -I ..\/network -I ..\/utils$/;"	m
INCS	accessws/makefile	/^INCS = -I ..\/network -I ..\/utils$/;"	m
INCS	alertcenter/makefile	/^INCS = -I ..\/network -I ..\/utils$/;"	m
INCS	logwriter/makefile	/^INCS = -I ..\/network -I ..\/utils$/;"	m
INCS	marketprice/makefile	/^INCS = -I ..\/network -I ..\/utils$/;"	m
INCS	matchengine/makefile	/^INCS = -I ..\/network -I ..\/utils$/;"	m
INCS	monitoragent/makefile	/^INCS = -I ..\/network -I ..\/utils$/;"	m
INCS	monitorcenter/makefile	/^INCS = -I ..\/network -I ..\/utils$/;"	m
INCS	readhistory/makefile	/^INCS = -I ..\/network -I ..\/utils$/;"	m
INCS	test/marketprice/makefile	/^INCS = -I ..\/..\/network -I ..\/..\/utils$/;"	m
INCS	utils/makefile	/^INCS = -I ..\/network$/;"	m
INSTALL	depends/hiredis/Makefile	/^  INSTALL= cp -r$/;"	m
INSTALL	depends/hiredis/Makefile	/^  INSTALL?= cp -r$/;"	m
INSTALL	depends/hiredis/Makefile	/^INSTALL?= cp -a$/;"	m
INSTALL_INCLUDE_PATH	depends/hiredis/Makefile	/^INSTALL_INCLUDE_PATH= $(DESTDIR)$(PREFIX)\/$(INCLUDE_PATH)$/;"	m
INSTALL_LIBRARY_PATH	depends/hiredis/Makefile	/^INSTALL_LIBRARY_PATH= $(DESTDIR)$(PREFIX)\/$(LIBRARY_PATH)$/;"	m
INSTALL_PKGCONF_PATH	depends/hiredis/Makefile	/^INSTALL_PKGCONF_PATH= $(INSTALL_LIBRARY_PATH)\/$(PKGCONF_PATH)$/;"	m
INTEGER_WIDTH_TEST	depends/hiredis/test.c	/^#define INTEGER_WIDTH_TEST(/;"	d	file:
INTERVAL_DAY	marketprice/mp_message.c	/^    INTERVAL_DAY,$/;"	e	enum:__anon1	file:
INTERVAL_HOUR	marketprice/mp_message.c	/^    INTERVAL_HOUR,$/;"	e	enum:__anon1	file:
INTERVAL_MAX_LEN	accessws/aw_config.h	/^# define INTERVAL_MAX_LEN /;"	d
INTERVAL_MIN	marketprice/mp_message.c	/^    INTERVAL_MIN,$/;"	e	enum:__anon1	file:
INTERVAL_SEC	marketprice/mp_message.c	/^    INTERVAL_SEC,$/;"	e	enum:__anon1	file:
IS_ALPHA	utils/http_parser.c	/^#define IS_ALPHA(/;"	d	file:
IS_ALPHANUM	utils/http_parser.c	/^#define IS_ALPHANUM(/;"	d	file:
IS_HEADER_CHAR	utils/http_parser.c	/^#define IS_HEADER_CHAR(/;"	d	file:
IS_HEX	utils/http_parser.c	/^#define IS_HEX(/;"	d	file:
IS_HOST_CHAR	utils/http_parser.c	/^#define IS_HOST_CHAR(/;"	d	file:
IS_MARK	utils/http_parser.c	/^#define IS_MARK(/;"	d	file:
IS_NUM	utils/http_parser.c	/^#define IS_NUM(/;"	d	file:
IS_URL_CHAR	utils/http_parser.c	/^#define IS_URL_CHAR(/;"	d	file:
IS_USERINFO_CHAR	utils/http_parser.c	/^#define IS_USERINFO_CHAR(/;"	d	file:
KEEP_ALIVE	utils/http_parser.c	/^#define KEEP_ALIVE /;"	d	file:
LF	utils/http_parser.c	/^#define LF /;"	d	file:
LIBNAME	depends/hiredis/Makefile	/^LIBNAME=libhiredis$/;"	m
LIBRARY_PATH	depends/hiredis/Makefile	/^LIBRARY_PATH?=lib$/;"	m
LIBS	accesshttp/makefile	/^LIBS = -L ..\/utils -lutils -L ..\/network -lnetwork -Wl,-Bstatic -lev -ljansson -lmpdec -lrdkafka -lz -lssl -lcrypto -lhiredis -Wl,-Bdynamic -lm -lpthread -ldl$/;"	m
LIBS	accessrest/makefile	/^LIBS = -L ..\/utils -lutils -L ..\/network -lnetwork -Wl,-Bstatic -lev -ljansson -lmpdec -lrdkafka -lhiredis -lcurl -lssl -lcrypto -lz -Wl,-Bdynamic -lm -lpthread -ldl$/;"	m
LIBS	accessws/makefile	/^LIBS = -L ..\/utils -lutils -L ..\/network -lnetwork -Wl,-Bstatic -lev -ljansson -lmpdec -lrdkafka -lhiredis -lcurl -lssl -lcrypto -lz -Wl,-Bdynamic -lm -lpthread -ldl$/;"	m
LIBS	alertcenter/makefile	/^LIBS = -L ..\/utils -lutils -L ..\/network -lnetwork -Wl,-Bstatic -lev -lhiredis -ljansson -lmpdec -lcurl -lssl -lcrypto -Wl,-Bdynamic -lm$/;"	m
LIBS	logwriter/makefile	/^LIBS = -L ..\/utils -lutils -L ..\/network -lnetwork -Wl,-Bstatic -lev -lhiredis -ljansson -lmpdec -lcurl -lssl -lcrypto -Wl,-Bdynamic -lm -lpthread$/;"	m
LIBS	marketprice/makefile	/^LIBS = -L ..\/utils -lutils -L ..\/network -lnetwork -Wl,-Bstatic -lev -ljansson -lmpdec -lrdkafka -lhiredis -lcurl -lssl -lcrypto -lz -Wl,-Bdynamic -lm -lpthread -ldl$/;"	m
LIBS	matchengine/makefile	/^LIBS = -L ..\/utils -lutils -L ..\/network -lnetwork -Wl,-Bstatic -lev -ljansson -lmpdec -lmysqlclient -lrdkafka -lhiredis -lcurl -lssl -lcrypto -lz -Wl,-Bdynamic -lm -lpthread -ldl -lstdc++$/;"	m
LIBS	monitoragent/makefile	/^LIBS = -L ..\/utils -lutils -L ..\/network -lnetwork -Wl,-Bstatic -lev -ljansson -lmpdec -lrdkafka -lz -lssl -lcrypto -lhiredis -lcurl -Wl,-Bdynamic -lm -lpthread -ldl$/;"	m
LIBS	monitorcenter/makefile	/^LIBS = -L ..\/utils -lutils -L ..\/network -lnetwork -Wl,-Bstatic -lev -ljansson -lmpdec -lrdkafka -lz -lssl -lcrypto -lhiredis -lcurl -Wl,-Bdynamic -lm -lpthread -ldl$/;"	m
LIBS	readhistory/makefile	/^LIBS = -L ..\/utils -lutils -L ..\/network -lnetwork -Wl,-Bstatic -lev -ljansson -lmpdec -lmysqlclient -lz -lhiredis -Wl,-Bdynamic -lm -lpthread -ldl -lstdc++$/;"	m
LIBS	test/marketprice/makefile	/^LIBS = -L ..\/..\/utils -lutils -L ..\/..\/network -lnetwork -Wl,-Bstatic -lev -ljansson -lmpdec -lrdkafka -lz -lssl -lcrypto -lhiredis -Wl,-Bdynamic -lm -lpthread -ldl$/;"	m
LIKELY	utils/http_parser.c	/^# define LIKELY(/;"	d	file:
LIST_START_HEAD	utils/ut_list.h	/^# define LIST_START_HEAD /;"	d
LIST_START_TAIL	utils/ut_list.h	/^# define LIST_START_TAIL /;"	d
LOWER	utils/http_parser.c	/^#define LOWER(/;"	d	file:
MAGIC_NUM	utils/ut_queue.c	/^# define MAGIC_NUM /;"	d	file:
MARK	utils/http_parser.c	/^#define MARK(/;"	d	file:
MARKET_DEALS_MAX	marketprice/mp_message.h	/^# define MARKET_DEALS_MAX /;"	d
MARKET_NAME_MAX	marketprice/mp_message.h	/^# define MARKET_NAME_MAX /;"	d
MARKET_NAME_MAX_LEN	accessrest/ar_config.h	/^# define MARKET_NAME_MAX_LEN /;"	d
MARKET_NAME_MAX_LEN	accessws/aw_config.h	/^# define MARKET_NAME_MAX_LEN /;"	d
MARKET_ORDER_SIDE_ASK	utils/ut_define.h	/^# define MARKET_ORDER_SIDE_ASK /;"	d
MARKET_ORDER_SIDE_BID	utils/ut_define.h	/^# define MARKET_ORDER_SIDE_BID /;"	d
MARKET_ORDER_TYPE_LIMIT	utils/ut_define.h	/^# define MARKET_ORDER_TYPE_LIMIT /;"	d
MARKET_ORDER_TYPE_MARKET	utils/ut_define.h	/^# define MARKET_ORDER_TYPE_MARKET /;"	d
MARKET_ROLE_MAKER	utils/ut_define.h	/^# define MARKET_ROLE_MAKER /;"	d
MARKET_ROLE_TAKER	utils/ut_define.h	/^# define MARKET_ROLE_TAKER /;"	d
MARKET_STOP_STATUS_ACTIVE	utils/ut_define.h	/^# define MARKET_STOP_STATUS_ACTIVE /;"	d
MARKET_STOP_STATUS_CANCEL	utils/ut_define.h	/^# define MARKET_STOP_STATUS_CANCEL /;"	d
MARKET_STOP_STATUS_FAIL	utils/ut_define.h	/^# define MARKET_STOP_STATUS_FAIL /;"	d
MARKET_TRADE_SIDE_BUY	utils/ut_define.h	/^# define MARKET_TRADE_SIDE_BUY /;"	d
MARKET_TRADE_SIDE_SELL	utils/ut_define.h	/^# define MARKET_TRADE_SIDE_SELL /;"	d
MAX_HOST_LENGTH	monitoragent/ma_config.h	/^# define MAX_HOST_LENGTH /;"	d
MAX_HOST_LENGTH	monitorcenter/mc_config.h	/^# define MAX_HOST_LENGTH /;"	d
MAX_KEEP_DAYS	monitoragent/ma_config.h	/^# define MAX_KEEP_DAYS /;"	d
MAX_KEEP_DAYS	monitorcenter/mc_config.h	/^# define MAX_KEEP_DAYS /;"	d
MAX_KEY_LENGTH	monitoragent/ma_config.h	/^# define MAX_KEY_LENGTH /;"	d
MAX_KEY_LENGTH	monitorcenter/mc_config.h	/^# define MAX_KEY_LENGTH /;"	d
MAX_PENDING_HISTORY	matchengine/me_config.h	/^# define MAX_PENDING_HISTORY /;"	d
MAX_PENDING_JOB	readhistory/rh_server.c	/^# define MAX_PENDING_JOB /;"	d	file:
MAX_PENDING_MESSAGE	matchengine/me_config.h	/^# define MAX_PENDING_MESSAGE /;"	d
MAX_PENDING_OPERLOG	matchengine/me_config.h	/^# define MAX_PENDING_OPERLOG /;"	d
MAX_QUERY_POINTS	monitoragent/ma_config.h	/^# define MAX_QUERY_POINTS /;"	d
MAX_QUERY_POINTS	monitorcenter/mc_config.h	/^# define MAX_QUERY_POINTS /;"	d
MAX_SCOPE_LENGTH	monitoragent/ma_config.h	/^# define MAX_SCOPE_LENGTH /;"	d
MAX_SCOPE_LENGTH	monitorcenter/mc_config.h	/^# define MAX_SCOPE_LENGTH /;"	d
MA_CONFIG_H	monitoragent/ma_config.h	/^# define MA_CONFIG_H$/;"	d
MA_SERVER_H	monitoragent/ma_server.h	/^# define MA_SERVER_H$/;"	d
MC_CONFIG_H	monitorcenter/mc_config.h	/^# define MC_CONFIG_H$/;"	d
MC_SERVER_H	monitorcenter/mc_server.h	/^# define MC_SERVER_H$/;"	d
MIN	utils/http_parser.c	/^# define MIN(/;"	d	file:
NEW_MESSAGE	utils/http_parser.c	/^# define NEW_MESSAGE(/;"	d	file:
NW_BUF_POOL_INIT_SIZE	network/nw_buf.c	/^# define NW_BUF_POOL_INIT_SIZE /;"	d	file:
NW_CACHE_INIT_SIZE	network/nw_buf.c	/^# define NW_CACHE_INIT_SIZE /;"	d	file:
NW_HUMAN_ADDR_SIZE	network/nw_sock.h	/^# define NW_HUMAN_ADDR_SIZE /;"	d
NW_SES_TYPE_CLIENT	network/nw_ses.h	/^    NW_SES_TYPE_CLIENT, \/* clinet side *\/$/;"	e	enum:__anon3
NW_SES_TYPE_COMMON	network/nw_ses.h	/^    NW_SES_TYPE_COMMON, \/* stream connection *\/$/;"	e	enum:__anon3
NW_SES_TYPE_SERVER	network/nw_ses.h	/^    NW_SES_TYPE_SERVER, \/* server side *\/$/;"	e	enum:__anon3
NW_SOCKADDR	network/nw_sock.h	/^# define NW_SOCKADDR(/;"	d
NW_SOCK_IP_SIZE	network/nw_sock.h	/^# define NW_SOCK_IP_SIZE /;"	d
NW_STATE_HASH_TABLE_INIT_SIZE	network/nw_state.c	/^# define NW_STATE_HASH_TABLE_INIT_SIZE /;"	d	file:
OBJ	depends/hiredis/Makefile	/^OBJ=net.o hiredis.o sds.o async.o read.o$/;"	m
OPTIMIZATION	depends/hiredis/Makefile	/^OPTIMIZATION?=-O3$/;"	m
ORDER_BOOK_MAX_LEN	matchengine/me_config.h	/^# define ORDER_BOOK_MAX_LEN /;"	d
ORDER_EVENT_FINISH	matchengine/me_message.h	/^    ORDER_EVENT_FINISH  = 3,$/;"	e	enum:__anon10
ORDER_EVENT_PUT	matchengine/me_message.h	/^    ORDER_EVENT_PUT     = 1,$/;"	e	enum:__anon10
ORDER_EVENT_UPDATE	matchengine/me_message.h	/^    ORDER_EVENT_UPDATE  = 2,$/;"	e	enum:__anon10
ORDER_LIST_MAX_LEN	matchengine/me_config.h	/^# define ORDER_LIST_MAX_LEN /;"	d
PARSING_HEADER	utils/http_parser.c	/^#define PARSING_HEADER(/;"	d	file:
PKGCONFNAME	depends/hiredis/Makefile	/^PKGCONFNAME=hiredis.pc$/;"	m
PKGCONF_PATH	depends/hiredis/Makefile	/^PKGCONF_PATH?=pkgconfig$/;"	m
PREFIX	depends/hiredis/Makefile	/^PREFIX?=\/usr\/local$/;"	m
PROXY_CONNECTION	utils/http_parser.c	/^#define PROXY_CONNECTION /;"	d	file:
QUERY_LIMIT	readhistory/rh_config.h	/^# define QUERY_LIMIT /;"	d
REAL_CFLAGS	depends/hiredis/Makefile	/^REAL_CFLAGS=$(OPTIMIZATION) -fPIC $(CFLAGS) $(WARNINGS) $(DEBUG) $(ARCH)$/;"	m
REAL_LDFLAGS	depends/hiredis/Makefile	/^REAL_LDFLAGS=$(LDFLAGS) $(ARCH)$/;"	m
REDIS_BLOCK	depends/hiredis/hiredis.h	/^#define REDIS_BLOCK /;"	d
REDIS_CONNECTED	depends/hiredis/hiredis.h	/^#define REDIS_CONNECTED /;"	d
REDIS_CONNECT_RETRIES	depends/hiredis/hiredis.h	/^#define REDIS_CONNECT_RETRIES /;"	d
REDIS_CONN_TCP	depends/hiredis/hiredis.h	/^    REDIS_CONN_TCP,$/;"	e	enum:redisConnectionType
REDIS_CONN_UNIX	depends/hiredis/hiredis.h	/^    REDIS_CONN_UNIX,$/;"	e	enum:redisConnectionType
REDIS_DISCONNECTING	depends/hiredis/hiredis.h	/^#define REDIS_DISCONNECTING /;"	d
REDIS_ERR	depends/hiredis/read.h	/^#define REDIS_ERR /;"	d
REDIS_ERR_EOF	depends/hiredis/read.h	/^#define REDIS_ERR_EOF /;"	d
REDIS_ERR_IO	depends/hiredis/read.h	/^#define REDIS_ERR_IO /;"	d
REDIS_ERR_OOM	depends/hiredis/read.h	/^#define REDIS_ERR_OOM /;"	d
REDIS_ERR_OTHER	depends/hiredis/read.h	/^#define REDIS_ERR_OTHER /;"	d
REDIS_ERR_PROTOCOL	depends/hiredis/read.h	/^#define REDIS_ERR_PROTOCOL /;"	d
REDIS_FREEING	depends/hiredis/hiredis.h	/^#define REDIS_FREEING /;"	d
REDIS_IN_CALLBACK	depends/hiredis/hiredis.h	/^#define REDIS_IN_CALLBACK /;"	d
REDIS_KEEPALIVE_INTERVAL	depends/hiredis/hiredis.h	/^#define REDIS_KEEPALIVE_INTERVAL /;"	d
REDIS_MONITORING	depends/hiredis/hiredis.h	/^#define REDIS_MONITORING /;"	d
REDIS_OK	depends/hiredis/read.h	/^#define REDIS_OK /;"	d
REDIS_PORT	depends/hiredis/Makefile	/^REDIS_PORT=56379$/;"	m
REDIS_READER_MAX_BUF	depends/hiredis/read.h	/^#define REDIS_READER_MAX_BUF /;"	d
REDIS_REPLY_ARRAY	depends/hiredis/read.h	/^#define REDIS_REPLY_ARRAY /;"	d
REDIS_REPLY_ERROR	depends/hiredis/read.h	/^#define REDIS_REPLY_ERROR /;"	d
REDIS_REPLY_INTEGER	depends/hiredis/read.h	/^#define REDIS_REPLY_INTEGER /;"	d
REDIS_REPLY_NIL	depends/hiredis/read.h	/^#define REDIS_REPLY_NIL /;"	d
REDIS_REPLY_STATUS	depends/hiredis/read.h	/^#define REDIS_REPLY_STATUS /;"	d
REDIS_REPLY_STRING	depends/hiredis/read.h	/^#define REDIS_REPLY_STRING /;"	d
REDIS_REUSEADDR	depends/hiredis/hiredis.h	/^#define REDIS_REUSEADDR /;"	d
REDIS_SENTINEL_LIST	alertcenter/send_alert.py	/^REDIS_SENTINEL_LIST = [("192.168.0.62", 26379), ("192.168.0.63", 26379), ("192.168.0.64", 26379)]$/;"	v
REDIS_SERVER	depends/hiredis/Makefile	/^REDIS_SERVER=redis-server$/;"	m
REDIS_SUBSCRIBED	depends/hiredis/hiredis.h	/^#define REDIS_SUBSCRIBED /;"	d
REDIS_TEST_CONFIG	depends/hiredis/Makefile	/^define REDIS_TEST_CONFIG$/;"	m
REEXECUTE	utils/http_parser.c	/^#define REEXECUTE(/;"	d	file:
RETURN	utils/http_parser.c	/^#define RETURN(/;"	d	file:
RPC_CMD_HEARTBEAT	utils/ut_rpc.h	/^# define RPC_CMD_HEARTBEAT /;"	d
RPC_HEARTBEAT_INTERVAL	utils/ut_rpc.h	/^# define RPC_HEARTBEAT_INTERVAL /;"	d
RPC_HEARTBEAT_TIMEOUT_DEFAULT	utils/ut_rpc.h	/^# define RPC_HEARTBEAT_TIMEOUT_DEFAULT /;"	d
RPC_HEARTBEAT_TIMEOUT_MAX	utils/ut_rpc.h	/^# define RPC_HEARTBEAT_TIMEOUT_MAX /;"	d
RPC_HEARTBEAT_TIMEOUT_MIN	utils/ut_rpc.h	/^# define RPC_HEARTBEAT_TIMEOUT_MIN /;"	d
RPC_HEARTBEAT_TYPE_TIMEOUT	utils/ut_rpc.h	/^# define RPC_HEARTBEAT_TYPE_TIMEOUT /;"	d
RPC_PKG_HEAD_SIZE	utils/ut_rpc.h	/^# define RPC_PKG_HEAD_SIZE /;"	d
RPC_PKG_MAGIC	utils/ut_rpc.h	/^# define RPC_PKG_MAGIC /;"	d
RPC_PKG_TYPE_PUSH	utils/ut_rpc.h	/^# define RPC_PKG_TYPE_PUSH /;"	d
RPC_PKG_TYPE_REPLY	utils/ut_rpc.h	/^# define RPC_PKG_TYPE_REPLY /;"	d
RPC_PKG_TYPE_REQUEST	utils/ut_rpc.h	/^# define RPC_PKG_TYPE_REQUEST /;"	d
RedisQtAdapter	depends/hiredis/adapters/qt.h	/^        RedisQtAdapter(QObject * parent = 0)$/;"	f	class:RedisQtAdapter
RedisQtAdapter	depends/hiredis/adapters/qt.h	/^class RedisQtAdapter : public QObject {$/;"	c
RedisQtAddRead	depends/hiredis/adapters/qt.h	/^    void RedisQtAddRead(void * adapter) {$/;"	f	class:RedisQtAdapter
RedisQtAddWrite	depends/hiredis/adapters/qt.h	/^    void RedisQtAddWrite(void * adapter) {$/;"	f	class:RedisQtAdapter
RedisQtCleanup	depends/hiredis/adapters/qt.h	/^    void RedisQtCleanup(void * adapter) {$/;"	f	class:RedisQtAdapter
RedisQtDelRead	depends/hiredis/adapters/qt.h	/^    void RedisQtDelRead(void * adapter) {$/;"	f	class:RedisQtAdapter
RedisQtDelWrite	depends/hiredis/adapters/qt.h	/^    void RedisQtDelWrite(void * adapter) {$/;"	f	class:RedisQtAdapter
RedisRunLoop	depends/hiredis/adapters/macosx.h	/^} RedisRunLoop;$/;"	t	typeref:struct:__anon16
RedisSource	depends/hiredis/adapters/glib.h	/^} RedisSource;$/;"	t	typeref:struct:__anon15
SDS_LLSTR_SIZE	depends/hiredis/sds.c	/^#define SDS_LLSTR_SIZE /;"	d	file:
SDS_LLSTR_SIZE	utils/ut_sds.c	/^#define SDS_LLSTR_SIZE /;"	d	file:
SDS_MAX_PREALLOC	depends/hiredis/sds.h	/^#define SDS_MAX_PREALLOC /;"	d
SDS_MAX_PREALLOC	utils/ut_sds.h	/^#define SDS_MAX_PREALLOC /;"	d
SENTINEL_LIST	monitorcenter/delete_all.py	/^SENTINEL_LIST = [("127.0.0.1", 26381), ("127.0.0.1", 26382), ("127.0.0.1", 26383)]$/;"	v
SENTINEL_LIST	tools/monitor_delete_scope.py	/^SENTINEL_LIST = [("127.0.0.1", 26381), ("127.0.0.1", 26382), ("127.0.0.1", 26383)]$/;"	v
SENTINEL_NAME	monitorcenter/delete_all.py	/^SENTINEL_NAME = "mymaster"$/;"	v
SENTINEL_NAME	tools/monitor_delete_scope.py	/^SENTINEL_NAME = "mymaster"$/;"	v
SET_ERRNO	utils/http_parser.c	/^#define SET_ERRNO(/;"	d	file:
SKIPLIST_MAX_LEVEL	utils/ut_skiplist.c	/^# define SKIPLIST_MAX_LEVEL /;"	d	file:
SKIPLIST_P	utils/ut_skiplist.c	/^# define SKIPLIST_P /;"	d	file:
SOURCE_MAX_LEN	accessws/aw_config.h	/^# define SOURCE_MAX_LEN /;"	d
SOURCE_MAX_LEN	matchengine/me_config.h	/^# define SOURCE_MAX_LEN /;"	d
STLIBNAME	depends/hiredis/Makefile	/^STLIBNAME=$(LIBNAME).$(STLIBSUFFIX)$/;"	m
STLIBSUFFIX	depends/hiredis/Makefile	/^STLIBSUFFIX=a$/;"	m
STLIB_MAKE_CMD	depends/hiredis/Makefile	/^STLIB_MAKE_CMD=ar rcs $(STLIBNAME)$/;"	m
STOP_EVENT_ACTIVE	matchengine/me_message.h	/^    STOP_EVENT_ACTIVE   = 2,$/;"	e	enum:__anon11
STOP_EVENT_CANCEL	matchengine/me_message.h	/^    STOP_EVENT_CANCEL   = 3,$/;"	e	enum:__anon11
STOP_EVENT_PUT	matchengine/me_message.h	/^    STOP_EVENT_PUT      = 1,$/;"	e	enum:__anon11
STRICT_CHECK	utils/http_parser.c	/^# define STRICT_CHECK(/;"	d	file:
STRICT_TOKEN	utils/http_parser.c	/^#define STRICT_TOKEN(/;"	d	file:
Sentinel	alertcenter/send_alert.py	/^from redis.sentinel import Sentinel$/;"	i
Sentinel	monitorcenter/delete_all.py	/^from redis.sentinel import Sentinel$/;"	i
Sentinel	tools/monitor_delete_scope.py	/^from redis.sentinel import Sentinel$/;"	i
T	utils/http_parser.c	/^# define T(/;"	d	file:
T	utils/http_parser.c	/^#undef T$/;"	d	file:
TARGET	accesshttp/makefile	/^TARGET  := accesshttp.exe$/;"	m
TARGET	accessrest/makefile	/^TARGET  := accessrest.exe$/;"	m
TARGET	accessws/makefile	/^TARGET  := accessws.exe$/;"	m
TARGET	alertcenter/makefile	/^TARGET  := alertcenter.exe$/;"	m
TARGET	logwriter/makefile	/^TARGET  := logwriter.exe$/;"	m
TARGET	marketprice/makefile	/^TARGET  := marketprice.exe$/;"	m
TARGET	matchengine/makefile	/^TARGET  := matchengine.exe$/;"	m
TARGET	monitoragent/makefile	/^TARGET  := monitoragent.exe$/;"	m
TARGET	monitorcenter/makefile	/^TARGET  := monitorcenter.exe$/;"	m
TARGET	network/makefile	/^TARGET  := libnetwork.a$/;"	m
TARGET	readhistory/makefile	/^TARGET  := readhistory.exe$/;"	m
TARGET	test/marketprice/makefile	/^TARGET  := marketprice.exe$/;"	m
TARGET	utils/makefile	/^TARGET  := libutils.a$/;"	m
TESTS	depends/hiredis/Makefile	/^TESTS=hiredis-test$/;"	m
TOKEN	utils/http_parser.c	/^#define TOKEN(/;"	d	file:
TRANSFER_ENCODING	utils/http_parser.c	/^#define TRANSFER_ENCODING /;"	d	file:
UF_FRAGMENT	utils/http_parser.h	/^  , UF_FRAGMENT         = 5$/;"	e	enum:http_parser_url_fields
UF_HOST	utils/http_parser.h	/^  , UF_HOST             = 1$/;"	e	enum:http_parser_url_fields
UF_MAX	utils/http_parser.h	/^  , UF_MAX              = 7$/;"	e	enum:http_parser_url_fields
UF_PATH	utils/http_parser.h	/^  , UF_PATH             = 3$/;"	e	enum:http_parser_url_fields
UF_PORT	utils/http_parser.h	/^  , UF_PORT             = 2$/;"	e	enum:http_parser_url_fields
UF_QUERY	utils/http_parser.h	/^  , UF_QUERY            = 4$/;"	e	enum:http_parser_url_fields
UF_SCHEMA	utils/http_parser.h	/^  { UF_SCHEMA           = 0$/;"	e	enum:http_parser_url_fields
UF_USERINFO	utils/http_parser.h	/^  , UF_USERINFO         = 6$/;"	e	enum:http_parser_url_fields
ULLONG_MAX	utils/http_parser.c	/^# define ULLONG_MAX /;"	d	file:
UNLIKELY	utils/http_parser.c	/^# define UNLIKELY(/;"	d	file:
UPDATE_STATE	utils/http_parser.c	/^#define UPDATE_STATE(/;"	d	file:
UPGRADE	utils/http_parser.c	/^#define UPGRADE /;"	d	file:
UT_COMM_DICT_H	utils/ut_comm_dict.h	/^# define UT_COMM_DICT_H$/;"	d
WARNINGS	depends/hiredis/Makefile	/^WARNINGS=-Wall -W -Wstrict-prototypes -Wwrite-strings$/;"	m
WRITE_BUFFER_CHECK_LEN	utils/ut_log.c	/^# define WRITE_BUFFER_CHECK_LEN /;"	d	file:
WRITE_BUFFER_LEN	utils/ut_log.c	/^# define WRITE_BUFFER_LEN /;"	d	file:
WRITE_INTERVAL_IN_USEC	utils/ut_log.c	/^# define WRITE_INTERVAL_IN_USEC /;"	d	file:
XX	utils/http_parser.c	/^#define XX(/;"	d	file:
XX	utils/http_parser.c	/^#undef XX$/;"	d	file:
XX	utils/http_parser.h	/^#define XX(/;"	d
XX	utils/http_parser.h	/^#undef XX$/;"	d
_AC_CONFIG_H_	alertcenter/ac_config.h	/^# define _AC_CONFIG_H_$/;"	d
_AC_SERVER_H_	alertcenter/ac_server.h	/^# define _AC_SERVER_H_$/;"	d
_AH_CONFIG_H_	accesshttp/ah_config.h	/^# define _AH_CONFIG_H_$/;"	d
_AH_LISTENER_H_	accesshttp/ah_listener.h	/^# define _AH_LISTENER_H_$/;"	d
_AH_SERVER_H_	accesshttp/ah_server.h	/^# define _AH_SERVER_H_$/;"	d
_AR_CONFIG_H_	accessrest/ar_config.h	/^# define _AR_CONFIG_H_$/;"	d
_AR_LISTENER_H_	accessrest/ar_listener.h	/^# define _AR_LISTENER_H_$/;"	d
_AR_SERVER_H_	accessrest/ar_server.h	/^# define _AR_SERVER_H_$/;"	d
_AR_TICKER_H_	accessrest/ar_ticker.h	/^# define _AR_TICKER_H_$/;"	d
_AW_ASSET_H_	accessws/aw_asset.h	/^# define _AW_ASSET_H_$/;"	d
_AW_AUTH_H_	accessws/aw_auth.h	/^# define _AW_AUTH_H_$/;"	d
_AW_CONFIG_H_	accessws/aw_config.h	/^# define _AW_CONFIG_H_$/;"	d
_AW_DEALS_H_	accessws/aw_deals.h	/^# define _AW_DEALS_H_$/;"	d
_AW_DEPTH_H_	accessws/aw_depth.h	/^# define _AW_DEPTH_H_$/;"	d
_AW_KLINE_H_	accessws/aw_kline.h	/^# define _AW_KLINE_H_$/;"	d
_AW_LISTENER_H_	accessws/aw_listener.h	/^# define _AW_LISTENER_H_$/;"	d
_AW_MESSAGE_H_	accessws/aw_message.h	/^# define _AW_MESSAGE_H_$/;"	d
_AW_ORDER_H_	accessws/aw_order.h	/^# define _AW_ORDER_H_$/;"	d
_AW_SERVER_H_	accessws/aw_server.h	/^# define _AW_SERVER_H_$/;"	d
_AW_SIGN_H_	accessws/aw_sign.h	/^# define _AW_SIGN_H_$/;"	d
_AW_STATE_H_	accessws/aw_state.h	/^# define _AW_STATE_H_$/;"	d
_BSD_SOURCE	depends/hiredis/fmacros.h	/^#define _BSD_SOURCE$/;"	d
_DEFAULT_SOURCE	depends/hiredis/fmacros.h	/^#define _DEFAULT_SOURCE$/;"	d
_DICT_H_	utils/ut_dict.h	/^# define _DICT_H_$/;"	d
_DLOG_H_	utils/ut_log.h	/^# define _DLOG_H_$/;"	d
_EL_ADD_READ	depends/hiredis/async.c	/^#define _EL_ADD_READ(/;"	d	file:
_EL_ADD_WRITE	depends/hiredis/async.c	/^#define _EL_ADD_WRITE(/;"	d	file:
_EL_CLEANUP	depends/hiredis/async.c	/^#define _EL_CLEANUP(/;"	d	file:
_EL_DEL_READ	depends/hiredis/async.c	/^#define _EL_DEL_READ(/;"	d	file:
_EL_DEL_WRITE	depends/hiredis/async.c	/^#define _EL_DEL_WRITE(/;"	d	file:
_FILE_OFFSET_BITS	utils/ut_log.c	/^# define _FILE_OFFSET_BITS /;"	d	file:
_FILE_OFFSET_BITS	utils/ut_log.c	/^# undef  _FILE_OFFSET_BITS$/;"	d	file:
_FILE_OFFSET_BITS	utils/ut_queue.c	/^# define _FILE_OFFSET_BITS /;"	d	file:
_FILE_OFFSET_BITS	utils/ut_queue.c	/^# undef  _FILE_OFFSET_BITS$/;"	d	file:
_GNU_SOURCE	utils/ut_misc.c	/^# define _GNU_SOURCE$/;"	d	file:
_GNU_SOURCE	utils/ut_title.c	/^# define _GNU_SOURCE$/;"	d	file:
_LW_CONFIG_H_	logwriter/lw_config.h	/^# define _LW_CONFIG_H_$/;"	d
_LW_SERVER_H_	logwriter/lw_server.h	/^# define _LW_SERVER_H_$/;"	d
_ME_BALANCE_H_	matchengine/me_balance.h	/^# define _ME_BALANCE_H_$/;"	d
_ME_CLI_H_	matchengine/me_cli.h	/^# define _ME_CLI_H_$/;"	d
_ME_CONFIG_H_	matchengine/me_config.h	/^# define _ME_CONFIG_H_$/;"	d
_ME_DUMP_H_	matchengine/me_dump.h	/^# define _ME_DUMP_H_$/;"	d
_ME_HISTORY_H_	matchengine/me_history.h	/^# define _ME_HISTORY_H_$/;"	d
_ME_LOAD_H_	matchengine/me_load.h	/^# define _ME_LOAD_H_$/;"	d
_ME_MARKET_H_	matchengine/me_market.h	/^# define _ME_MARKET_H_$/;"	d
_ME_MESSAGE_H_	matchengine/me_message.h	/^# define _ME_MESSAGE_H_$/;"	d
_ME_OPERLOG_H_	matchengine/me_operlog.h	/^# define _ME_OPERLOG_H_$/;"	d
_ME_PERSIST_H_	matchengine/me_persist.h	/^# define _ME_PERSIST_H_$/;"	d
_ME_SERVER_H_	matchengine/me_server.h	/^# define _ME_SERVER_H_$/;"	d
_ME_TRADE_H_	matchengine/me_trade.h	/^# define _ME_TRADE_H_$/;"	d
_ME_UPDATE_H_	matchengine/me_update.h	/^# define _ME_UPDATE_H_$/;"	d
_MISC_H_	utils/ut_misc.h	/^# define _MISC_H_$/;"	d
_MP_ACCESS_H_	marketprice/mp_access.h	/^# define _MP_ACCESS_H_$/;"	d
_MP_CONFIG_H_	marketprice/mp_config.h	/^# define _MP_CONFIG_H_$/;"	d
_MP_KLINE_H_	marketprice/mp_kline.h	/^# define _MP_KLINE_H_$/;"	d
_MP_MESSAGE_H_	marketprice/mp_message.h	/^# define _MP_MESSAGE_H_$/;"	d
_MP_SERVER_H_	marketprice/mp_server.h	/^# define _MP_SERVER_H_$/;"	d
_NW_BUF_H_	network/nw_buf.h	/^# define _NW_BUF_H_$/;"	d
_NW_CLT_H_	network/nw_clt.h	/^# define _NW_CLT_H_$/;"	d
_NW_EVT_H_	network/nw_evt.h	/^# define _NW_EVT_H_$/;"	d
_NW_JOB_H_	network/nw_job.h	/^# define _NW_JOB_H_$/;"	d
_NW_SES_H_	network/nw_ses.h	/^# define _NW_SES_H_$/;"	d
_NW_SOCK_H_	network/nw_sock.h	/^# define _NW_SOCK_H_$/;"	d
_NW_STATE_H_	network/nw_state.h	/^# define _NW_STATE_H_$/;"	d
_NW_SVR_H_	network/nw_svr.h	/^# define _NW_SVR_H_$/;"	d
_NW_TIMER_H_	network/nw_timer.h	/^# define _NW_TIMER_H_$/;"	d
_OSX	depends/hiredis/fmacros.h	/^#define _OSX$/;"	d
_POSIX_C_SOURCE	depends/hiredis/fmacros.h	/^#define _POSIX_C_SOURCE /;"	d
_RH_CONFIG_H_	readhistory/rh_config.h	/^# define _RH_CONFIG_H_$/;"	d
_RH_READER_H_	readhistory/rh_reader.h	/^# define _RH_READER_H_$/;"	d
_RH_SERVER_H_	readhistory/rh_server.h	/^# define _RH_SERVER_H_$/;"	d
_UT_ALERT_H_	utils/ut_alert.h	/^# define _UT_ALERT_H_$/;"	d
_UT_BASE64_H_	utils/ut_base64.h	/^# define _UT_BASE64_H_$/;"	d
_UT_CLI_H_	utils/ut_cli.h	/^# define _UT_CLI_H_$/;"	d
_UT_CONFIG_H_	utils/ut_config.h	/^# define _UT_CONFIG_H_$/;"	d
_UT_CRC32_H_	utils/ut_crc32.h	/^# define _UT_CRC32_H_$/;"	d
_UT_DECIMAL_H_	utils/ut_decimal.h	/^# define _UT_DECIMAL_H_$/;"	d
_UT_DEFINE_H_	utils/ut_define.h	/^# define _UT_DEFINE_H_$/;"	d
_UT_HTTP_	utils/ut_http.h	/^# define _UT_HTTP_$/;"	d
_UT_HTTP_SVR_H_	utils/ut_http_svr.h	/^# define _UT_HTTP_SVR_H_$/;"	d
_UT_KAFKA_H_	utils/ut_kafka.h	/^# define _UT_KAFKA_H_$/;"	d
_UT_LIST_H_	utils/ut_list.h	/^# define _UT_LIST_H_$/;"	d
_UT_MYSQL_H_	utils/ut_mysql.h	/^# define _UT_MYSQL_H_$/;"	d
_UT_PACK_	utils/ut_pack.h	/^# define _UT_PACK_$/;"	d
_UT_PROFILE_H_	utils/ut_profile.h	/^# define _UT_PROFILE_H_$/;"	d
_UT_REDIS_H_	utils/ut_redis.h	/^# define _UT_REDIS_H_$/;"	d
_UT_RPC_CLT_H_	utils/ut_rpc_clt.h	/^# define _UT_RPC_CLT_H_$/;"	d
_UT_RPC_CMD_H_	utils/ut_rpc_cmd.h	/^# define _UT_RPC_CMD_H_$/;"	d
_UT_RPC_H_	utils/ut_rpc.h	/^# define _UT_RPC_H_$/;"	d
_UT_RPC_SVR_H_	utils/ut_rpc_svr.h	/^# define _UT_RPC_SVR_H_$/;"	d
_UT_SIGNAL_H_	utils/ut_signal.h	/^# define _UT_SIGNAL_H_$/;"	d
_UT_SKIPLIST_H_	utils/ut_skiplist.h	/^# define _UT_SKIPLIST_H_$/;"	d
_UT_TITLE_H_	utils/ut_title.h	/^# define _UT_TITLE_H_$/;"	d
_UT_WS_SVR_H_	utils/ut_ws_svr.h	/^# define _UT_WS_SVR_H_$/;"	d
_WIN32_HELPER_INCLUDE	depends/hiredis/win32.h	/^#define _WIN32_HELPER_INCLUDE$/;"	d
_XOPEN_SOURCE	depends/hiredis/fmacros.h	/^#define _XOPEN_SOURCE /;"	d
_XOPEN_SOURCE	depends/hiredis/fmacros.h	/^#define _XOPEN_SOURCE$/;"	d
__DICT_H	depends/hiredis/dict.h	/^#define __DICT_H$/;"	d
__DLOG__	utils/ut_log.h	/^# define __DLOG__ /;"	d
__HIREDIS_AE_H__	depends/hiredis/adapters/ae.h	/^#define __HIREDIS_AE_H__$/;"	d
__HIREDIS_ASYNC_H	depends/hiredis/async.h	/^#define __HIREDIS_ASYNC_H$/;"	d
__HIREDIS_EXAMPLE_QT_H	depends/hiredis/examples/example-qt.h	/^#define __HIREDIS_EXAMPLE_QT_H$/;"	d
__HIREDIS_FMACRO_H	depends/hiredis/fmacros.h	/^#define __HIREDIS_FMACRO_H$/;"	d
__HIREDIS_GLIB_H__	depends/hiredis/adapters/glib.h	/^#define __HIREDIS_GLIB_H__$/;"	d
__HIREDIS_H	depends/hiredis/hiredis.h	/^#define __HIREDIS_H$/;"	d
__HIREDIS_IVYKIS_H__	depends/hiredis/adapters/ivykis.h	/^#define __HIREDIS_IVYKIS_H__$/;"	d
__HIREDIS_LIBEVENT_H__	depends/hiredis/adapters/libevent.h	/^#define __HIREDIS_LIBEVENT_H__$/;"	d
__HIREDIS_LIBEV_H__	depends/hiredis/adapters/libev.h	/^#define __HIREDIS_LIBEV_H__$/;"	d
__HIREDIS_LIBUV_H__	depends/hiredis/adapters/libuv.h	/^#define __HIREDIS_LIBUV_H__$/;"	d
__HIREDIS_MACOSX_H__	depends/hiredis/adapters/macosx.h	/^#define __HIREDIS_MACOSX_H__$/;"	d
__HIREDIS_QT_H__	depends/hiredis/adapters/qt.h	/^#define __HIREDIS_QT_H__$/;"	d
__HIREDIS_READ_H	depends/hiredis/read.h	/^#define __HIREDIS_READ_H$/;"	d
__MAX_MSEC	depends/hiredis/net.c	/^#define __MAX_MSEC /;"	d	file:
__NET_H	depends/hiredis/net.h	/^#define __NET_H$/;"	d
__SDS_H	depends/hiredis/sds.h	/^#define __SDS_H$/;"	d
__SDS_H	utils/ut_sds.h	/^#define __SDS_H$/;"	d
__process__	accesshttp/ah_main.c	/^const char *__process__ = "accesshttp";$/;"	v
__process__	accessrest/ar_main.c	/^const char *__process__ = "accessrest";$/;"	v
__process__	accessws/aw_main.c	/^const char *__process__ = "accessws";$/;"	v
__process__	logwriter/lw_main.c	/^const char *__process__ = "logwriter";$/;"	v
__process__	marketprice/mp_main.c	/^const char *__process__ = "marketprice";$/;"	v
__process__	matchengine/me_main.c	/^const char *__process__ = "matchengine";$/;"	v
__process__	monitoragent/ma_main.c	/^const char *__process__ = "monitoragent";$/;"	v
__process__	monitorcenter/mc_main.c	/^const char *__process__ = "monitorcenter";$/;"	v
__process__	readhistory/rh_main.c	/^const char *__process__ = "readhistory";$/;"	v
__process__	test/marketprice/mp_main.c	/^const char *__process__ = "marketprice";$/;"	v
__redisAppendCommand	depends/hiredis/hiredis.c	/^int __redisAppendCommand(redisContext *c, const char *cmd, size_t len) {$/;"	f
__redisAsyncCommand	depends/hiredis/async.c	/^static int __redisAsyncCommand(redisAsyncContext *ac, redisCallbackFn *fn, void *privdata, const char *cmd, size_t len) {$/;"	f	file:
__redisAsyncCopyError	depends/hiredis/async.c	/^static void __redisAsyncCopyError(redisAsyncContext *ac) {$/;"	f	file:
__redisAsyncDisconnect	depends/hiredis/async.c	/^static void __redisAsyncDisconnect(redisAsyncContext *ac) {$/;"	f	file:
__redisAsyncFree	depends/hiredis/async.c	/^static void __redisAsyncFree(redisAsyncContext *ac) {$/;"	f	file:
__redisAsyncHandleConnect	depends/hiredis/async.c	/^static int __redisAsyncHandleConnect(redisAsyncContext *ac) {$/;"	f	file:
__redisBlockForReply	depends/hiredis/hiredis.c	/^static void *__redisBlockForReply(redisContext *c) {$/;"	f	file:
__redisGetSubscribeCallback	depends/hiredis/async.c	/^static int __redisGetSubscribeCallback(redisAsyncContext *ac, redisReply *reply, redisCallback *dstcb) {$/;"	f	file:
__redisPushCallback	depends/hiredis/async.c	/^static int __redisPushCallback(redisCallbackList *list, redisCallback *source) {$/;"	f	file:
__redisReaderSetError	depends/hiredis/read.c	/^static void __redisReaderSetError(redisReader *r, int type, const char *str) {$/;"	f	file:
__redisReaderSetErrorOOM	depends/hiredis/read.c	/^static void __redisReaderSetErrorOOM(redisReader *r) {$/;"	f	file:
__redisReaderSetErrorProtocolByte	depends/hiredis/read.c	/^static void __redisReaderSetErrorProtocolByte(redisReader *r, char byte) {$/;"	f	file:
__redisRunCallback	depends/hiredis/async.c	/^static void __redisRunCallback(redisAsyncContext *ac, redisCallback *cb, redisReply *reply) {$/;"	f	file:
__redisSetError	depends/hiredis/hiredis.c	/^void __redisSetError(redisContext *c, int type, const char *str) {$/;"	f
__redisSetErrorFromErrno	depends/hiredis/net.c	/^static void __redisSetErrorFromErrno(redisContext *c, int type, const char *prefix) {$/;"	f	file:
__redisShiftCallback	depends/hiredis/async.c	/^static int __redisShiftCallback(redisCallbackList *list, redisCallback *target) {$/;"	f	file:
__redis_strerror_r	depends/hiredis/hiredis.h	/^#define __redis_strerror_r(/;"	d
__version__	accesshttp/ah_main.c	/^const char *__version__ = "0.1.0";$/;"	v
__version__	accessrest/ar_main.c	/^const char *__version__ = "0.1.0";$/;"	v
__version__	accessws/aw_main.c	/^const char *__version__ = "0.1.0";$/;"	v
__version__	logwriter/lw_main.c	/^const char *__version__ = "0.1.0";$/;"	v
__version__	marketprice/mp_main.c	/^const char *__version__ = "0.1.0";$/;"	v
__version__	matchengine/me_main.c	/^const char *__version__ = "0.1.0";$/;"	v
__version__	monitoragent/ma_main.c	/^const char *__version__ = "0.1.0";$/;"	v
__version__	monitorcenter/mc_main.c	/^const char *__version__ = "0.1.0";$/;"	v
__version__	readhistory/rh_main.c	/^const char *__version__ = "0.1.0";$/;"	v
__version__	test/marketprice/mp_main.c	/^const char *__version__ = "0.1.0";$/;"	v
_dictClear	depends/hiredis/dict.c	/^static int _dictClear(dict *ht) {$/;"	f	file:
_dictExpandIfNeeded	depends/hiredis/dict.c	/^static int _dictExpandIfNeeded(dict *ht) {$/;"	f	file:
_dictInit	depends/hiredis/dict.c	/^static int _dictInit(dict *ht, dictType *type, void *privDataPtr) {$/;"	f	file:
_dictKeyIndex	depends/hiredis/dict.c	/^static int _dictKeyIndex(dict *ht, const void *key) {$/;"	f	file:
_dictNextPower	depends/hiredis/dict.c	/^static unsigned long _dictNextPower(unsigned long size) {$/;"	f	file:
_dictReset	depends/hiredis/dict.c	/^static void _dictReset(dict *ht) {$/;"	f	file:
_redisContextConnectTcp	depends/hiredis/net.c	/^static int _redisContextConnectTcp(redisContext *c, const char *addr, int port,$/;"	f	file:
ac	depends/hiredis/adapters/glib.h	/^    redisAsyncContext *ac;$/;"	m	struct:__anon15
access_id	accessws/aw_sign.c	/^    sds access_id;$/;"	m	struct:sign_request	file:
accesshttp	accessws/aw_config.h	/^    char                *accesshttp;$/;"	m	struct:settings
accesshttp	marketprice/mp_config.h	/^    char                *accesshttp;$/;"	m	struct:settings
active_stop	matchengine/me_market.c	/^static int active_stop(bool real, market_t *m, stop_t *stop)$/;"	f	file:
active_stop_limit	matchengine/me_market.c	/^static int active_stop_limit(bool real, market_t *m, stop_t *stop)$/;"	f	file:
active_stop_market	matchengine/me_market.c	/^static int active_stop_market(bool real, market_t *m, stop_t *stop)$/;"	f	file:
addRead	depends/hiredis/adapters/qt.h	/^        void addRead() {$/;"	f	class:RedisQtAdapter
addRead	depends/hiredis/async.h	/^        void (*addRead)(void *privdata);$/;"	m	struct:redisAsyncContext::__anon17
addWrite	depends/hiredis/adapters/qt.h	/^        void addWrite() {$/;"	f	class:RedisQtAdapter
addWrite	depends/hiredis/async.h	/^        void (*addWrite)(void *privdata);$/;"	m	struct:redisAsyncContext::__anon17
add_cache	marketprice/mp_server.c	/^static int add_cache(sds cache_key, json_t *result)$/;"	f	file:
add_cache	matchengine/me_server.c	/^static int add_cache(sds cache_key, json_t *result)$/;"	f	file:
add_handler	accesshttp/ah_server.c	/^static int add_handler(char *method, rpc_clt *clt, uint32_t cmd)$/;"	f	file:
add_handler	accessrest/ar_server.c	/^static int add_handler(char *method, on_request_method func)$/;"	f	file:
add_handler	accessws/aw_server.c	/^static int add_handler(char *method, on_request_method func)$/;"	f	file:
add_kline_update	marketprice/mp_message.c	/^static void add_kline_update(struct market_info *info, int type, time_t timestamp)$/;"	f	file:
addr	network/nw_clt.h	/^    nw_addr_t addr;$/;"	m	struct:nw_clt_cfg
addr	network/nw_svr.h	/^    nw_addr_t addr;$/;"	m	struct:nw_svr_bind
addr	utils/ut_alert.c	/^static struct sockaddr_in addr;$/;"	v	typeref:struct:sockaddr_in	file:
addr	utils/ut_alert.h	/^    struct sockaddr_in addr;$/;"	m	struct:alert_cfg	typeref:struct:alert_cfg::sockaddr_in
addr	utils/ut_cli.h	/^    nw_addr_t addr;$/;"	m	struct:cli_svr_cfg
addr	utils/ut_log.h	/^    struct sockaddr_in  addr;$/;"	m	struct:__anon7	typeref:struct:__anon7::sockaddr_in
addr	utils/ut_redis.h	/^    struct redis_addr  addr;$/;"	m	struct:redis_sentinel_node	typeref:struct:redis_sentinel_node::redis_addr
addr_arr	utils/ut_redis.h	/^    redis_addr *addr_arr;$/;"	m	struct:redis_sentinel_cfg
addr_arr	utils/ut_rpc_clt.h	/^    nw_addr_t *addr_arr;$/;"	m	struct:rpc_clt
addr_arr	utils/ut_rpc_clt.h	/^    nw_addr_t *addr_arr;$/;"	m	struct:rpc_clt_cfg
addr_count	utils/ut_redis.h	/^    uint32_t addr_count;$/;"	m	struct:redis_sentinel_cfg
addr_count	utils/ut_rpc_clt.h	/^    uint32_t addr_count;$/;"	m	struct:rpc_clt
addr_count	utils/ut_rpc_clt.h	/^    uint32_t addr_count;$/;"	m	struct:rpc_clt_cfg
addrlen	network/nw_sock.h	/^    unsigned int addrlen;$/;"	m	struct:nw_addr_t
agent_addr	utils/ut_profile.c	/^static struct sockaddr_in agent_addr;$/;"	v	typeref:struct:sockaddr_in	file:
agent_host	utils/ut_profile.c	/^static char *agent_host = "127.0.0.1";$/;"	v	file:
agent_port	utils/ut_profile.c	/^static int agent_port = 8888;$/;"	v	file:
aggregate_daily	monitorcenter/mc_server.c	/^static int aggregate_daily(time_t timestamp)$/;"	f	file:
aggregate_daily_scope	monitorcenter/mc_server.c	/^static int aggregate_daily_scope(time_t timestamp, const char *scope)$/;"	f	file:
aggregate_daily_scope_key	monitorcenter/mc_server.c	/^static int aggregate_daily_scope_key(time_t timestamp, const char *scope, const char *key)$/;"	f	file:
aggregate_daily_scope_key_host	monitorcenter/mc_server.c	/^static int aggregate_daily_scope_key_host(time_t timestamp, const char *scope, const char *key, const char *host)$/;"	f	file:
aggregate_hosts	monitorcenter/mc_server.c	/^static int aggregate_hosts(time_t timestamp)$/;"	f	file:
aggregate_hosts_scope	monitorcenter/mc_server.c	/^static int aggregate_hosts_scope(time_t timestamp, const char *scope)$/;"	f	file:
aggregate_hosts_scope_key	monitorcenter/mc_server.c	/^static int aggregate_hosts_scope_key(time_t timestamp, const char *scope, const char *key)$/;"	f	file:
alert	accesshttp/ah_config.h	/^    alert_cfg           alert;$/;"	m	struct:settings
alert	accessrest/ar_config.h	/^    alert_cfg           alert;$/;"	m	struct:settings
alert	accessws/aw_config.h	/^    alert_cfg           alert;$/;"	m	struct:settings
alert	marketprice/mp_config.h	/^    alert_cfg           alert;$/;"	m	struct:settings
alert	matchengine/me_config.h	/^    alert_cfg           alert;$/;"	m	struct:settings
alert	monitoragent/ma_config.h	/^    alert_cfg           alert;$/;"	m	struct:settings
alert	monitorcenter/mc_config.h	/^    alert_cfg           alert;$/;"	m	struct:settings
alert	readhistory/rh_config.h	/^    alert_cfg           alert;$/;"	m	struct:settings
alert_cfg	utils/ut_alert.h	/^typedef struct alert_cfg {$/;"	s
alert_cfg	utils/ut_alert.h	/^} alert_cfg;$/;"	t	typeref:struct:alert_cfg
alert_init	utils/ut_alert.c	/^int alert_init(alert_cfg *cfg)$/;"	f
alert_msg	utils/ut_alert.c	/^int alert_msg(const char *fmt, ...)$/;"	f
alert_vmsg	utils/ut_alert.c	/^int alert_vmsg(const char *fmt, va_list ap)$/;"	f
alloc_read_buf	utils/ut_queue.c	/^static void *alloc_read_buf(queue_t *queue, uint32_t size)$/;"	f	file:
amount	matchengine/me_market.h	/^    mpd_t           *amount;$/;"	m	struct:order_t
amount	matchengine/me_market.h	/^    mpd_t           *amount;$/;"	m	struct:stop_t
append_balance_trade_add	matchengine/me_market.c	/^static int append_balance_trade_add(order_t *order, const char *asset, mpd_t *change, mpd_t *price, mpd_t *amount)$/;"	f	file:
append_balance_trade_fee	matchengine/me_market.c	/^static int append_balance_trade_fee(order_t *order, const char *asset, mpd_t *change, mpd_t *price, mpd_t *amount, mpd_t *fee_rate)$/;"	f	file:
append_balance_trade_sub	matchengine/me_market.c	/^static int append_balance_trade_sub(order_t *order, const char *asset, mpd_t *change, mpd_t *price, mpd_t *amount)$/;"	f	file:
append_kinfo	marketprice/mp_message.c	/^static int append_kinfo(json_t *result, time_t timestamp, struct kline_info *kinfo, const char *market)$/;"	f	file:
append_node	utils/ut_redis.c	/^static void append_node(redis_sentinel_t *context, redis_sentinel_node *node)$/;"	f	file:
append_operlog	matchengine/me_operlog.c	/^int append_operlog(const char *method, json_t *params)$/;"	f
append_order_deal	matchengine/me_history.c	/^static int append_order_deal(double t, uint32_t user_id, uint64_t deal_id, uint64_t order_id, uint64_t deal_order_id, int role,$/;"	f	file:
append_order_deal_history	matchengine/me_history.c	/^int append_order_deal_history(double t, uint64_t deal_id, order_t *ask, int ask_role, order_t *bid, int bid_role,$/;"	f
append_order_detail	matchengine/me_history.c	/^static int append_order_detail(order_t *order)$/;"	f	file:
append_order_history	matchengine/me_history.c	/^int append_order_history(order_t *order)$/;"	f
append_stop_history	matchengine/me_history.c	/^int append_stop_history(stop_t *stop, int status)$/;"	f
append_user_balance	matchengine/me_history.c	/^static int append_user_balance(double t, uint32_t user_id, const char *asset, const char *business, mpd_t *change, mpd_t *balance, const char *detail)$/;"	f	file:
append_user_balance_history	matchengine/me_history.c	/^int append_user_balance_history(double t, uint32_t user_id, const char *asset, const char *business, mpd_t *change, const char *detail)$/;"	f
append_user_deal	matchengine/me_history.c	/^static int append_user_deal(double t, uint32_t user_id, const char *market, uint64_t deal_id, uint64_t order_id, uint64_t deal_order_id, int side, int role,$/;"	f	file:
append_user_order	matchengine/me_history.c	/^static int append_user_order(order_t *order)$/;"	f	file:
arr	utils/ut_config.h	/^    struct sockaddr_in *arr;$/;"	m	struct:inetv4_list	typeref:struct:inetv4_list::sockaddr_in
asks	matchengine/me_market.h	/^    skiplist_t      *asks;$/;"	m	struct:market_t
assert	depends/hiredis/test.c	/^#define assert(/;"	d	file:
assert	depends/hiredis/test.c	/^#undef assert$/;"	d	file:
asset	accessws/aw_asset.c	/^    char asset[ASSET_NAME_MAX_LEN];$/;"	m	struct:state_data	file:
asset	accessws/aw_asset.c	/^    char asset[ASSET_NAME_MAX_LEN];$/;"	m	struct:sub_unit	file:
asset	matchengine/me_balance.h	/^    char        asset[ASSET_NAME_MAX_LEN + 1];$/;"	m	struct:balance_key
asset	matchengine/me_config.h	/^struct asset {$/;"	s
asset	matchengine/me_update.h	/^    char        asset[ASSET_NAME_MAX_LEN + 1];$/;"	m	struct:update_key
asset_dict_hash_function	matchengine/me_balance.c	/^static uint32_t asset_dict_hash_function(const void *key)$/;"	f	file:
asset_dict_key_compare	matchengine/me_balance.c	/^static int asset_dict_key_compare(const void *key1, const void *key2)$/;"	f	file:
asset_dict_key_dup	matchengine/me_balance.c	/^static void *asset_dict_key_dup(const void *key)$/;"	f	file:
asset_dict_key_free	matchengine/me_balance.c	/^static void asset_dict_key_free(void *key)$/;"	f	file:
asset_dict_val_dup	matchengine/me_balance.c	/^static void *asset_dict_val_dup(const void *val)$/;"	f	file:
asset_dict_val_free	matchengine/me_balance.c	/^static void asset_dict_val_free(void *val)$/;"	f	file:
asset_exist	matchengine/me_balance.c	/^bool asset_exist(const char *asset)$/;"	f
asset_fee	matchengine/me_market.h	/^    mpd_t           *asset_fee;$/;"	m	struct:order_t
asset_num	matchengine/me_config.h	/^    size_t              asset_num;$/;"	m	struct:settings
asset_on_update	accessws/aw_asset.c	/^int asset_on_update(uint32_t user_id, const char *asset)$/;"	f
asset_prec	matchengine/me_balance.c	/^int asset_prec(const char *asset)$/;"	f
asset_prec_show	matchengine/me_balance.c	/^int asset_prec_show(const char *asset)$/;"	f
asset_subscribe	accessws/aw_asset.c	/^int asset_subscribe(uint32_t user_id, nw_ses *ses, const char *asset)$/;"	f
asset_subscribe_number	accessws/aw_asset.c	/^size_t asset_subscribe_number(void)$/;"	f
asset_type	matchengine/me_balance.c	/^struct asset_type {$/;"	s	file:
asset_unsubscribe	accessws/aw_asset.c	/^int asset_unsubscribe(uint32_t user_id, nw_ses *ses)$/;"	f
asset_url	matchengine/me_config.h	/^    char                *asset_url;$/;"	m	struct:settings
assets	matchengine/me_config.h	/^    struct asset        *assets;$/;"	m	struct:settings	typeref:struct:settings::asset
auth	accessws/aw_server.h	/^    bool        auth;$/;"	m	struct:clt_info
auth_url	accessws/aw_config.h	/^    char                *auth_url;$/;"	m	struct:settings
authorisation	accessws/aw_sign.c	/^    sds authorisation;$/;"	m	struct:sign_request	file:
backend_cache	accessrest/ar_server.c	/^static dict_t *backend_cache;$/;"	v	file:
backend_cache	accessws/aw_server.c	/^static dict_t *backend_cache;$/;"	v	file:
backend_timeout	accessrest/ar_config.h	/^    double              backend_timeout;$/;"	m	struct:settings
backend_timeout	accessws/aw_config.h	/^    double              backend_timeout;$/;"	m	struct:settings
balance_add	matchengine/me_balance.c	/^mpd_t *balance_add(uint32_t user_id, uint32_t type, const char *asset, mpd_t *amount)$/;"	f
balance_available	matchengine/me_balance.c	/^mpd_t *balance_available(uint32_t user_id, const char *asset)$/;"	f
balance_del	matchengine/me_balance.c	/^void balance_del(uint32_t user_id, uint32_t type, const char *asset)$/;"	f
balance_dict_hash_function	matchengine/me_balance.c	/^static uint32_t balance_dict_hash_function(const void *key)$/;"	f	file:
balance_dict_key_compare	matchengine/me_balance.c	/^static int balance_dict_key_compare(const void *key1, const void *key2)$/;"	f	file:
balance_dict_key_dup	matchengine/me_balance.c	/^static void *balance_dict_key_dup(const void *key)$/;"	f	file:
balance_dict_key_free	matchengine/me_balance.c	/^static void balance_dict_key_free(void *key)$/;"	f	file:
balance_dict_val_dup	matchengine/me_balance.c	/^static void *balance_dict_val_dup(const void *val)$/;"	f	file:
balance_dict_val_free	matchengine/me_balance.c	/^static void balance_dict_val_free(void *val)$/;"	f	file:
balance_freeze	matchengine/me_balance.c	/^mpd_t *balance_freeze(uint32_t user_id, uint32_t type, const char *asset, mpd_t *amount)$/;"	f
balance_frozen	matchengine/me_balance.c	/^mpd_t *balance_frozen(uint32_t user_id, const char *asset)$/;"	f
balance_get	matchengine/me_balance.c	/^mpd_t *balance_get(uint32_t user_id, uint32_t type, const char *asset)$/;"	f
balance_key	matchengine/me_balance.h	/^struct balance_key {$/;"	s
balance_lock	matchengine/me_balance.c	/^mpd_t *balance_lock(uint32_t user_id, const char *asset)$/;"	f
balance_set	matchengine/me_balance.c	/^mpd_t *balance_set(uint32_t user_id, uint32_t type, const char *asset, mpd_t *amount)$/;"	f
balance_sub	matchengine/me_balance.c	/^mpd_t *balance_sub(uint32_t user_id, uint32_t type, const char *asset, mpd_t *amount)$/;"	f
balance_total	matchengine/me_balance.c	/^mpd_t *balance_total(uint32_t user_id, const char *asset)$/;"	f
balance_unfreeze	matchengine/me_balance.c	/^mpd_t *balance_unfreeze(uint32_t user_id, uint32_t type, const char *asset, mpd_t *amount)$/;"	f
balances	accessws/aw_config.h	/^    kafka_consumer_cfg  balances;$/;"	m	struct:settings
base64_decode	utils/ut_base64.c	/^int base64_decode(char *b64message, unsigned char **buffer, size_t *length)$/;"	f
base64_encode	utils/ut_base64.c	/^int base64_encode(const unsigned char *buffer, size_t length, sds *b64text)$/;"	f
base_name	utils/ut_log.h	/^    char                *base_name;$/;"	m	struct:__anon7
be16toh	utils/ut_misc.h	/^#  define be16toh(/;"	d
be16toh	utils/ut_misc.h	/^# undef be16toh$/;"	d
be32toh	utils/ut_misc.h	/^#  define be32toh(/;"	d
be32toh	utils/ut_misc.h	/^# undef be32toh$/;"	d
be64toh	utils/ut_misc.h	/^#  define be64toh(/;"	d
be64toh	utils/ut_misc.h	/^# undef be64toh$/;"	d
bids	matchengine/me_market.h	/^    skiplist_t      *bids;$/;"	m	struct:market_t
bin2hex	utils/ut_misc.c	/^sds bin2hex(const void *mem, size_t len)$/;"	f
bind_arr	network/nw_svr.h	/^    nw_svr_bind *bind_arr;$/;"	m	struct:nw_svr_cfg
bind_arr	utils/ut_http_svr.h	/^    nw_svr_bind *bind_arr;$/;"	m	struct:http_svr_cfg
bind_arr	utils/ut_rpc_svr.h	/^    nw_svr_bind *bind_arr;$/;"	m	struct:rpc_svr_cfg
bind_arr	utils/ut_ws_svr.h	/^    nw_svr_bind *bind_arr;$/;"	m	struct:ws_svr_cfg
bind_count	network/nw_svr.h	/^    uint32_t bind_count;$/;"	m	struct:nw_svr_cfg
bind_count	utils/ut_http_svr.h	/^    uint32_t bind_count;$/;"	m	struct:http_svr_cfg
bind_count	utils/ut_rpc_svr.h	/^    uint32_t bind_count;$/;"	m	struct:rpc_svr_cfg
bind_count	utils/ut_ws_svr.h	/^    uint32_t bind_count;$/;"	m	struct:ws_svr_cfg
body	utils/ut_http.h	/^    sds         body;$/;"	m	struct:http_request_t
body	utils/ut_rpc.h	/^    void   * body;$/;"	m	struct:rpc_pkg
body_size	utils/ut_rpc.h	/^    uint32_t body_size;$/;"	m	struct:rpc_pkg
boto3	alertcenter/send_alert.py	/^import boto3$/;"	i
break_timer	network/nw_evt.c	/^static ev_timer break_timer;$/;"	v	file:
broadcast_message	utils/ut_ws_svr.c	/^static int broadcast_message(ws_svr *svr, uint8_t opcode, void *data, size_t size)$/;"	f	file:
broadcast_update	accessws/aw_depth.c	/^static int broadcast_update(const char *market, dict_t *sessions, bool clean, json_t *result)$/;"	f	file:
broadcast_update	accessws/aw_kline.c	/^static int broadcast_update(dict_t *sessions, json_t *result)$/;"	f	file:
brokers	matchengine/me_config.h	/^    char                *brokers;$/;"	m	struct:settings
brokers	utils/ut_kafka.h	/^    char    *brokers;$/;"	m	struct:kafka_consumer_cfg
buf	depends/hiredis/read.h	/^    char *buf; \/* Read buffer *\/$/;"	m	struct:redisReader
buf	depends/hiredis/sds.h	/^    char buf[];$/;"	m	struct:sdshdr
buf	utils/ut_log.h	/^    char                *buf;$/;"	m	struct:__anon7
buf	utils/ut_sds.h	/^    char buf[];$/;"	m	struct:sdshdr
buf_len	utils/ut_log.h	/^    size_t              buf_len;$/;"	m	struct:__anon7
buf_limit	network/nw_clt.h	/^    uint32_t buf_limit;$/;"	m	struct:nw_clt_cfg
buf_limit	network/nw_svr.h	/^    uint32_t buf_limit;$/;"	m	struct:nw_svr
buf_limit	network/nw_svr.h	/^    uint32_t buf_limit;$/;"	m	struct:nw_svr_cfg
buf_limit	utils/ut_http_svr.h	/^    uint32_t buf_limit;$/;"	m	struct:http_svr_cfg
buf_limit	utils/ut_rpc_clt.h	/^    uint32_t buf_limit;$/;"	m	struct:rpc_clt_cfg
buf_limit	utils/ut_rpc_svr.h	/^    uint32_t buf_limit;$/;"	m	struct:rpc_svr_cfg
buf_limit	utils/ut_ws_svr.h	/^    uint32_t buf_limit;$/;"	m	struct:ws_svr_cfg
buf_pool	network/nw_clt.h	/^    nw_buf_pool *buf_pool;$/;"	m	struct:nw_clt
buf_pool	network/nw_clt.h	/^    nw_buf_pool *buf_pool;$/;"	m	struct:nw_clt_cfg
buf_pool	network/nw_svr.h	/^    nw_buf_pool *buf_pool;$/;"	m	struct:nw_svr
bulklen	depends/hiredis/hiredis.c	/^static size_t bulklen(size_t len) {$/;"	f	file:
business	matchengine/me_update.h	/^    char        business[BUSINESS_NAME_MAX_LEN + 1];$/;"	m	struct:update_key
business_id	matchengine/me_update.h	/^    uint64_t    business_id;$/;"	m	struct:update_key
c	depends/hiredis/async.h	/^    redisContext c;$/;"	m	struct:redisAsyncContext
c99_snprintf	depends/hiredis/win32.h	/^__inline int c99_snprintf(char* str, size_t size, const char* format, ...)$/;"	f
c99_vsnprintf	depends/hiredis/win32.h	/^__inline int c99_vsnprintf(char* str, size_t size, const char* format, va_list ap)$/;"	f
cache	network/nw_job.h	/^    nw_cache *cache;$/;"	m	struct:nw_job
cache	network/nw_state.h	/^    nw_cache *cache;$/;"	m	struct:nw_state
cache_dict_hash_function	accessrest/ar_server.c	/^static uint32_t cache_dict_hash_function(const void *key)$/;"	f	file:
cache_dict_hash_function	accessws/aw_server.c	/^static uint32_t cache_dict_hash_function(const void *key)$/;"	f	file:
cache_dict_hash_function	marketprice/mp_server.c	/^static uint32_t cache_dict_hash_function(const void *key)$/;"	f	file:
cache_dict_hash_function	matchengine/me_server.c	/^static uint32_t cache_dict_hash_function(const void *key)$/;"	f	file:
cache_dict_key_compare	accessrest/ar_server.c	/^static int cache_dict_key_compare(const void *key1, const void *key2)$/;"	f	file:
cache_dict_key_compare	accessws/aw_server.c	/^static int cache_dict_key_compare(const void *key1, const void *key2)$/;"	f	file:
cache_dict_key_compare	marketprice/mp_server.c	/^static int cache_dict_key_compare(const void *key1, const void *key2)$/;"	f	file:
cache_dict_key_compare	matchengine/me_server.c	/^static int cache_dict_key_compare(const void *key1, const void *key2)$/;"	f	file:
cache_dict_key_dup	accessrest/ar_server.c	/^static void *cache_dict_key_dup(const void *key)$/;"	f	file:
cache_dict_key_dup	accessws/aw_server.c	/^static void *cache_dict_key_dup(const void *key)$/;"	f	file:
cache_dict_key_dup	marketprice/mp_server.c	/^static void *cache_dict_key_dup(const void *key)$/;"	f	file:
cache_dict_key_dup	matchengine/me_server.c	/^static void *cache_dict_key_dup(const void *key)$/;"	f	file:
cache_dict_key_free	accessrest/ar_server.c	/^static void cache_dict_key_free(void *key)$/;"	f	file:
cache_dict_key_free	accessws/aw_server.c	/^static void cache_dict_key_free(void *key)$/;"	f	file:
cache_dict_key_free	marketprice/mp_server.c	/^static void cache_dict_key_free(void *key)$/;"	f	file:
cache_dict_key_free	matchengine/me_server.c	/^static void cache_dict_key_free(void *key)$/;"	f	file:
cache_dict_val_dup	accessrest/ar_server.c	/^static void *cache_dict_val_dup(const void *val)$/;"	f	file:
cache_dict_val_dup	accessws/aw_server.c	/^static void *cache_dict_val_dup(const void *val)$/;"	f	file:
cache_dict_val_dup	marketprice/mp_server.c	/^static void *cache_dict_val_dup(const void *val)$/;"	f	file:
cache_dict_val_dup	matchengine/me_server.c	/^static void *cache_dict_val_dup(const void *val)$/;"	f	file:
cache_dict_val_free	accessrest/ar_server.c	/^static void cache_dict_val_free(void *val)$/;"	f	file:
cache_dict_val_free	accessws/aw_server.c	/^static void cache_dict_val_free(void *val)$/;"	f	file:
cache_dict_val_free	marketprice/mp_server.c	/^static void cache_dict_val_free(void *val)$/;"	f	file:
cache_dict_val_free	matchengine/me_server.c	/^static void cache_dict_val_free(void *val)$/;"	f	file:
cache_key	accessrest/ar_server.c	/^    sds         cache_key;$/;"	m	struct:state_data	file:
cache_key	accessws/aw_server.c	/^    sds         cache_key;$/;"	m	struct:state_data	file:
cache_timeout	accessrest/ar_config.h	/^    double              cache_timeout;$/;"	m	struct:settings
cache_timeout	accessws/aw_config.h	/^    double              cache_timeout;$/;"	m	struct:settings
cache_timeout	marketprice/mp_config.h	/^    double              cache_timeout;$/;"	m	struct:settings
cache_timeout	matchengine/me_config.h	/^    double              cache_timeout;$/;"	m	struct:settings
cache_timer	marketprice/mp_server.c	/^static nw_timer cache_timer;$/;"	v	file:
cache_timer	matchengine/me_server.c	/^static nw_timer cache_timer;$/;"	v	file:
cache_val	accessrest/ar_server.c	/^struct cache_val {$/;"	s	file:
cache_val	accessws/aw_server.c	/^struct cache_val {$/;"	s	file:
cache_val	marketprice/mp_server.c	/^struct cache_val {$/;"	s	file:
cache_val	matchengine/me_server.c	/^struct cache_val {$/;"	s	file:
calc_decode_length	utils/ut_base64.c	/^size_t calc_decode_length(const char* b64input)$/;"	f
call	test/accesshttp/call.py	/^def call(method, *params):$/;"	f
call	test/monitoragent/test.py	/^def call(method, *params):$/;"	f
callback	accessws/aw_http.c	/^    result_callback callback;$/;"	m	struct:http_request	file:
callback	network/nw_timer.h	/^    nw_timer_callback callback;$/;"	m	struct:nw_timer
callback	utils/ut_kafka.h	/^    kafka_message_callback callback;$/;"	m	struct:kafka_consumer_t
callbackDict	depends/hiredis/async.c	/^static dictType callbackDict = {$/;"	v	file:
callbackHash	depends/hiredis/async.c	/^static unsigned int callbackHash(const void *key) {$/;"	f	file:
callbackKeyCompare	depends/hiredis/async.c	/^static int callbackKeyCompare(void *privdata, const void *key1, const void *key2) {$/;"	f	file:
callbackKeyDestructor	depends/hiredis/async.c	/^static void callbackKeyDestructor(void *privdata, void *key) {$/;"	f	file:
callbackValDestructor	depends/hiredis/async.c	/^static void callbackValDestructor(void *privdata, void *val) {$/;"	f	file:
callbackValDup	depends/hiredis/async.c	/^static void *callbackValDup(void *privdata, const void *src) {$/;"	f	file:
center	monitoragent/ma_config.h	/^    rpc_clt_cfg         center;$/;"	m	struct:settings
channels	depends/hiredis/async.h	/^        struct dict *channels;$/;"	m	struct:redisAsyncContext::__anon18	typeref:struct:redisAsyncContext::__anon18::dict
charset	utils/ut_config.h	/^    char    *charset;$/;"	m	struct:mysql_cfg
check_aggregate	monitorcenter/mc_server.c	/^static int check_aggregate(time_t now)$/;"	f	file:
check_cache	accessrest/ar_server.c	/^static int check_cache(nw_ses *ses, sds cache_key)$/;"	f	file:
check_cache	accessws/aw_server.c	/^static int check_cache(nw_ses *ses, uint64_t id, sds key)$/;"	f	file:
check_cache	matchengine/me_server.c	/^static bool check_cache(nw_ses *ses, rpc_pkg *pkg, sds *cache_key)$/;"	f	file:
check_clear	utils/ut_dict.c	/^static void check_clear(dict_t *dt, uint32_t index)$/;"	f	file:
check_fee_asset	matchengine/me_market.c	/^static bool check_fee_asset(mpd_t *trade_amount, mpd_t *balance, mpd_t *taker_fee, const char *fee_asset, mpd_t *fee_discount)$/;"	f	file:
check_mem	utils/ut_queue.c	/^static int check_mem(queue_t *queue, size_t size)$/;"	f	file:
check_stop_asks	matchengine/me_market.c	/^static int check_stop_asks(bool real, market_t *m)$/;"	f	file:
check_stop_bids	matchengine/me_market.c	/^static int check_stop_bids(bool real, market_t *m)$/;"	f	file:
chrtos	depends/hiredis/read.c	/^static size_t chrtos(char *buf, size_t size, char byte) {$/;"	f	file:
cleanup	depends/hiredis/adapters/qt.h	/^        void cleanup() {$/;"	f	class:RedisQtAdapter
cleanup	depends/hiredis/async.h	/^        void (*cleanup)(void *privdata);$/;"	m	struct:redisAsyncContext::__anon17
clear_cache	accessrest/ar_server.c	/^static void clear_cache(sds cache_key)$/;"	f	file:
clear_dict	marketprice/mp_message.c	/^static void clear_dict(dict_t *dict, time_t start)$/;"	f	file:
clear_key	marketprice/mp_message.c	/^static int clear_key(redisContext *context, const char *key, time_t end)$/;"	f	file:
clear_key	monitorcenter/mc_server.c	/^static int clear_key(time_t timestamp, const char *scope, const char *key, const char *host)$/;"	f	file:
clear_kline	marketprice/mp_message.c	/^static void clear_kline(void)$/;"	f	file:
clear_redis	marketprice/mp_message.c	/^static int clear_redis(void)$/;"	f	file:
clear_slice	matchengine/me_persist.c	/^int clear_slice(time_t timestamp)$/;"	f
clear_timer	marketprice/mp_message.c	/^static nw_timer clear_timer;$/;"	v	file:
cli	marketprice/mp_config.h	/^    cli_svr_cfg         cli;$/;"	m	struct:settings
cli	matchengine/me_config.h	/^    cli_svr_cfg         cli;$/;"	m	struct:settings
cli_svr	utils/ut_cli.h	/^typedef struct cli_svr {$/;"	s
cli_svr	utils/ut_cli.h	/^} cli_svr;$/;"	t	typeref:struct:cli_svr
cli_svr_add_cmd	utils/ut_cli.c	/^void cli_svr_add_cmd(cli_svr *svr, const char *cmd, on_cli_cmd callback)$/;"	f
cli_svr_cfg	utils/ut_cli.h	/^typedef struct cli_svr_cfg {$/;"	s
cli_svr_cfg	utils/ut_cli.h	/^} cli_svr_cfg;$/;"	t	typeref:struct:cli_svr_cfg
cli_svr_create	utils/ut_cli.c	/^cli_svr *cli_svr_create(cli_svr_cfg *cfg)$/;"	f
cli_svr_release	utils/ut_cli.c	/^void cli_svr_release(cli_svr *svr)$/;"	f
close	marketprice/mp_kline.h	/^    mpd_t *close;$/;"	m	struct:kline_info
clt	accesshttp/ah_server.c	/^    rpc_clt *clt;$/;"	m	struct:request_info	file:
clt	monitoragent/ma_server.c	/^static rpc_clt *clt;$/;"	v	file:
clt_cache	network/nw_svr.h	/^    nw_cache *clt_cache;$/;"	m	struct:nw_svr
clt_close	network/nw_clt.c	/^static int clt_close(nw_clt *clt)$/;"	f	file:
clt_count	network/nw_svr.h	/^    uint32_t clt_count;$/;"	m	struct:nw_svr
clt_info	accessws/aw_server.h	/^struct clt_info {$/;"	s
clt_info	utils/ut_http_svr.c	/^struct clt_info {$/;"	s	file:
clt_info	utils/ut_rpc_svr.c	/^struct clt_info {$/;"	s	file:
clt_info	utils/ut_ws_svr.c	/^struct clt_info {$/;"	s	file:
clt_list_head	network/nw_svr.h	/^    nw_ses *clt_list_head;$/;"	m	struct:nw_svr
clt_list_tail	network/nw_svr.h	/^    nw_ses *clt_list_tail;$/;"	m	struct:nw_svr
cmd	accesshttp/ah_server.c	/^    uint32_t cmd;$/;"	m	struct:request_info	file:
cmd	accessrest/ar_server.c	/^    uint32_t    cmd;$/;"	m	struct:state_data	file:
cmd	accessrest/ar_ticker.c	/^    uint32_t cmd;$/;"	m	struct:state_data	file:
code	readhistory/rh_server.c	/^    int     code;$/;"	m	struct:job_reply	file:
command	readhistory/rh_server.c	/^    uint32_t command;$/;"	m	struct:job_request	file:
command	utils/ut_rpc.h	/^    uint32_t command;$/;"	m	struct:rpc_pkg
command_cb	depends/hiredis/examples/example-glib.c	/^command_cb(redisAsyncContext *ac,$/;"	f	file:
compare	utils/ut_list.h	/^    int (*compare)(const void *value1, const void *value2);$/;"	m	struct:list_type
compare	utils/ut_skiplist.h	/^    int (*compare)(const void *value1, const void *value2);$/;"	m	struct:skiplist_type
conf	utils/ut_kafka.h	/^    rd_kafka_conf_t *conf;$/;"	m	struct:kafka_consumer_t
config	depends/hiredis/test.c	/^struct config {$/;"	s	file:
connect	depends/hiredis/test.c	/^static redisContext *connect(struct config config) {$/;"	f	file:
connectCallback	depends/hiredis/examples/example-ae.c	/^void connectCallback(const redisAsyncContext *c, int status) {$/;"	f
connectCallback	depends/hiredis/examples/example-ivykis.c	/^void connectCallback(const redisAsyncContext *c, int status) {$/;"	f
connectCallback	depends/hiredis/examples/example-libev.c	/^void connectCallback(const redisAsyncContext *c, int status) {$/;"	f
connectCallback	depends/hiredis/examples/example-libevent.c	/^void connectCallback(const redisAsyncContext *c, int status) {$/;"	f
connectCallback	depends/hiredis/examples/example-libuv.c	/^void connectCallback(const redisAsyncContext *c, int status) {$/;"	f
connectCallback	depends/hiredis/examples/example-macosx.c	/^void connectCallback(const redisAsyncContext *c, int status) {$/;"	f
connect_cb	depends/hiredis/examples/example-glib.c	/^connect_cb (const redisAsyncContext *ac G_GNUC_UNUSED,$/;"	f	file:
connected	network/nw_clt.h	/^    bool connected;$/;"	m	struct:nw_clt
connection_type	depends/hiredis/hiredis.h	/^    enum redisConnectionType connection_type;$/;"	m	struct:redisContext	typeref:enum:redisContext::redisConnectionType
connection_type	depends/hiredis/test.c	/^enum connection_type {$/;"	g	file:
content	utils/ut_http.h	/^    void        *content;$/;"	m	struct:http_response_t
content_length	utils/http_parser.h	/^  uint64_t content_length; \/* # bytes in body (0 if no Content-Length header) *\/$/;"	m	struct:http_parser
content_size	utils/ut_http.h	/^    size_t      content_size;$/;"	m	struct:http_response_t
context	depends/hiredis/adapters/ae.h	/^    redisAsyncContext *context;$/;"	m	struct:redisAeEvents
context	depends/hiredis/adapters/ivykis.h	/^    redisAsyncContext *context;$/;"	m	struct:redisIvykisEvents
context	depends/hiredis/adapters/libev.h	/^    redisAsyncContext *context;$/;"	m	struct:redisLibevEvents
context	depends/hiredis/adapters/libevent.h	/^    redisAsyncContext *context;$/;"	m	struct:redisLibeventEvents
context	depends/hiredis/adapters/libuv.h	/^  redisAsyncContext* context;$/;"	m	struct:redisLibuvEvents
context	depends/hiredis/adapters/macosx.h	/^    redisAsyncContext *context;$/;"	m	struct:__anon16
context	network/nw_state.h	/^    nw_state *context;$/;"	m	struct:nw_state_iterator
context	network/nw_state.h	/^    void *context;$/;"	m	struct:nw_state_entry
convert_kline_type_to_interval	accessrest/ar_server.c	/^static int convert_kline_type_to_interval(char *type)$/;"	f	file:
core_limit	utils/ut_config.h	/^    uint32_t core_limit;$/;"	m	struct:process_cfg
count	accessrest/ar_config.h	/^    int     count;$/;"	m	struct:depth_limit_cfg
count	accessrest/ar_config.h	/^    int     count;$/;"	m	struct:depth_merge_cfg
count	accessws/aw_config.h	/^    int     count;$/;"	m	struct:depth_limit_cfg
count	accessws/aw_config.h	/^    int     count;$/;"	m	struct:depth_merge_cfg
count	network/nw_buf.h	/^    uint32_t count;$/;"	m	struct:nw_buf_list
count	utils/ut_config.h	/^    size_t count;$/;"	m	struct:inetv4_list
countDigits	depends/hiredis/hiredis.c	/^static uint32_t countDigits(uint64_t v) {$/;"	f	file:
crc32	utils/ut_rpc.h	/^    uint32_t crc32;$/;"	m	struct:rpc_pkg
crc_c	utils/ut_crc32.c	/^static const unsigned int crc_c[256] = {$/;"	v	file:
createArray	depends/hiredis/read.h	/^    void *(*createArray)(const redisReadTask*, int);$/;"	m	struct:redisReplyObjectFunctions
createArrayObject	depends/hiredis/hiredis.c	/^static void *createArrayObject(const redisReadTask *task, int elements) {$/;"	f	file:
createInteger	depends/hiredis/read.h	/^    void *(*createInteger)(const redisReadTask*, long long);$/;"	m	struct:redisReplyObjectFunctions
createIntegerObject	depends/hiredis/hiredis.c	/^static void *createIntegerObject(const redisReadTask *task, long long value) {$/;"	f	file:
createNil	depends/hiredis/read.h	/^    void *(*createNil)(const redisReadTask*);$/;"	m	struct:redisReplyObjectFunctions
createNilObject	depends/hiredis/hiredis.c	/^static void *createNilObject(const redisReadTask *task) {$/;"	f	file:
createReplyObject	depends/hiredis/hiredis.c	/^static redisReply *createReplyObject(int type) {$/;"	f	file:
createString	depends/hiredis/read.h	/^    void *(*createString)(const redisReadTask*, char*, size_t);$/;"	m	struct:redisReplyObjectFunctions
createStringObject	depends/hiredis/hiredis.c	/^static void *createStringObject(const redisReadTask *task, char *str, size_t len) {$/;"	f	file:
create_header_dict	utils/ut_http.c	/^static dict_t *create_header_dict(void)$/;"	f	file:
create_market	marketprice/mp_message.c	/^static struct market_info *create_market(const char *market)$/;"	f	file:
create_params_dict	utils/ut_http.c	/^static dict_t *create_params_dict(void)$/;"	f	file:
create_socket	network/nw_clt.c	/^static int create_socket(int family, int sock_type)$/;"	f	file:
create_socket	network/nw_svr.c	/^static int create_socket(int family, int sock_type)$/;"	f	file:
create_time	matchengine/me_market.h	/^    double          create_time;$/;"	m	struct:order_t
create_time	matchengine/me_market.h	/^    double          create_time;$/;"	m	struct:stop_t
create_time	matchengine/me_operlog.c	/^    double create_time;$/;"	m	struct:operlog	file:
create_time	matchengine/me_update.h	/^    double      create_time;$/;"	m	struct:update_val
cron_timer	accesshttp/ah_main.c	/^nw_timer cron_timer;$/;"	v
cron_timer	accessrest/ar_main.c	/^nw_timer cron_timer;$/;"	v
cron_timer	accessws/aw_main.c	/^nw_timer cron_timer;$/;"	v
cron_timer	alertcenter/ac_main.c	/^nw_timer cron_timer;$/;"	v
cron_timer	logwriter/lw_main.c	/^nw_timer cron_timer;$/;"	v
cron_timer	marketprice/mp_main.c	/^nw_timer cron_timer;$/;"	v
cron_timer	matchengine/me_main.c	/^nw_timer cron_timer;$/;"	v
cron_timer	monitoragent/ma_main.c	/^nw_timer cron_timer;$/;"	v
cron_timer	monitorcenter/mc_main.c	/^nw_timer cron_timer;$/;"	v
cron_timer	readhistory/rh_main.c	/^nw_timer cron_timer;$/;"	v
curr_index	utils/ut_rpc_clt.h	/^    uint32_t curr_index;$/;"	m	struct:rpc_clt
current_timestamp	utils/ut_misc.c	/^double current_timestamp(void)$/;"	f
custom_buf_pool	network/nw_clt.h	/^    bool custom_buf_pool;$/;"	m	struct:nw_clt
data	accessrest/ar_server.c	/^    sds         data;$/;"	m	struct:cache_val	file:
data	depends/hiredis/async.h	/^        void *data;$/;"	m	struct:redisAsyncContext::__anon17
data	depends/hiredis/async.h	/^    void *data;$/;"	m	struct:redisAsyncContext
data	network/nw_buf.h	/^    char data[];$/;"	m	struct:nw_buf
data	network/nw_state.h	/^    void *data;$/;"	m	struct:nw_state_entry
data	test/accesshttp/auth.py	/^data = {"country_code": "86", "mobile": "13554818887", "login_password": "123456"}$/;"	v
data	utils/http_parser.h	/^  void *data; \/* A pointer to get hook to the "connection" or "socket" object *\/$/;"	m	struct:http_parser
data_size	network/nw_state.h	/^    uint32_t data_size;$/;"	m	struct:nw_state
day	marketprice/mp_message.c	/^    dict_t *day;$/;"	m	struct:market_info	file:
db	utils/ut_redis.h	/^    int db;$/;"	m	struct:redis_sentinel_cfg
db	utils/ut_redis.h	/^    int db;$/;"	m	struct:redis_sentinel_t
db_history	matchengine/me_config.h	/^    mysql_cfg           db_history;$/;"	m	struct:settings
db_history	readhistory/rh_config.h	/^    mysql_cfg           db_history;$/;"	m	struct:settings
db_log	matchengine/me_config.h	/^    mysql_cfg           db_log;$/;"	m	struct:settings
deal	marketprice/mp_kline.h	/^    mpd_t *deal;$/;"	m	struct:kline_info
deal_fee	matchengine/me_market.h	/^    mpd_t           *deal_fee;$/;"	m	struct:order_t
deal_money	matchengine/me_market.h	/^    mpd_t           *deal_money;$/;"	m	struct:order_t
deal_stock	matchengine/me_market.h	/^    mpd_t           *deal_stock;$/;"	m	struct:order_t
deals	accessws/aw_config.h	/^    kafka_consumer_cfg  deals;$/;"	m	struct:settings
deals	accessws/aw_deals.c	/^    list_t *deals;$/;"	m	struct:market_val	file:
deals	marketprice/mp_config.h	/^    kafka_consumer_cfg  deals;$/;"	m	struct:settings
deals	marketprice/mp_message.c	/^    list_t *deals;$/;"	m	struct:market_info	file:
deals	marketprice/mp_message.c	/^static kafka_consumer_t *deals;$/;"	v	file:
deals_id_start	matchengine/me_market.c	/^uint64_t deals_id_start;$/;"	v
deals_interval	accessws/aw_config.h	/^    double              deals_interval;$/;"	m	struct:settings
deals_json	marketprice/mp_message.c	/^    list_t *deals_json;$/;"	m	struct:market_info	file:
deals_new	accessws/aw_deals.c	/^int deals_new(uint32_t user_id, uint64_t id, double timestamp, int type, const char *market, const char *amount, const char *price)$/;"	f
deals_send_full	accessws/aw_deals.c	/^int deals_send_full(nw_ses *ses, const char *market)$/;"	f
deals_subscribe	accessws/aw_deals.c	/^int deals_subscribe(nw_ses *ses, const char *market, uint32_t user_id)$/;"	f
deals_subscribe_number	accessws/aw_deals.c	/^size_t deals_subscribe_number(void)$/;"	f
deals_unsubscribe	accessws/aw_deals.c	/^int deals_unsubscribe(nw_ses *ses, uint32_t user_id)$/;"	f
debug	marketprice/mp_config.h	/^    bool                debug;$/;"	m	struct:settings
debug	matchengine/me_config.h	/^    bool                debug;$/;"	m	struct:settings
debug	monitoragent/ma_config.h	/^    bool                debug;$/;"	m	struct:settings
debug	monitorcenter/mc_config.h	/^    bool                debug;$/;"	m	struct:settings
debug	readhistory/rh_config.h	/^    bool                debug;$/;"	m	struct:settings
decimal	utils/ut_decimal.c	/^mpd_t *decimal(const char *str, int prec)$/;"	f
decode_pkg	alertcenter/ac_server.c	/^static int decode_pkg(nw_ses *ses, void *data, size_t max)$/;"	f	file:
decode_pkg	logwriter/lw_server.c	/^static int decode_pkg(nw_ses *ses, void *data, size_t max)$/;"	f	file:
decode_pkg	network/nw_clt.h	/^    int (*decode_pkg)(nw_ses *ses, void *data, size_t max);$/;"	m	struct:nw_clt_type
decode_pkg	network/nw_ses.h	/^    int  (*decode_pkg)(struct nw_ses *ses, void *data, size_t max);$/;"	m	struct:nw_ses
decode_pkg	network/nw_svr.h	/^    int (*decode_pkg)(nw_ses *ses, void *data, size_t max);$/;"	m	struct:nw_svr_type
decode_pkg	utils/ut_cli.c	/^static int decode_pkg(nw_ses *ses, void *data, size_t max)$/;"	f	file:
decode_pkg	utils/ut_http_svr.c	/^static int decode_pkg(nw_ses *ses, void *data, size_t max)$/;"	f	file:
decode_pkg	utils/ut_ws_svr.c	/^static int decode_pkg(nw_ses *ses, void *data, size_t max)$/;"	f	file:
defaultFunctions	depends/hiredis/hiredis.c	/^static redisReplyObjectFunctions defaultFunctions = {$/;"	v	file:
default_dlog	utils/ut_log.c	/^dlog_t   *default_dlog;$/;"	v
default_dlog_flag	utils/ut_log.c	/^int       default_dlog_flag = 0xff;$/;"	v
delRead	depends/hiredis/adapters/qt.h	/^        void delRead() {$/;"	f	class:RedisQtAdapter
delRead	depends/hiredis/async.h	/^        void (*delRead)(void *privdata);$/;"	m	struct:redisAsyncContext::__anon17
delWrite	depends/hiredis/adapters/qt.h	/^        void delWrite() {$/;"	f	class:RedisQtAdapter
delWrite	depends/hiredis/async.h	/^        void (*delWrite)(void *privdata);$/;"	m	struct:redisAsyncContext::__anon17
delete_slice	matchengine/me_persist.c	/^static int delete_slice(MYSQL *conn, uint64_t id, time_t timestamp)$/;"	f	file:
depth_interval	accessws/aw_config.h	/^    double              depth_interval;$/;"	m	struct:settings
depth_key	accessws/aw_depth.c	/^struct depth_key {$/;"	s	file:
depth_limit	accessrest/ar_config.h	/^    depth_limit_cfg     depth_limit;$/;"	m	struct:settings
depth_limit	accessws/aw_config.h	/^    depth_limit_cfg     depth_limit;$/;"	m	struct:settings
depth_limit_cfg	accessrest/ar_config.h	/^typedef struct depth_limit_cfg {$/;"	s
depth_limit_cfg	accessrest/ar_config.h	/^} depth_limit_cfg;$/;"	t	typeref:struct:depth_limit_cfg
depth_limit_cfg	accessws/aw_config.h	/^typedef struct depth_limit_cfg {$/;"	s
depth_limit_cfg	accessws/aw_config.h	/^} depth_limit_cfg;$/;"	t	typeref:struct:depth_limit_cfg
depth_merge	accessrest/ar_config.h	/^    depth_merge_cfg     depth_merge;$/;"	m	struct:settings
depth_merge	accessws/aw_config.h	/^    depth_merge_cfg     depth_merge;$/;"	m	struct:settings
depth_merge_cfg	accessrest/ar_config.h	/^typedef struct depth_merge_cfg {$/;"	s
depth_merge_cfg	accessrest/ar_config.h	/^} depth_merge_cfg;$/;"	t	typeref:struct:depth_merge_cfg
depth_merge_cfg	accessws/aw_config.h	/^typedef struct depth_merge_cfg {$/;"	s
depth_merge_cfg	accessws/aw_config.h	/^} depth_merge_cfg;$/;"	t	typeref:struct:depth_merge_cfg
depth_send_clean	accessws/aw_depth.c	/^int depth_send_clean(nw_ses *ses, const char *market, uint32_t limit, const char *interval)$/;"	f
depth_subscribe	accessws/aw_depth.c	/^int depth_subscribe(nw_ses *ses, const char *market, uint32_t limit, const char *interval)$/;"	f
depth_subscribe_number	accessws/aw_depth.c	/^size_t depth_subscribe_number(void)$/;"	f
depth_unsubscribe	accessws/aw_depth.c	/^int depth_unsubscribe(nw_ses *ses)$/;"	f
depth_val	accessws/aw_depth.c	/^struct depth_val {$/;"	s	file:
description	utils/http_parser.c	/^  const char *description;$/;"	m	struct:__anon9	file:
detail	matchengine/me_operlog.c	/^    char *detail;$/;"	m	struct:operlog	file:
dict	depends/hiredis/dict.h	/^typedef struct dict {$/;"	s
dict	depends/hiredis/dict.h	/^} dict;$/;"	t	typeref:struct:dict
dict	utils/ut_cli.h	/^    dict_t *dict;$/;"	m	struct:cli_svr
dictAdd	depends/hiredis/dict.c	/^static int dictAdd(dict *ht, void *key, void *val) {$/;"	f	file:
dictCompareHashKeys	depends/hiredis/dict.h	/^#define dictCompareHashKeys(/;"	d
dictCreate	depends/hiredis/dict.c	/^static dict *dictCreate(dictType *type, void *privDataPtr) {$/;"	f	file:
dictDelete	depends/hiredis/dict.c	/^static int dictDelete(dict *ht, const void *key) {$/;"	f	file:
dictEntry	depends/hiredis/dict.h	/^typedef struct dictEntry {$/;"	s
dictEntry	depends/hiredis/dict.h	/^} dictEntry;$/;"	t	typeref:struct:dictEntry
dictExpand	depends/hiredis/dict.c	/^static int dictExpand(dict *ht, unsigned long size) {$/;"	f	file:
dictFind	depends/hiredis/dict.c	/^static dictEntry *dictFind(dict *ht, const void *key) {$/;"	f	file:
dictFreeEntryKey	depends/hiredis/dict.h	/^#define dictFreeEntryKey(/;"	d
dictFreeEntryVal	depends/hiredis/dict.h	/^#define dictFreeEntryVal(/;"	d
dictGenHashFunction	depends/hiredis/dict.c	/^static unsigned int dictGenHashFunction(const unsigned char *buf, int len) {$/;"	f	file:
dictGetEntryKey	depends/hiredis/dict.h	/^#define dictGetEntryKey(/;"	d
dictGetEntryVal	depends/hiredis/dict.h	/^#define dictGetEntryVal(/;"	d
dictGetIterator	depends/hiredis/dict.c	/^static dictIterator *dictGetIterator(dict *ht) {$/;"	f	file:
dictHashKey	depends/hiredis/dict.h	/^#define dictHashKey(/;"	d
dictIterator	depends/hiredis/dict.h	/^typedef struct dictIterator {$/;"	s
dictIterator	depends/hiredis/dict.h	/^} dictIterator;$/;"	t	typeref:struct:dictIterator
dictNext	depends/hiredis/dict.c	/^static dictEntry *dictNext(dictIterator *iter) {$/;"	f	file:
dictRelease	depends/hiredis/dict.c	/^static void dictRelease(dict *ht) {$/;"	f	file:
dictReleaseIterator	depends/hiredis/dict.c	/^static void dictReleaseIterator(dictIterator *iter) {$/;"	f	file:
dictReplace	depends/hiredis/dict.c	/^static int dictReplace(dict *ht, void *key, void *val) {$/;"	f	file:
dictSetHashKey	depends/hiredis/dict.h	/^#define dictSetHashKey(/;"	d
dictSetHashVal	depends/hiredis/dict.h	/^#define dictSetHashVal(/;"	d
dictSize	depends/hiredis/dict.h	/^#define dictSize(/;"	d
dictSlots	depends/hiredis/dict.h	/^#define dictSlots(/;"	d
dictType	depends/hiredis/dict.h	/^typedef struct dictType {$/;"	s
dictType	depends/hiredis/dict.h	/^} dictType;$/;"	t	typeref:struct:dictType
dict_add	utils/ut_dict.c	/^dict_entry *dict_add(dict_t *dt, void *key, void *val)$/;"	f
dict_asset	matchengine/me_balance.c	/^static dict_t *dict_asset;$/;"	v	file:
dict_balance	matchengine/me_balance.c	/^dict_t *dict_balance;$/;"	v
dict_cache	marketprice/mp_server.c	/^static dict_t *dict_cache;$/;"	v	file:
dict_cache	matchengine/me_server.c	/^static dict_t *dict_cache;$/;"	v	file:
dict_clear	utils/ut_dict.c	/^void dict_clear(dict_t *dt)$/;"	f
dict_create	utils/ut_dict.c	/^dict_t *dict_create(dict_types *type, uint32_t init_size)$/;"	f
dict_delete	utils/ut_dict.c	/^int dict_delete(dict_t *dt, const void *key)$/;"	f
dict_depth	accessws/aw_depth.c	/^static dict_t *dict_depth;$/;"	v	file:
dict_depth_hash_func	accessws/aw_depth.c	/^static uint32_t dict_depth_hash_func(const void *key)$/;"	f	file:
dict_depth_key_compare	accessws/aw_depth.c	/^static int dict_depth_key_compare(const void *key1, const void *key2)$/;"	f	file:
dict_depth_key_dup	accessws/aw_depth.c	/^static void *dict_depth_key_dup(const void *key)$/;"	f	file:
dict_depth_key_free	accessws/aw_depth.c	/^static void dict_depth_key_free(void *key)$/;"	f	file:
dict_depth_val_dup	accessws/aw_depth.c	/^static void *dict_depth_val_dup(const void *val)$/;"	f	file:
dict_depth_val_free	accessws/aw_depth.c	/^static void dict_depth_val_free(void *val)$/;"	f	file:
dict_entry	utils/ut_dict.h	/^typedef struct dict_entry {$/;"	s
dict_entry	utils/ut_dict.h	/^} dict_entry;$/;"	t	typeref:struct:dict_entry
dict_expand	utils/ut_dict.c	/^int dict_expand(dict_t *dt, uint32_t size)$/;"	f
dict_expand_if_needed	utils/ut_dict.c	/^static int dict_expand_if_needed(dict_t *dt)$/;"	f	file:
dict_find	utils/ut_dict.c	/^dict_entry *dict_find(dict_t *dt, const void *key)$/;"	f
dict_generic_hash_function	utils/ut_dict.c	/^uint32_t dict_generic_hash_function(const void *data, size_t len)$/;"	f
dict_get_iterator	utils/ut_dict.c	/^dict_iterator *dict_get_iterator(dict_t *dt)$/;"	f
dict_hash	utils/ut_cli.c	/^static uint32_t dict_hash(const void *key)$/;"	f	file:
dict_hash_func	accesshttp/ah_server.c	/^static uint32_t dict_hash_func(const void *key)$/;"	f	file:
dict_header_dup	utils/ut_http.c	/^static void *dict_header_dup(const void *obj)$/;"	f	file:
dict_header_free	utils/ut_http.c	/^static void dict_header_free(void *obj)$/;"	f	file:
dict_header_hash_func	utils/ut_http.c	/^static uint32_t dict_header_hash_func(const void *key)$/;"	f	file:
dict_header_key_compare	utils/ut_http.c	/^static int dict_header_key_compare(const void *key1, const void *key2)$/;"	f	file:
dict_iterator	utils/ut_dict.h	/^typedef struct dict_iterator {$/;"	s
dict_iterator	utils/ut_dict.h	/^} dict_iterator;$/;"	t	typeref:struct:dict_iterator
dict_key_compare	accesshttp/ah_server.c	/^static int dict_key_compare(const void *key1, const void *key2)$/;"	f	file:
dict_key_dup	accesshttp/ah_server.c	/^static void *dict_key_dup(const void *key)$/;"	f	file:
dict_key_free	accesshttp/ah_server.c	/^static void dict_key_free(void *key)$/;"	f	file:
dict_kline	accessws/aw_kline.c	/^static dict_t *dict_kline;$/;"	v	file:
dict_kline_hash_func	accessws/aw_kline.c	/^static uint32_t dict_kline_hash_func(const void *key)$/;"	f	file:
dict_kline_key_compare	accessws/aw_kline.c	/^static int dict_kline_key_compare(const void *key1, const void *key2)$/;"	f	file:
dict_kline_key_dup	accessws/aw_kline.c	/^static void *dict_kline_key_dup(const void *key)$/;"	f	file:
dict_kline_key_free	accessws/aw_kline.c	/^static void dict_kline_key_free(void *key)$/;"	f	file:
dict_kline_val_dup	accessws/aw_kline.c	/^static void *dict_kline_val_dup(const void *val)$/;"	f	file:
dict_kline_val_free	accessws/aw_kline.c	/^static void dict_kline_val_free(void *val)$/;"	f	file:
dict_kline_val_free	marketprice/mp_message.c	/^static void dict_kline_val_free(void *val)$/;"	f	file:
dict_mark_clear	utils/ut_dict.c	/^void dict_mark_clear(dict_t *dt)$/;"	f
dict_market	accessrest/ar_ticker.c	/^static dict_t *dict_market;$/;"	v	file:
dict_market	accessws/aw_deals.c	/^static dict_t *dict_market;$/;"	v	file:
dict_market	accessws/aw_state.c	/^static dict_t *dict_market;$/;"	v	file:
dict_market	marketprice/mp_message.c	/^static dict_t *dict_market;$/;"	v	file:
dict_market	matchengine/me_trade.c	/^static dict_t *dict_market;$/;"	v	file:
dict_market_hash_func	accessrest/ar_ticker.c	/^static uint32_t dict_market_hash_func(const void *key)$/;"	f	file:
dict_market_hash_func	accessws/aw_deals.c	/^static uint32_t dict_market_hash_func(const void *key)$/;"	f	file:
dict_market_hash_func	accessws/aw_state.c	/^static uint32_t dict_market_hash_func(const void *key)$/;"	f	file:
dict_market_key_compare	accessrest/ar_ticker.c	/^static int dict_market_key_compare(const void *key1, const void *key2)$/;"	f	file:
dict_market_key_compare	accessws/aw_deals.c	/^static int dict_market_key_compare(const void *key1, const void *key2)$/;"	f	file:
dict_market_key_compare	accessws/aw_state.c	/^static int dict_market_key_compare(const void *key1, const void *key2)$/;"	f	file:
dict_market_key_dup	accessrest/ar_ticker.c	/^static void *dict_market_key_dup(const void *key)$/;"	f	file:
dict_market_key_dup	accessws/aw_deals.c	/^static void *dict_market_key_dup(const void *key)$/;"	f	file:
dict_market_key_dup	accessws/aw_state.c	/^static void *dict_market_key_dup(const void *key)$/;"	f	file:
dict_market_key_free	accessrest/ar_ticker.c	/^static void dict_market_key_free(void *key)$/;"	f	file:
dict_market_key_free	accessws/aw_deals.c	/^static void dict_market_key_free(void *key)$/;"	f	file:
dict_market_key_free	accessws/aw_state.c	/^static void dict_market_key_free(void *key)$/;"	f	file:
dict_market_val_dup	accessrest/ar_ticker.c	/^static void *dict_market_val_dup(const void *key)$/;"	f	file:
dict_market_val_dup	accessws/aw_deals.c	/^static void *dict_market_val_dup(const void *val)$/;"	f	file:
dict_market_val_dup	accessws/aw_state.c	/^static void *dict_market_val_dup(const void *key)$/;"	f	file:
dict_market_val_free	accessrest/ar_ticker.c	/^static void dict_market_val_free(void *val)$/;"	f	file:
dict_market_val_free	accessws/aw_deals.c	/^static void dict_market_val_free(void *val)$/;"	f	file:
dict_market_val_free	accessws/aw_state.c	/^static void dict_market_val_free(void *val)$/;"	f	file:
dict_method_hash_func	accessrest/ar_server.c	/^static uint32_t dict_method_hash_func(const void *key)$/;"	f	file:
dict_method_hash_func	accessws/aw_server.c	/^static uint32_t dict_method_hash_func(const void *key)$/;"	f	file:
dict_method_key_compare	accessrest/ar_server.c	/^static int dict_method_key_compare(const void *key1, const void *key2)$/;"	f	file:
dict_method_key_compare	accessws/aw_server.c	/^static int dict_method_key_compare(const void *key1, const void *key2)$/;"	f	file:
dict_method_key_dup	accessrest/ar_server.c	/^static void *dict_method_key_dup(const void *key)$/;"	f	file:
dict_method_key_dup	accessws/aw_server.c	/^static void *dict_method_key_dup(const void *key)$/;"	f	file:
dict_method_key_free	accessrest/ar_server.c	/^static void dict_method_key_free(void *key)$/;"	f	file:
dict_method_key_free	accessws/aw_server.c	/^static void dict_method_key_free(void *key)$/;"	f	file:
dict_next	utils/ut_dict.c	/^dict_entry *dict_next(dict_iterator *iter)$/;"	f
dict_next_power	utils/ut_dict.c	/^static uint32_t dict_next_power(uint32_t size)$/;"	f	file:
dict_order	matchengine/me_history.c	/^static dict_t *dict_order;$/;"	v	file:
dict_order_hash_function	matchengine/me_history.c	/^static uint32_t dict_order_hash_function(const void *key)$/;"	f	file:
dict_order_hash_function	matchengine/me_market.c	/^static uint32_t dict_order_hash_function(const void *key)$/;"	f	file:
dict_order_hash_function	test/utils/test_dict.c	/^static uint32_t dict_order_hash_function(const void *key)$/;"	f	file:
dict_order_key	matchengine/me_history.c	/^struct dict_order_key {$/;"	s	file:
dict_order_key	matchengine/me_market.c	/^struct dict_order_key {$/;"	s	file:
dict_order_key_compare	matchengine/me_history.c	/^static int dict_order_key_compare(const void *key1, const void *key2)$/;"	f	file:
dict_order_key_compare	matchengine/me_market.c	/^static int dict_order_key_compare(const void *key1, const void *key2)$/;"	f	file:
dict_order_key_compare	test/utils/test_dict.c	/^static int dict_order_key_compare(const void *key1, const void *key2)$/;"	f	file:
dict_order_key_dup	matchengine/me_history.c	/^static void *dict_order_key_dup(const void *key)$/;"	f	file:
dict_order_key_dup	matchengine/me_market.c	/^static void *dict_order_key_dup(const void *key)$/;"	f	file:
dict_order_key_dup	test/utils/test_dict.c	/^static void *dict_order_key_dup(const void *key)$/;"	f	file:
dict_order_key_free	matchengine/me_history.c	/^static void dict_order_key_free(void *key)$/;"	f	file:
dict_order_key_free	matchengine/me_market.c	/^static void dict_order_key_free(void *key)$/;"	f	file:
dict_order_key_free	test/utils/test_dict.c	/^static void dict_order_key_free(void *key)$/;"	f	file:
dict_order_value_free	matchengine/me_history.c	/^static void dict_order_value_free(void *value)$/;"	f	file:
dict_order_value_free	test/utils/test_dict.c	/^static void dict_order_value_free(void *value)$/;"	f	file:
dict_params_dup	utils/ut_http.c	/^static void *dict_params_dup(const void *obj)$/;"	f	file:
dict_params_free	utils/ut_http.c	/^static void dict_params_free(void *obj)$/;"	f	file:
dict_params_hash_func	utils/ut_http.c	/^static uint32_t dict_params_hash_func(const void *key)$/;"	f	file:
dict_params_key_compare	utils/ut_http.c	/^static int dict_params_key_compare(const void *key1, const void *key2)$/;"	f	file:
dict_profile	utils/ut_profile.c	/^static dict_t *dict_profile;$/;"	v	file:
dict_profile_hash_func	utils/ut_profile.c	/^static uint32_t dict_profile_hash_func(const void *key)$/;"	f	file:
dict_profile_key_compare	utils/ut_profile.c	/^static int dict_profile_key_compare(const void *key1, const void *key2)$/;"	f	file:
dict_profile_key_dup	utils/ut_profile.c	/^static void *dict_profile_key_dup(const void *key)$/;"	f	file:
dict_profile_key_free	utils/ut_profile.c	/^static void dict_profile_key_free(void *key)$/;"	f	file:
dict_profile_val_dup	utils/ut_profile.c	/^static void *dict_profile_val_dup(const void *val)$/;"	f	file:
dict_profile_val_free	utils/ut_profile.c	/^static void dict_profile_val_free(void *val)$/;"	f	file:
dict_release	utils/ut_dict.c	/^void dict_release(dict_t *dt)$/;"	f
dict_release_iterator	utils/ut_dict.c	/^void dict_release_iterator(dict_iterator *iter)$/;"	f
dict_replace	utils/ut_dict.c	/^int dict_replace(dict_t *dt, void *key, void *val)$/;"	f
dict_sds_key_compare	marketprice/mp_message.c	/^static int dict_sds_key_compare(const void *key1, const void *key2)$/;"	f	file:
dict_sds_key_free	marketprice/mp_message.c	/^static void dict_sds_key_free(void *key)$/;"	f	file:
dict_sds_key_hash_func	marketprice/mp_message.c	/^static uint32_t dict_sds_key_hash_func(const void *key)$/;"	f	file:
dict_ses_hash_func	accessws/aw_deals.c	/^static uint32_t dict_ses_hash_func(const void *key)$/;"	f	file:
dict_ses_hash_func	accessws/aw_depth.c	/^static uint32_t dict_ses_hash_func(const void *key)$/;"	f	file:
dict_ses_hash_func	accessws/aw_kline.c	/^static uint32_t dict_ses_hash_func(const void *key)$/;"	f	file:
dict_ses_hash_func	accessws/aw_state.c	/^static uint32_t dict_ses_hash_func(const void *key)$/;"	f	file:
dict_ses_key_compare	accessws/aw_deals.c	/^static int dict_ses_key_compare(const void *key1, const void *key2)$/;"	f	file:
dict_ses_key_compare	accessws/aw_depth.c	/^static int dict_ses_key_compare(const void *key1, const void *key2)$/;"	f	file:
dict_ses_key_compare	accessws/aw_kline.c	/^static int dict_ses_key_compare(const void *key1, const void *key2)$/;"	f	file:
dict_ses_key_compare	accessws/aw_state.c	/^static int dict_ses_key_compare(const void *key1, const void *key2)$/;"	f	file:
dict_ses_val_free	accessws/aw_state.c	/^static void dict_ses_val_free(void *val)$/;"	f	file:
dict_session	accessws/aw_state.c	/^static dict_t *dict_session;$/;"	v	file:
dict_size	utils/ut_dict.h	/^# define dict_size(/;"	d
dict_slot	utils/ut_dict.h	/^# define dict_slot(/;"	d
dict_sql	matchengine/me_history.c	/^static dict_t *dict_sql;$/;"	v	file:
dict_sql_hash_function	matchengine/me_history.c	/^static uint32_t dict_sql_hash_function(const void *key)$/;"	f	file:
dict_sql_key	matchengine/me_history.c	/^struct dict_sql_key {$/;"	s	file:
dict_sql_key_compare	matchengine/me_history.c	/^static int dict_sql_key_compare(const void *key1, const void *key2)$/;"	f	file:
dict_sql_key_dup	matchengine/me_history.c	/^static void *dict_sql_key_dup(const void *key)$/;"	f	file:
dict_sql_key_free	matchengine/me_history.c	/^static void dict_sql_key_free(void *key)$/;"	f	file:
dict_sql_val	matchengine/me_history.c	/^struct dict_sql_val {$/;"	s	file:
dict_sql_val_free	matchengine/me_history.c	/^static void dict_sql_val_free(struct dict_sql_val *val)$/;"	f	file:
dict_sub	accessws/aw_asset.c	/^static dict_t *dict_sub;$/;"	v	file:
dict_sub	accessws/aw_order.c	/^static dict_t *dict_sub;$/;"	v	file:
dict_sub_hash_func	accessws/aw_asset.c	/^static uint32_t dict_sub_hash_func(const void *key)$/;"	f	file:
dict_sub_hash_func	accessws/aw_order.c	/^static uint32_t dict_sub_hash_func(const void *key)$/;"	f	file:
dict_sub_key_compare	accessws/aw_asset.c	/^static int dict_sub_key_compare(const void *key1, const void *key2)$/;"	f	file:
dict_sub_key_compare	accessws/aw_order.c	/^static int dict_sub_key_compare(const void *key1, const void *key2)$/;"	f	file:
dict_sub_val_free	accessws/aw_asset.c	/^static void dict_sub_val_free(void *val)$/;"	f	file:
dict_sub_val_free	accessws/aw_order.c	/^static void dict_sub_val_free(void *val)$/;"	f	file:
dict_t	utils/ut_dict.h	/^typedef struct dict_t {$/;"	s
dict_t	utils/ut_dict.h	/^} dict_t;$/;"	t	typeref:struct:dict_t
dict_time_key_compare	marketprice/mp_message.c	/^static int dict_time_key_compare(const void *key1, const void *key2)$/;"	f	file:
dict_time_key_dup	marketprice/mp_message.c	/^static void *dict_time_key_dup(const void *key)$/;"	f	file:
dict_time_key_free	marketprice/mp_message.c	/^static void dict_time_key_free(void *key)$/;"	f	file:
dict_time_key_hash_func	marketprice/mp_message.c	/^static uint32_t dict_time_key_hash_func(const void *key)$/;"	f	file:
dict_types	utils/ut_dict.h	/^typedef struct dict_types {$/;"	s
dict_types	utils/ut_dict.h	/^} dict_types;$/;"	t	typeref:struct:dict_types
dict_update	matchengine/me_update.c	/^dict_t *dict_update;$/;"	v
dict_update_key_compare	marketprice/mp_message.c	/^static int dict_update_key_compare(const void *key1, const void *key2)$/;"	f	file:
dict_update_key_dup	marketprice/mp_message.c	/^static void *dict_update_key_dup(const void *key)$/;"	f	file:
dict_update_key_free	marketprice/mp_message.c	/^static void dict_update_key_free(void *key)$/;"	f	file:
dict_update_key_hash_func	marketprice/mp_message.c	/^static uint32_t dict_update_key_hash_func(const void *key)$/;"	f	file:
dict_user	accessws/aw_deals.c	/^static dict_t *dict_user;$/;"	v	file:
dict_user_hash_func	accessws/aw_deals.c	/^static uint32_t dict_user_hash_func(const void *key)$/;"	f	file:
dict_user_hash_function	matchengine/me_market.c	/^static uint32_t dict_user_hash_function(const void *key)$/;"	f	file:
dict_user_key	matchengine/me_market.c	/^struct dict_user_key {$/;"	s	file:
dict_user_key_compare	accessws/aw_deals.c	/^static int dict_user_key_compare(const void *key1, const void *key2)$/;"	f	file:
dict_user_key_compare	matchengine/me_market.c	/^static int dict_user_key_compare(const void *key1, const void *key2)$/;"	f	file:
dict_user_key_dup	accessws/aw_deals.c	/^static void *dict_user_key_dup(const void *key)$/;"	f	file:
dict_user_key_dup	matchengine/me_market.c	/^static void *dict_user_key_dup(const void *key)$/;"	f	file:
dict_user_key_free	accessws/aw_deals.c	/^static void dict_user_key_free(void *key)$/;"	f	file:
dict_user_key_free	matchengine/me_market.c	/^static void dict_user_key_free(void *key)$/;"	f	file:
dict_user_orders	matchengine/me_market.c	/^static dict_t *dict_user_orders;$/;"	v	file:
dict_user_stops	matchengine/me_market.c	/^static dict_t *dict_user_stops;$/;"	v	file:
dict_user_val_dup	accessws/aw_deals.c	/^static void *dict_user_val_dup(const void *key)$/;"	f	file:
dict_user_val_free	accessws/aw_deals.c	/^static void dict_user_val_free(void *val)$/;"	f	file:
dict_user_val_free	matchengine/me_market.c	/^static void dict_user_val_free(void *key)$/;"	f	file:
dict_val_dup	accesshttp/ah_server.c	/^static void *dict_val_dup(const void *val)$/;"	f	file:
dict_val_free	accesshttp/ah_server.c	/^static void dict_val_free(void *val)$/;"	f	file:
direction	utils/ut_list.h	/^    int direction;$/;"	m	struct:list_iter
disconnect	depends/hiredis/test.c	/^static int disconnect(redisContext *c, int keep_fd) {$/;"	f	file:
disconnectCallback	depends/hiredis/examples/example-ae.c	/^void disconnectCallback(const redisAsyncContext *c, int status) {$/;"	f
disconnectCallback	depends/hiredis/examples/example-ivykis.c	/^void disconnectCallback(const redisAsyncContext *c, int status) {$/;"	f
disconnectCallback	depends/hiredis/examples/example-libev.c	/^void disconnectCallback(const redisAsyncContext *c, int status) {$/;"	f
disconnectCallback	depends/hiredis/examples/example-libevent.c	/^void disconnectCallback(const redisAsyncContext *c, int status) {$/;"	f
disconnectCallback	depends/hiredis/examples/example-libuv.c	/^void disconnectCallback(const redisAsyncContext *c, int status) {$/;"	f
disconnectCallback	depends/hiredis/examples/example-macosx.c	/^void disconnectCallback(const redisAsyncContext *c, int status) {$/;"	f
disconnect_cb	depends/hiredis/examples/example-glib.c	/^disconnect_cb (const redisAsyncContext *ac G_GNUC_UNUSED,$/;"	f	file:
dlog	utils/ut_log.c	/^int dlog(dlog_t *log, const char *fmt, ...)$/;"	f
dlog_atexit	utils/ut_log.c	/^static void dlog_atexit(void)$/;"	f	file:
dlog_backtrace	utils/ut_log.c	/^void dlog_backtrace(dlog_t *log)$/;"	f
dlog_check	utils/ut_log.c	/^void dlog_check(dlog_t *log, struct timeval *tv)$/;"	f
dlog_check_all	utils/ut_log.c	/^void dlog_check_all(void)$/;"	f
dlog_fini	utils/ut_log.c	/^int dlog_fini(dlog_t *log)$/;"	f
dlog_flush	utils/ut_log.c	/^void dlog_flush(dlog_t *log)$/;"	f
dlog_flush_all	utils/ut_log.c	/^void dlog_flush_all(void)$/;"	f
dlog_free	utils/ut_log.c	/^static void *dlog_free(dlog_t *log)$/;"	f	file:
dlog_init	utils/ut_log.c	/^dlog_t *dlog_init(const char *base_name, int flag, size_t max_size, int log_num, int keep_time)$/;"	f
dlog_init_flag	utils/ut_log.c	/^static int dlog_init_flag = 0;$/;"	v	file:
dlog_level_down	utils/ut_log.c	/^void dlog_level_down(void)$/;"	f
dlog_level_up	utils/ut_log.c	/^void dlog_level_up(void)$/;"	f
dlog_on_fatal	utils/ut_log.c	/^dlog_on_fatal_cb dlog_on_fatal;$/;"	v
dlog_on_fatal_cb	utils/ut_log.h	/^typedef int (*dlog_on_fatal_cb)(const char *fmt, ...);$/;"	t
dlog_opened_num	utils/ut_log.c	/^int dlog_opened_num(void)$/;"	f
dlog_read_flag	utils/ut_log.c	/^int dlog_read_flag(char *str)$/;"	f
dlog_server	utils/ut_log.c	/^int dlog_server(dlog_t *log, char *buf, size_t size, struct sockaddr_in *addr)$/;"	f
dlog_set_no_shift	utils/ut_log.c	/^void dlog_set_no_shift(dlog_t *log)$/;"	f
dlog_set_sockfd	utils/ut_log.c	/^int dlog_set_sockfd(dlog_t *log, int fd)$/;"	f
dlog_stderr	utils/ut_log.c	/^void dlog_stderr(const char *fmt, ...)$/;"	f
dlog_syslog	utils/ut_log.c	/^void dlog_syslog(const char *fmt, ...)$/;"	f
dlog_t	utils/ut_log.h	/^} dlog_t;$/;"	t	typeref:struct:__anon7
dlogv	utils/ut_log.c	/^int dlogv(dlog_t *log, const char *fmt, va_list ap)$/;"	f
do_load_config	alertcenter/ac_config.c	/^static int do_load_config(json_t *root)$/;"	f	file:
do_load_config	logwriter/lw_config.c	/^int do_load_config(json_t *root)$/;"	f
dt	utils/ut_dict.h	/^    dict_t *dt;$/;"	m	struct:dict_iterator
dump_balance	matchengine/me_dump.c	/^int dump_balance(MYSQL *conn, const char *table)$/;"	f
dump_balance_dict	matchengine/me_dump.c	/^static int dump_balance_dict(MYSQL *conn, const char *table, dict_t *dict)$/;"	f	file:
dump_balance_to_db	matchengine/me_persist.c	/^static int dump_balance_to_db(MYSQL *conn, time_t end)$/;"	f	file:
dump_order_to_db	matchengine/me_persist.c	/^static int dump_order_to_db(MYSQL *conn, time_t end)$/;"	f	file:
dump_orders	matchengine/me_dump.c	/^int dump_orders(MYSQL *conn, const char *table)$/;"	f
dump_orders_list	matchengine/me_dump.c	/^static int dump_orders_list(MYSQL *conn, const char *table, skiplist_t *list)$/;"	f	file:
dump_stop_order_to_db	matchengine/me_persist.c	/^static int dump_stop_order_to_db(MYSQL *conn, time_t end)$/;"	f	file:
dump_stops	matchengine/me_dump.c	/^int dump_stops(MYSQL *conn, const char *table)$/;"	f
dump_stops_list	matchengine/me_dump.c	/^static int dump_stops_list(MYSQL *conn, const char *table, skiplist_t *list)$/;"	f	file:
dump_to_db	matchengine/me_persist.c	/^int dump_to_db(time_t timestamp)$/;"	f
dump_update	matchengine/me_dump.c	/^int dump_update(MYSQL *conn, const char *table)$/;"	f
dump_update_dict	matchengine/me_dump.c	/^static int dump_update_dict(MYSQL *conn, const char *table, dict_t *dict)$/;"	f	file:
dump_update_to_db	matchengine/me_persist.c	/^static int dump_update_to_db(MYSQL *conn, time_t end)$/;"	f	file:
dup	utils/ut_list.h	/^    void *(*dup)(void *value);$/;"	m	struct:list_type
dup	utils/ut_skiplist.h	/^    void *(*dup)(void *value);$/;"	m	struct:skiplist_type
element	depends/hiredis/hiredis.h	/^    struct redisReply **element; \/* elements vector for REDIS_REPLY_ARRAY *\/$/;"	m	struct:redisReply	typeref:struct:redisReply::redisReply
elements	depends/hiredis/hiredis.h	/^    size_t elements; \/* number of elements, for REDIS_REPLY_ARRAY *\/$/;"	m	struct:redisReply
elements	depends/hiredis/read.h	/^    int elements; \/* number of elements in multibulk container *\/$/;"	m	struct:redisReadTask
entry	depends/hiredis/dict.h	/^    dictEntry *entry, *nextEntry;$/;"	m	struct:dictIterator
entry	network/nw_state.h	/^    nw_state_entry *entry;$/;"	m	struct:nw_state_iterator
entry	utils/ut_dict.h	/^    dict_entry *entry;$/;"	m	struct:dict_iterator
err	depends/hiredis/async.h	/^    int err;$/;"	m	struct:redisAsyncContext
err	depends/hiredis/hiredis.h	/^    int err; \/* Error flags, 0 when there is no error *\/$/;"	m	struct:redisContext
err	depends/hiredis/read.h	/^    int err; \/* Error flags, 0 when there is no error *\/$/;"	m	struct:redisReader
errstr	depends/hiredis/async.h	/^    char *errstr;$/;"	m	struct:redisAsyncContext
errstr	depends/hiredis/hiredis.h	/^    char errstr[128]; \/* String representation of error when applicable *\/$/;"	m	struct:redisContext
errstr	depends/hiredis/read.h	/^    char errstr[128]; \/* String representation of error when applicable *\/$/;"	m	struct:redisReader
escape_key	utils/ut_profile.c	/^static char *escape_key(const char *key)$/;"	f	file:
ev	depends/hiredis/async.h	/^    } ev;$/;"	m	struct:redisAsyncContext	typeref:struct:redisAsyncContext::__anon17
ev	network/nw_job.h	/^    ev_io ev;$/;"	m	struct:nw_job
ev	network/nw_ses.h	/^    ev_io ev;$/;"	m	struct:nw_ses
ev	network/nw_state.h	/^    ev_timer ev;$/;"	m	struct:nw_state_entry
ev	network/nw_timer.h	/^    ev_timer ev;$/;"	m	struct:nw_timer
ev	utils/ut_kafka.h	/^    ev_io ev;$/;"	m	struct:kafka_consumer_t
events	depends/hiredis/adapters/libuv.h	/^  int                events;$/;"	m	struct:redisLibuvEvents
execute_limit_ask_order	matchengine/me_market.c	/^static int execute_limit_ask_order(bool real, market_t *m, order_t *taker)$/;"	f	file:
execute_limit_bid_order	matchengine/me_market.c	/^static int execute_limit_bid_order(bool real, market_t *m, order_t *taker)$/;"	f	file:
execute_market_ask_order	matchengine/me_market.c	/^static int execute_market_ask_order(bool real, market_t *m, order_t *taker)$/;"	f	file:
execute_market_bid_order	matchengine/me_market.c	/^static int execute_market_bid_order(bool real, market_t *m, order_t *taker)$/;"	f	file:
expand_if_needed	network/nw_state.c	/^static int expand_if_needed(nw_state *context)$/;"	f	file:
ext	utils/ut_rpc.h	/^    void   * ext;$/;"	m	struct:rpc_pkg
ext_size	utils/ut_rpc.h	/^    uint16_t ext_size;$/;"	m	struct:rpc_pkg
external_sockfd	utils/ut_log.h	/^    int                 external_sockfd;$/;"	m	struct:__anon7
fails	depends/hiredis/test.c	/^static int tests = 0, fails = 0;$/;"	v	file:
family	network/nw_sock.h	/^    unsigned int family;$/;"	m	struct:nw_addr_t
fatal_error	network/nw_evt.c	/^static void fatal_error(const char *msg)$/;"	f	file:
fd	depends/hiredis/adapters/ae.h	/^    int fd;$/;"	m	struct:redisAeEvents
fd	depends/hiredis/adapters/ivykis.h	/^    struct iv_fd fd;$/;"	m	struct:redisIvykisEvents	typeref:struct:redisIvykisEvents::iv_fd
fd	depends/hiredis/hiredis.h	/^    int fd;$/;"	m	struct:redisContext
fee_asset	matchengine/me_market.h	/^    char            *fee_asset;$/;"	m	struct:order_t
fee_asset	matchengine/me_market.h	/^    char            *fee_asset;$/;"	m	struct:stop_t
fee_discount	matchengine/me_market.h	/^    mpd_t           *fee_discount;$/;"	m	struct:order_t
fee_discount	matchengine/me_market.h	/^    mpd_t           *fee_discount;$/;"	m	struct:stop_t
fee_prec	matchengine/me_config.h	/^    int                 fee_prec;$/;"	m	struct:market
fee_prec	matchengine/me_market.h	/^    int             fee_prec;$/;"	m	struct:market_t
fee_price	matchengine/me_market.h	/^    mpd_t           *fee_price;$/;"	m	struct:order_t
field	utils/ut_http_svr.c	/^    sds     field;$/;"	m	struct:clt_info	file:
field	utils/ut_ws_svr.c	/^    sds         field;$/;"	m	struct:clt_info	file:
field_data	utils/http_parser.h	/^  } field_data[UF_MAX];$/;"	m	struct:http_parser_url	typeref:struct:http_parser_url::__anon5
field_set	utils/http_parser.h	/^  uint16_t field_set;           \/* Bitmask of (1 << UF_*) values *\/$/;"	m	struct:http_parser_url
field_set	utils/ut_http_svr.c	/^    bool    field_set;$/;"	m	struct:clt_info	file:
field_set	utils/ut_ws_svr.c	/^    bool        field_set;$/;"	m	struct:clt_info	file:
file	utils/ut_queue.c	/^    char     file[512];$/;"	m	struct:queue_head	file:
file_end	utils/ut_queue.c	/^    uint64_t file_end;$/;"	m	struct:queue_head	file:
file_limit	utils/ut_config.h	/^    uint32_t file_limit;$/;"	m	struct:process_cfg
file_max_size	utils/ut_queue.c	/^    uint64_t file_max_size;$/;"	m	struct:queue_head	file:
file_num	utils/ut_queue.c	/^    uint32_t file_num;$/;"	m	struct:queue_head	file:
file_start	utils/ut_queue.c	/^    uint64_t file_start;$/;"	m	struct:queue_head	file:
fin	utils/ut_ws_svr.c	/^    uint8_t     fin;$/;"	m	struct:ws_frame	file:
fini_history	matchengine/me_history.c	/^int fini_history(void)$/;"	f
fini_message	matchengine/me_message.c	/^int fini_message(void)$/;"	f
fini_operlog	matchengine/me_operlog.c	/^int fini_operlog(void)$/;"	f
finish	depends/hiredis/examples/example-qt.h	/^        void finish() { emit finished(); }$/;"	f	class:ExampleQt
finish_order	matchengine/me_market.c	/^static int finish_order(bool real, market_t *m, order_t *order)$/;"	f	file:
finish_stop	matchengine/me_market.c	/^static int finish_stop(bool real, market_t *m, stop_t *stop, int status)$/;"	f	file:
flag	utils/ut_config.h	/^    char   *flag;$/;"	m	struct:log_cfg
flags	depends/hiredis/hiredis.h	/^    int flags;$/;"	m	struct:redisContext
flags	utils/http_parser.h	/^  unsigned int flags : 8;        \/* F_* values from 'flags' enum; semi-public *\/$/;"	m	struct:http_parser
flags	utils/http_parser.h	/^enum flags$/;"	g
flags	utils/ut_signal.c	/^    int flags;$/;"	m	struct:signal	file:
flush_data	monitoragent/ma_server.c	/^static int flush_data(void)$/;"	f	file:
flush_data	monitorcenter/mc_server.c	/^static int flush_data(time_t now)$/;"	f	file:
flush_deals	marketprice/mp_message.c	/^static int flush_deals(redisContext *context, const char *market, list_t *list)$/;"	f	file:
flush_dict	monitoragent/ma_server.c	/^static int flush_dict(void)$/;"	f	file:
flush_dict	monitorcenter/mc_server.c	/^static int flush_dict(time_t end)$/;"	f	file:
flush_kline	marketprice/mp_message.c	/^static int flush_kline(redisContext *context, struct market_info *info, struct update_key *ukey)$/;"	f	file:
flush_last	marketprice/mp_message.c	/^static int flush_last(redisContext *context, const char *market, mpd_t *last)$/;"	f	file:
flush_log	matchengine/me_operlog.c	/^static void flush_log(void)$/;"	f	file:
flush_log	utils/ut_log.c	/^static int flush_log(dlog_t *log, struct timeval *now)$/;"	f	file:
flush_market	marketprice/mp_message.c	/^static int flush_market(void)$/;"	f	file:
flush_offset	marketprice/mp_message.c	/^static int flush_offset(redisContext *context, int64_t offset)$/;"	f	file:
flush_timer	marketprice/mp_message.c	/^static nw_timer flush_timer;$/;"	v	file:
flush_update	marketprice/mp_message.c	/^static int flush_update(redisContext *context, struct market_info *info)$/;"	f	file:
fn	depends/hiredis/async.h	/^    redisCallbackFn *fn;$/;"	m	struct:redisCallback
fn	depends/hiredis/read.h	/^    redisReplyObjectFunctions *fn;$/;"	m	struct:redisReader
force_flush	monitoragent/ma_server.c	/^void force_flush(void)$/;"	f
forward	utils/ut_skiplist.h	/^    struct skiplist_node *forward[];$/;"	m	struct:skiplist_node	typeref:struct:skiplist_node::skiplist_node
frame	utils/ut_ws_svr.c	/^    struct ws_frame frame;$/;"	m	struct:clt_info	typeref:struct:clt_info::ws_frame	file:
free	depends/hiredis/sds.h	/^    int free;$/;"	m	struct:sdshdr
free	network/nw_buf.h	/^    uint32_t free;$/;"	m	struct:nw_buf_pool
free	network/nw_buf.h	/^    uint32_t free;$/;"	m	struct:nw_cache
free	utils/ut_list.h	/^    void (*free)(void *value);$/;"	m	struct:list_type
free	utils/ut_sds.h	/^    int free;$/;"	m	struct:sdshdr
free	utils/ut_skiplist.h	/^    void (*free)(void *value);$/;"	m	struct:skiplist_type
freeObject	depends/hiredis/read.h	/^    void (*freeObject)(void*);$/;"	m	struct:redisReplyObjectFunctions
freeRedisRunLoop	depends/hiredis/adapters/macosx.h	/^static int freeRedisRunLoop(RedisRunLoop* redisRunLoop) {$/;"	f
freeReplyObject	depends/hiredis/hiredis.c	/^void freeReplyObject(void *reply) {$/;"	f
free_arr	network/nw_buf.h	/^    nw_buf **free_arr;$/;"	m	struct:nw_buf_pool
free_arr	network/nw_buf.h	/^    void **free_arr;$/;"	m	struct:nw_cache
free_message	utils/ut_kafka.c	/^static void free_message(void *value)$/;"	f	file:
free_total	network/nw_buf.h	/^    uint32_t free_total;$/;"	m	struct:nw_buf_pool
free_total	network/nw_buf.h	/^    uint32_t free_total;$/;"	m	struct:nw_cache
frozen	matchengine/me_market.h	/^    mpd_t           *frozen;$/;"	m	struct:order_t
generate_crc32c	utils/ut_crc32.c	/^uint32_t generate_crc32c(const char *buffer, size_t length) {$/;"	f
generate_random_path	network/nw_clt.c	/^static void generate_random_path(char *path, size_t size, char *prefix, char *suffix)$/;"	f	file:
getCallback	depends/hiredis/examples/example-ae.c	/^void getCallback(redisAsyncContext *c, void *r, void *privdata) {$/;"	f
getCallback	depends/hiredis/examples/example-ivykis.c	/^void getCallback(redisAsyncContext *c, void *r, void *privdata) {$/;"	f
getCallback	depends/hiredis/examples/example-libev.c	/^void getCallback(redisAsyncContext *c, void *r, void *privdata) {$/;"	f
getCallback	depends/hiredis/examples/example-libevent.c	/^void getCallback(redisAsyncContext *c, void *r, void *privdata) {$/;"	f
getCallback	depends/hiredis/examples/example-libuv.c	/^void getCallback(redisAsyncContext *c, void *r, void *privdata) {$/;"	f
getCallback	depends/hiredis/examples/example-macosx.c	/^void getCallback(redisAsyncContext *c, void *r, void *privdata) {$/;"	f
getCallback	depends/hiredis/examples/example-qt.cpp	/^void getCallback(redisAsyncContext *, void * r, void * privdata) {$/;"	f
get_asset_type	matchengine/me_balance.c	/^static struct asset_type *get_asset_type(const char *asset)$/;"	f	file:
get_available_id	network/nw_state.c	/^static uint32_t get_available_id(nw_state *context)$/;"	f	file:
get_cache	accessrest/ar_server.c	/^static struct cache_val *get_cache(sds cache_key)$/;"	f	file:
get_day_start	utils/ut_misc.c	/^time_t get_day_start(time_t timestamp)$/;"	f
get_depth	matchengine/me_server.c	/^static json_t *get_depth(market_t *market, size_t limit)$/;"	f	file:
get_depth_diff	accessws/aw_depth.c	/^static json_t *get_depth_diff(json_t *first, json_t *second, uint32_t limit)$/;"	f	file:
get_depth_merge	matchengine/me_server.c	/^static json_t *get_depth_merge(market_t* market, size_t limit, mpd_t *interval)$/;"	f	file:
get_fee_price	matchengine/me_trade.c	/^mpd_t *get_fee_price(market_t *m, const char *asset)$/;"	f
get_last_aggregate_time	monitorcenter/mc_server.c	/^static time_t get_last_aggregate_time(const char *key)$/;"	f	file:
get_last_kline	marketprice/mp_message.c	/^static struct kline_info *get_last_kline(dict_t *dict, time_t start, time_t end, int interval)$/;"	f	file:
get_last_slice	matchengine/me_persist.c	/^static int get_last_slice(MYSQL *conn, time_t *timestamp, uint64_t *last_oper_id, uint64_t *last_order_id, uint64_t *last_deals_id)$/;"	f	file:
get_list_diff	accessws/aw_depth.c	/^static json_t *get_list_diff(json_t *list1, json_t *list2, uint32_t limit, int side)$/;"	f	file:
get_log_name	utils/ut_log.c	/^static char *get_log_name(dlog_t *log, struct timeval *now)$/;"	f	file:
get_market	matchengine/me_trade.c	/^market_t *get_market(const char *name)$/;"	f
get_market_deals	marketprice/mp_message.c	/^json_t *get_market_deals(const char *market, int limit, uint64_t last_id)$/;"	f
get_market_deals_ext	marketprice/mp_message.c	/^json_t *get_market_deals_ext(const char *market, int limit, uint64_t last_id)$/;"	f
get_market_id	marketprice/mp_message.c	/^int get_market_id(const char *market)$/;"	f
get_market_kline_day	marketprice/mp_message.c	/^json_t *get_market_kline_day(const char *market, time_t start, time_t end, int interval)$/;"	f
get_market_kline_hour	marketprice/mp_message.c	/^json_t *get_market_kline_hour(const char *market, time_t start, time_t end, int interval)$/;"	f
get_market_kline_min	marketprice/mp_message.c	/^json_t *get_market_kline_min(const char *market, time_t start, time_t end, int interval)$/;"	f
get_market_kline_month	marketprice/mp_message.c	/^json_t *get_market_kline_month(const char *market, time_t start, time_t end, int interval)$/;"	f
get_market_kline_sec	marketprice/mp_message.c	/^json_t *get_market_kline_sec(const char *market, time_t start, time_t end, int interval)$/;"	f
get_market_kline_week	marketprice/mp_message.c	/^json_t *get_market_kline_week(const char *market, time_t start, time_t end, int interval)$/;"	f
get_market_last_info	matchengine/me_trade.c	/^json_t *get_market_last_info(void)$/;"	f
get_market_last_price	marketprice/mp_message.c	/^mpd_t  *get_market_last_price(const char *market)$/;"	f
get_market_list	accessrest/ar_ticker.c	/^json_t *get_market_list(void)$/;"	f
get_market_list	marketprice/mp_message.c	/^static json_t *get_market_list(void)$/;"	f	file:
get_market_status	marketprice/mp_message.c	/^json_t *get_market_status(const char *market, int period)$/;"	f
get_market_ticker	accessrest/ar_ticker.c	/^json_t *get_market_ticker(const void *market)$/;"	f
get_market_ticker_all	accessrest/ar_ticker.c	/^json_t *get_market_ticker_all(void)$/;"	f
get_message_offset	marketprice/mp_message.c	/^static int64_t get_message_offset(void)$/;"	f	file:
get_monitor_value	monitorcenter/mc_server.c	/^static int get_monitor_value(time_t timestamp, const char *scope, const char *key, const char *host, uint64_t *val)$/;"	f	file:
get_month_start	utils/ut_misc.c	/^time_t get_month_start(int tm_year, int tm_mon)$/;"	f
get_next_month	marketprice/mp_message.c	/^static time_t get_next_month(int *tm_year, int *tm_mon)$/;"	f	file:
get_notify_full	accessws/aw_state.c	/^static json_t *get_notify_full(double last_notify)$/;"	f	file:
get_notify_list	accessws/aw_state.c	/^static json_t *get_notify_list(list_t *list, double last_notify)$/;"	f	file:
get_online_user_count	accessws/aw_server.c	/^static size_t get_online_user_count(void)$/;"	f	file:
get_order_deals	readhistory/rh_reader.c	/^json_t *get_order_deals(MYSQL *conn, uint64_t order_id, size_t offset, size_t limit)$/;"	f
get_order_detail	readhistory/rh_reader.c	/^json_t *get_order_detail(MYSQL *conn, uint64_t order_id)$/;"	f
get_order_finished	matchengine/me_history.c	/^json_t *get_order_finished(uint64_t order_id)$/;"	f
get_order_info	matchengine/me_market.c	/^json_t *get_order_info(order_t *order)$/;"	f
get_order_info	test/utils/test_dict.c	/^json_t *get_order_info()$/;"	f
get_shm	utils/ut_queue.c	/^static int get_shm(key_t key, size_t size, void **addr)$/;"	f	file:
get_shm_inner	utils/ut_queue.c	/^static void *get_shm_inner(key_t key, size_t size, int flag)$/;"	f	file:
get_slave_info	utils/ut_redis.c	/^static char *get_slave_info(size_t elements, redisReply **element, char *key)$/;"	f	file:
get_sql	matchengine/me_history.c	/^static struct dict_sql_val *get_sql(struct dict_sql_key *key)$/;"	f	file:
get_status_description	utils/ut_http.c	/^const char *get_status_description(uint32_t status)$/;"	f
get_stop_info	matchengine/me_market.c	/^json_t *get_stop_info(stop_t *stop)$/;"	f
get_timezone_offset	utils/ut_misc.c	/^time_t get_timezone_offset(void)$/;"	f
get_today_start	matchengine/me_persist.c	/^static time_t get_today_start(void)$/;"	f	file:
get_user_balance_history	readhistory/rh_reader.c	/^json_t *get_user_balance_history(MYSQL *conn, uint32_t user_id,$/;"	f
get_user_deal_history	readhistory/rh_reader.c	/^json_t *get_user_deal_history(MYSQL *conn, uint32_t user_id,$/;"	f
get_user_order_history	readhistory/rh_reader.c	/^json_t *get_user_order_history(MYSQL *conn, uint32_t user_id,$/;"	f
get_user_stop_history	readhistory/rh_reader.c	/^json_t *get_user_stop_history(MYSQL *conn, uint32_t user_id,$/;"	f
getmem	utils/ut_queue.c	/^static void getmem(queue_t *queue, uint32_t *p_head, void *data, uint32_t size)$/;"	f	file:
h_C	utils/http_parser.c	/^  , h_C$/;"	e	enum:header_states	file:
h_CO	utils/http_parser.c	/^  , h_CO$/;"	e	enum:header_states	file:
h_CON	utils/http_parser.c	/^  , h_CON$/;"	e	enum:header_states	file:
h_connection	utils/http_parser.c	/^  , h_connection$/;"	e	enum:header_states	file:
h_connection_close	utils/http_parser.c	/^  , h_connection_close$/;"	e	enum:header_states	file:
h_connection_keep_alive	utils/http_parser.c	/^  , h_connection_keep_alive$/;"	e	enum:header_states	file:
h_connection_upgrade	utils/http_parser.c	/^  , h_connection_upgrade$/;"	e	enum:header_states	file:
h_content_length	utils/http_parser.c	/^  , h_content_length$/;"	e	enum:header_states	file:
h_general	utils/http_parser.c	/^  { h_general = 0$/;"	e	enum:header_states	file:
h_matching_connection	utils/http_parser.c	/^  , h_matching_connection$/;"	e	enum:header_states	file:
h_matching_connection_close	utils/http_parser.c	/^  , h_matching_connection_close$/;"	e	enum:header_states	file:
h_matching_connection_keep_alive	utils/http_parser.c	/^  , h_matching_connection_keep_alive$/;"	e	enum:header_states	file:
h_matching_connection_token	utils/http_parser.c	/^  , h_matching_connection_token$/;"	e	enum:header_states	file:
h_matching_connection_token_start	utils/http_parser.c	/^  , h_matching_connection_token_start$/;"	e	enum:header_states	file:
h_matching_connection_upgrade	utils/http_parser.c	/^  , h_matching_connection_upgrade$/;"	e	enum:header_states	file:
h_matching_content_length	utils/http_parser.c	/^  , h_matching_content_length$/;"	e	enum:header_states	file:
h_matching_proxy_connection	utils/http_parser.c	/^  , h_matching_proxy_connection$/;"	e	enum:header_states	file:
h_matching_transfer_encoding	utils/http_parser.c	/^  , h_matching_transfer_encoding$/;"	e	enum:header_states	file:
h_matching_transfer_encoding_chunked	utils/http_parser.c	/^  , h_matching_transfer_encoding_chunked$/;"	e	enum:header_states	file:
h_matching_upgrade	utils/http_parser.c	/^  , h_matching_upgrade$/;"	e	enum:header_states	file:
h_transfer_encoding	utils/http_parser.c	/^  , h_transfer_encoding$/;"	e	enum:header_states	file:
h_transfer_encoding_chunked	utils/http_parser.c	/^  , h_transfer_encoding_chunked$/;"	e	enum:header_states	file:
h_upgrade	utils/http_parser.c	/^  , h_upgrade$/;"	e	enum:header_states	file:
handle	depends/hiredis/adapters/libuv.h	/^  uv_poll_t          handle;$/;"	m	struct:redisLibuvEvents
handler	utils/ut_signal.c	/^    void (*handler)(int signo);$/;"	m	struct:signal	file:
hash	matchengine/me_history.c	/^    uint32_t hash;$/;"	m	struct:dict_sql_key	file:
hashFunction	depends/hiredis/dict.h	/^    unsigned int (*hashFunction)(const void *key);$/;"	m	struct:dictType
hash_function	utils/ut_dict.h	/^    uint32_t (*hash_function)(const void *key);$/;"	m	struct:dict_types
head	depends/hiredis/async.h	/^    redisCallback *head, *tail;$/;"	m	struct:redisCallbackList
head	network/nw_buf.h	/^    nw_buf *head;$/;"	m	struct:nw_buf_list
head	utils/ut_list.h	/^    list_node *head;$/;"	m	struct:list_t
header	utils/ut_skiplist.h	/^    skiplist_node *header;$/;"	m	struct:skiplist_t
header_state	utils/http_parser.h	/^  unsigned int header_state : 7; \/* enum header_state from http_parser.c *\/$/;"	m	struct:http_parser
header_states	utils/http_parser.c	/^enum header_states$/;"	g	file:
headers	test/accesshttp/auth.py	/^headers = {"content-type": "application\/json"}$/;"	v
headers	utils/ut_http.h	/^    dict_t      *headers;$/;"	m	struct:http_request_t
headers	utils/ut_http.h	/^    dict_t      *headers;$/;"	m	struct:http_response_t
heartbeat_check	utils/ut_rpc_svr.h	/^    bool heartbeat_check;$/;"	m	struct:rpc_svr
heartbeat_check	utils/ut_rpc_svr.h	/^    bool heartbeat_check;$/;"	m	struct:rpc_svr_cfg
heartbeat_timeout	utils/ut_rpc_clt.h	/^    double heartbeat_timeout;$/;"	m	struct:rpc_clt
heartbeat_timeout	utils/ut_rpc_clt.h	/^    double heartbeat_timeout;$/;"	m	struct:rpc_clt_cfg
heartbeat_timeout	utils/ut_rpc_svr.c	/^    double heartbeat_timeout;$/;"	m	struct:clt_info	file:
hex2bin	utils/ut_misc.c	/^sds hex2bin(const char *hex)$/;"	f
hex2int	utils/ut_misc.c	/^static int hex2int(char c)$/;"	f	file:
hex_digit_to_int	depends/hiredis/sds.c	/^int hex_digit_to_int(char c) {$/;"	f
hex_digit_to_int	utils/ut_sds.c	/^int hex_digit_to_int(char c) {$/;"	f
hexdump	utils/ut_misc.c	/^sds hexdump(const void *mem, size_t len)$/;"	f
high	marketprice/mp_kline.h	/^    mpd_t *high;$/;"	m	struct:kline_info
history_status	matchengine/me_history.c	/^sds history_status(sds reply)$/;"	f
history_thread	matchengine/me_config.h	/^    int                 history_thread;$/;"	m	struct:settings
host	depends/hiredis/hiredis.h	/^        char *host;$/;"	m	struct:redisContext::__anon13
host	depends/hiredis/test.c	/^        const char *host;$/;"	m	struct:config::__anon19	file:
host	utils/ut_alert.c	/^static const char *host;$/;"	v	file:
host	utils/ut_alert.h	/^    char *host;$/;"	m	struct:alert_cfg
host	utils/ut_config.h	/^    char    *host;$/;"	m	struct:mysql_cfg
host	utils/ut_redis.h	/^    char *host;$/;"	m	struct:redis_addr
host_addr	network/nw_ses.h	/^    nw_addr_t *host_addr;$/;"	m	struct:nw_ses
hour	marketprice/mp_message.c	/^    dict_t *hour;$/;"	m	struct:market_info	file:
hour_max	marketprice/mp_config.h	/^    int                 hour_max;$/;"	m	struct:settings
ht	depends/hiredis/dict.h	/^    dict *ht;$/;"	m	struct:dictIterator
htobe16	utils/ut_misc.h	/^#  define htobe16(/;"	d
htobe16	utils/ut_misc.h	/^# undef htobe16$/;"	d
htobe32	utils/ut_misc.h	/^#  define htobe32(/;"	d
htobe32	utils/ut_misc.h	/^# undef htobe32$/;"	d
htobe64	utils/ut_misc.h	/^#  define htobe64(/;"	d
htobe64	utils/ut_misc.h	/^# undef htobe64$/;"	d
htole16	utils/ut_misc.h	/^#  define htole16(/;"	d
htole32	utils/ut_misc.h	/^#  define htole32(/;"	d
htole64	utils/ut_misc.h	/^#  define htole64(/;"	d
http_body_is_final	utils/http_parser.c	/^http_body_is_final(const struct http_parser *parser) {$/;"	f
http_cb	utils/http_parser.h	/^typedef int (*http_cb) (http_parser*);$/;"	t
http_data_cb	utils/http_parser.h	/^typedef int (*http_data_cb) (http_parser*, const char *at, size_t length);$/;"	t
http_errno	utils/http_parser.h	/^  unsigned int http_errno : 7;$/;"	m	struct:http_parser
http_errno	utils/http_parser.h	/^enum http_errno {$/;"	g
http_errno_description	utils/http_parser.c	/^http_errno_description(enum http_errno err) {$/;"	f
http_errno_name	utils/http_parser.c	/^http_errno_name(enum http_errno err) {$/;"	f
http_get_remote_ip	utils/ut_http.c	/^const char *http_get_remote_ip(nw_ses *ses, http_request_t *request)$/;"	f
http_host_state	utils/http_parser.c	/^enum http_host_state$/;"	g	file:
http_major	utils/http_parser.h	/^  unsigned short http_major;$/;"	m	struct:http_parser
http_message_needs_eof	utils/http_parser.c	/^http_message_needs_eof (const http_parser *parser)$/;"	f
http_method	utils/http_parser.h	/^enum http_method$/;"	g
http_method_str	utils/http_parser.c	/^http_method_str (enum http_method m)$/;"	f
http_minor	utils/http_parser.h	/^  unsigned short http_minor;$/;"	m	struct:http_parser
http_params_release	utils/ut_http.c	/^void http_params_release(http_params_t *obj)$/;"	f
http_params_t	utils/ut_http.h	/^typedef struct http_params_t {$/;"	s
http_params_t	utils/ut_http.h	/^} http_params_t;$/;"	t	typeref:struct:http_params_t
http_parse_host	utils/http_parser.c	/^http_parse_host(const char * buf, struct http_parser_url *u, int found_at) {$/;"	f	file:
http_parse_host_char	utils/http_parser.c	/^http_parse_host_char(enum http_host_state s, const char ch) {$/;"	f	file:
http_parse_url_params	utils/ut_http.c	/^http_params_t *http_parse_url_params(const char *url)$/;"	f
http_parser	utils/http_parser.h	/^struct http_parser {$/;"	s
http_parser	utils/http_parser.h	/^typedef struct http_parser http_parser;$/;"	t	typeref:struct:http_parser
http_parser_execute	utils/http_parser.c	/^size_t http_parser_execute (http_parser *parser,$/;"	f
http_parser_h	utils/http_parser.h	/^#define http_parser_h$/;"	d
http_parser_init	utils/http_parser.c	/^http_parser_init (http_parser *parser, enum http_parser_type t)$/;"	f
http_parser_parse_url	utils/http_parser.c	/^http_parser_parse_url(const char *buf, size_t buflen, int is_connect,$/;"	f
http_parser_pause	utils/http_parser.c	/^http_parser_pause(http_parser *parser, int paused) {$/;"	f
http_parser_settings	utils/http_parser.h	/^struct http_parser_settings {$/;"	s
http_parser_settings	utils/http_parser.h	/^typedef struct http_parser_settings http_parser_settings;$/;"	t	typeref:struct:http_parser_settings
http_parser_settings_init	utils/http_parser.c	/^http_parser_settings_init(http_parser_settings *settings)$/;"	f
http_parser_type	utils/http_parser.h	/^enum http_parser_type { HTTP_REQUEST, HTTP_RESPONSE, HTTP_BOTH };$/;"	g
http_parser_url	utils/http_parser.h	/^struct http_parser_url {$/;"	s
http_parser_url_fields	utils/http_parser.h	/^enum http_parser_url_fields$/;"	g
http_parser_url_init	utils/http_parser.c	/^http_parser_url_init(struct http_parser_url *u) {$/;"	f
http_parser_version	utils/http_parser.c	/^http_parser_version(void) {$/;"	f
http_request	accessws/aw_http.c	/^static json_t *http_request(const char *method, json_t *params)$/;"	f	file:
http_request	accessws/aw_http.c	/^struct http_request {$/;"	s	file:
http_request_callback	utils/ut_http_svr.h	/^typedef int (*http_request_callback)(nw_ses *ses, http_request_t *request);$/;"	t
http_request_get_header	utils/ut_http.c	/^const char *http_request_get_header(http_request_t *request, const char *field)$/;"	f
http_request_new	utils/ut_http.c	/^http_request_t *http_request_new(void)$/;"	f
http_request_release	utils/ut_http.c	/^void http_request_release(http_request_t *request)$/;"	f
http_request_set_header	utils/ut_http.c	/^int http_request_set_header(http_request_t *request, char *field, char *value)$/;"	f
http_request_t	utils/ut_http.h	/^typedef struct http_request_t {$/;"	s
http_request_t	utils/ut_http.h	/^} http_request_t;$/;"	t	typeref:struct:http_request_t
http_response_encode	utils/ut_http.c	/^sds http_response_encode(http_response_t *response)$/;"	f
http_response_get_header	utils/ut_http.c	/^const char *http_response_get_header(http_response_t *response, const char *field)$/;"	f
http_response_new	utils/ut_http.c	/^http_response_t *http_response_new(void)$/;"	f
http_response_release	utils/ut_http.c	/^void http_response_release(http_response_t *response)$/;"	f
http_response_set_header	utils/ut_http.c	/^int http_response_set_header(http_response_t *response, char *field, char *value)$/;"	f
http_response_t	utils/ut_http.h	/^typedef struct http_response_t {$/;"	s
http_response_t	utils/ut_http.h	/^} http_response_t;$/;"	t	typeref:struct:http_response_t
http_should_keep_alive	utils/http_parser.c	/^http_should_keep_alive (const http_parser *parser)$/;"	f
http_status	utils/http_parser.h	/^enum http_status$/;"	g
http_strerror_tab	utils/http_parser.c	/^} http_strerror_tab[] = {$/;"	v	typeref:struct:__anon9	file:
http_svr	utils/ut_http_svr.h	/^typedef struct http_svr {$/;"	s
http_svr	utils/ut_http_svr.h	/^} http_svr;$/;"	t	typeref:struct:http_svr
http_svr_cfg	utils/ut_http_svr.h	/^typedef struct http_svr_cfg {$/;"	s
http_svr_cfg	utils/ut_http_svr.h	/^} http_svr_cfg;$/;"	t	typeref:struct:http_svr_cfg
http_svr_close_clt	utils/ut_http_svr.c	/^void http_svr_close_clt(http_svr *svr, nw_ses *ses)$/;"	f
http_svr_create	utils/ut_http_svr.c	/^http_svr *http_svr_create(http_svr_cfg *cfg, http_request_callback on_request)$/;"	f
http_svr_from_ses	utils/ut_http_svr.c	/^http_svr *http_svr_from_ses(nw_ses *ses)$/;"	f
http_svr_release	utils/ut_http_svr.c	/^void http_svr_release(http_svr *svr)$/;"	f
http_svr_start	utils/ut_http_svr.c	/^int http_svr_start(http_svr *svr)$/;"	f
http_svr_stop	utils/ut_http_svr.c	/^int http_svr_stop(http_svr *svr)$/;"	f
human_number	utils/ut_misc.c	/^char *human_number(double num)$/;"	f
id	accessrest/ar_ticker.c	/^    int     id;$/;"	m	struct:market_val	file:
id	accessws/aw_state.c	/^    int     id;$/;"	m	struct:market_val	file:
id	matchengine/me_market.h	/^    uint64_t        id;$/;"	m	struct:order_t
id	matchengine/me_market.h	/^    uint64_t        id;$/;"	m	struct:stop_t
id	matchengine/me_operlog.c	/^    uint64_t id;$/;"	m	struct:operlog	file:
id	network/nw_job.h	/^    uint32_t id;$/;"	m	struct:nw_job_entry
id	network/nw_ses.h	/^    uint64_t id;$/;"	m	struct:nw_ses
id	network/nw_state.h	/^    uint32_t id;$/;"	m	struct:nw_state_entry
id	utils/ut_dict.h	/^    uint64_t id;$/;"	m	struct:dict_entry
id_clear	utils/ut_dict.h	/^    uint64_t id_clear;$/;"	m	struct:dict_t
id_start	network/nw_state.h	/^    uint32_t id_start;$/;"	m	struct:nw_state
id_start	network/nw_svr.h	/^    uint64_t id_start;$/;"	m	struct:nw_svr
id_start	utils/ut_dict.h	/^    uint64_t id_start;$/;"	m	struct:dict_t
idx	depends/hiredis/read.h	/^    int idx; \/* index in parent (array) object *\/$/;"	m	struct:redisReadTask
in	network/nw_sock.h	/^        struct sockaddr_in  in;$/;"	m	union:nw_addr_t::__anon2	typeref:struct:nw_addr_t::__anon2::sockaddr_in
in6	network/nw_sock.h	/^        struct sockaddr_in6 in6;$/;"	m	union:nw_addr_t::__anon2	typeref:struct:nw_addr_t::__anon2::sockaddr_in6
index	depends/hiredis/dict.h	/^    int index;$/;"	m	struct:dictIterator
index	network/nw_state.h	/^    int64_t index;$/;"	m	struct:nw_state_iterator
index	utils/http_parser.h	/^  unsigned int index : 7;        \/* index into current matcher *\/$/;"	m	struct:http_parser
index	utils/ut_dict.h	/^    int64_t index;$/;"	m	struct:dict_iterator
indicator	utils/ut_signal.c	/^    int *indicator;$/;"	m	struct:signal	file:
inetv4_list	utils/ut_config.h	/^typedef struct inetv4_list {$/;"	s
inetv4_list	utils/ut_config.h	/^} inetv4_list;$/;"	t	typeref:struct:inetv4_list
info	accessws/aw_auth.c	/^    struct clt_info *info;$/;"	m	struct:state_data	typeref:struct:state_data::clt_info	file:
info	accessws/aw_sign.c	/^    struct clt_info *info;$/;"	m	struct:state_data	typeref:struct:state_data::clt_info	file:
init_access	marketprice/mp_access.c	/^int init_access(void)$/;"	f
init_asset	accessws/aw_asset.c	/^int init_asset(void)$/;"	f
init_auth	accessws/aw_auth.c	/^int init_auth(void)$/;"	f
init_backend	accessrest/ar_server.c	/^static int init_backend(void)$/;"	f	file:
init_backend	accessws/aw_server.c	/^static int init_backend(void)$/;"	f	file:
init_balance	matchengine/me_balance.c	/^int init_balance()$/;"	f
init_cli	matchengine/me_cli.c	/^int init_cli(void)$/;"	f
init_clt	monitoragent/ma_server.c	/^int init_clt(void)$/;"	f
init_config	accesshttp/ah_config.c	/^int init_config(const char *path)$/;"	f
init_config	accessrest/ar_config.c	/^int init_config(const char *path)$/;"	f
init_config	accessws/aw_config.c	/^int init_config(const char *path)$/;"	f
init_config	marketprice/mp_config.c	/^int init_config(const char *path)$/;"	f
init_config	matchengine/me_config.c	/^int init_config(const char *path)$/;"	f
init_config	monitoragent/ma_config.c	/^int init_config(const char *path)$/;"	f
init_config	monitorcenter/mc_config.c	/^int init_config(const char *path)$/;"	f
init_config	readhistory/rh_config.c	/^int init_config(const char *path)$/;"	f
init_deals	accessws/aw_deals.c	/^int init_deals(void)$/;"	f
init_depth	accessws/aw_depth.c	/^int init_depth(void)$/;"	f
init_dict	matchengine/me_balance.c	/^static int init_dict(void)$/;"	f	file:
init_dict	monitoragent/ma_server.c	/^int init_dict(void)$/;"	f
init_dict	monitorcenter/mc_server.c	/^static int init_dict(void)$/;"	f	file:
init_flag	utils/ut_alert.c	/^static int init_flag;$/;"	v	file:
init_from_db	matchengine/me_persist.c	/^int init_from_db(void)$/;"	f
init_history	matchengine/me_history.c	/^int init_history(void)$/;"	f
init_http	accessws/aw_http.c	/^int init_http(void)$/;"	f
init_instance	logwriter/lw_server.c	/^static int init_instance(struct instance_cfg *cfg, struct instance *ins)$/;"	f	file:
init_kline	accessws/aw_kline.c	/^int init_kline(void)$/;"	f
init_listener	accesshttp/ah_listener.c	/^int init_listener(void)$/;"	f
init_listener	accessrest/ar_listener.c	/^int init_listener(void)$/;"	f
init_listener	accessws/aw_listener.c	/^int init_listener(void)$/;"	f
init_listener_clt	accesshttp/ah_server.c	/^static int init_listener_clt(void)$/;"	f	file:
init_listener_clt	accessrest/ar_server.c	/^static int init_listener_clt(void)$/;"	f	file:
init_listener_clt	accessws/aw_server.c	/^static int init_listener_clt(void)$/;"	f	file:
init_listener_svr	accesshttp/ah_listener.c	/^static int init_listener_svr(void)$/;"	f	file:
init_listener_svr	accessrest/ar_listener.c	/^static int init_listener_svr(void)$/;"	f	file:
init_listener_svr	accessws/aw_listener.c	/^static int init_listener_svr(void)$/;"	f	file:
init_log	accesshttp/ah_main.c	/^static int init_log(void)$/;"	f	file:
init_log	accessrest/ar_main.c	/^static int init_log(void)$/;"	f	file:
init_log	accessws/aw_main.c	/^static int init_log(void)$/;"	f	file:
init_log	alertcenter/ac_main.c	/^static int init_log(void)$/;"	f	file:
init_log	marketprice/mp_main.c	/^static int init_log(void)$/;"	f	file:
init_log	matchengine/me_main.c	/^static int init_log(void)$/;"	f	file:
init_log	monitoragent/ma_main.c	/^static int init_log(void)$/;"	f	file:
init_log	monitorcenter/mc_main.c	/^static int init_log(void)$/;"	f	file:
init_log	readhistory/rh_main.c	/^static int init_log(void)$/;"	f	file:
init_market	marketprice/mp_message.c	/^static int init_market(void)$/;"	f	file:
init_market	matchengine/me_market.c	/^int init_market(void)$/;"	f
init_message	accessws/aw_message.c	/^int init_message(void)$/;"	f
init_message	marketprice/mp_message.c	/^int init_message(int id)$/;"	f
init_message	matchengine/me_message.c	/^int init_message(void)$/;"	f
init_methods_handler	accesshttp/ah_server.c	/^static int init_methods_handler(void)$/;"	f	file:
init_mpd	utils/ut_decimal.c	/^int init_mpd(void)$/;"	f
init_operlog	matchengine/me_operlog.c	/^int init_operlog(void)$/;"	f
init_order	accessws/aw_order.c	/^int init_order(void)$/;"	f
init_persist	matchengine/me_persist.c	/^int init_persist(void)$/;"	f
init_process	accesshttp/ah_main.c	/^static int init_process(void)$/;"	f	file:
init_process	accessrest/ar_main.c	/^static int init_process(void)$/;"	f	file:
init_process	accessws/aw_main.c	/^static int init_process(void)$/;"	f	file:
init_process	alertcenter/ac_main.c	/^static int init_process(void)$/;"	f	file:
init_process	marketprice/mp_main.c	/^static int init_process(void)$/;"	f	file:
init_process	matchengine/me_main.c	/^static int init_process(void)$/;"	f	file:
init_process	monitoragent/ma_main.c	/^static int init_process(void)$/;"	f	file:
init_process	monitorcenter/mc_main.c	/^static int init_process(void)$/;"	f	file:
init_process	readhistory/rh_main.c	/^static int init_process(void)$/;"	f	file:
init_redis	alertcenter/ac_server.c	/^static int init_redis(void)$/;"	f	file:
init_server	accesshttp/ah_server.c	/^int init_server(void)$/;"	f
init_server	accessrest/ar_server.c	/^int init_server(void)$/;"	f
init_server	accessws/aw_server.c	/^int init_server(void)$/;"	f
init_server	alertcenter/ac_server.c	/^int init_server(void)$/;"	f
init_server	logwriter/lw_server.c	/^int init_server(void)$/;"	f
init_server	marketprice/mp_server.c	/^int init_server(int worker_id)$/;"	f
init_server	matchengine/me_server.c	/^int init_server(void)$/;"	f
init_server	monitoragent/ma_server.c	/^int init_server(void)$/;"	f
init_server	monitorcenter/mc_server.c	/^int init_server(void)$/;"	f
init_server	readhistory/rh_server.c	/^int init_server(void)$/;"	f
init_sign	accessws/aw_sign.c	/^int init_sign(void)$/;"	f
init_signal	utils/ut_signal.c	/^int init_signal(void)$/;"	f
init_state	accessws/aw_state.c	/^int init_state(void)$/;"	f
init_svr	accessrest/ar_server.c	/^static int init_svr(void)$/;"	f	file:
init_svr	accessws/aw_server.c	/^static int init_svr(void)$/;"	f	file:
init_svr	alertcenter/ac_server.c	/^static int init_svr(void)$/;"	f	file:
init_svr	monitoragent/ma_server.c	/^int init_svr(void)$/;"	f
init_ticker	accessrest/ar_ticker.c	/^int init_ticker(void)$/;"	f
init_trade	matchengine/me_trade.c	/^int init_trade(void)$/;"	f
init_update	matchengine/me_update.c	/^int init_update(void)$/;"	f
init_worker_svr	accesshttp/ah_listener.c	/^static int init_worker_svr(void)$/;"	f	file:
init_worker_svr	accessrest/ar_listener.c	/^static int init_worker_svr(void)$/;"	f	file:
init_worker_svr	accessws/aw_listener.c	/^static int init_worker_svr(void)$/;"	f	file:
initialized	network/nw_evt.c	/^static int initialized;$/;"	v	file:
inline	depends/hiredis/win32.h	/^#define inline /;"	d
inner_dlog	utils/ut_log.c	/^static int inner_dlog(dlog_t *log, const char *fmt, va_list ap) $/;"	f	file:
inner_dlog_check	utils/ut_log.c	/^static inline void inner_dlog_check(dlog_t *log, struct timeval *now)$/;"	f	file:
inner_shift_log	utils/ut_log.c	/^static int inner_shift_log(dlog_t *log, struct timeval *now)$/;"	f	file:
inner_unlink_expire	utils/ut_log.c	/^static int inner_unlink_expire(dlog_t *log, time_t expire_time)$/;"	f	file:
instance	logwriter/lw_server.c	/^struct instance {$/;"	s	file:
instance_cfg	logwriter/lw_config.h	/^struct instance_cfg {$/;"	s
instance_count	logwriter/lw_config.h	/^    int                 instance_count;$/;"	m	struct:settings
instances	logwriter/lw_config.h	/^    struct instance_cfg *instances;$/;"	m	struct:settings	typeref:struct:settings::instance_cfg
instances	logwriter/lw_server.c	/^static struct instance *instances;$/;"	v	typeref:struct:instance	file:
int16_t	utils/http_parser.h	/^typedef __int16 int16_t;$/;"	t
int32_t	utils/http_parser.h	/^typedef __int32 int32_t;$/;"	t
int64_t	utils/http_parser.h	/^typedef __int64 int64_t;$/;"	t
int8_t	utils/http_parser.h	/^typedef __int8 int8_t;$/;"	t
integer	depends/hiredis/hiredis.h	/^    long long integer; \/* The integer when type is REDIS_REPLY_INTEGER *\/$/;"	m	struct:redisReply
interval	accessws/aw_depth.c	/^    char interval[INTERVAL_MAX_LEN];$/;"	m	struct:depth_key	file:
interval	accessws/aw_kline.c	/^    int interval;$/;"	m	struct:kline_key	file:
interval	network/nw_timer.h	/^    double interval;$/;"	m	struct:nw_timer
interval_type	marketprice/mp_message.c	/^    int interval_type;$/;"	m	struct:update_key	file:
invalid	depends/hiredis/async.h	/^        redisCallbackList invalid;$/;"	m	struct:redisAsyncContext::__anon18
is_good_host	monitoragent/ma_server.c	/^static bool is_good_host(const char *value)$/;"	f	file:
is_good_host	monitorcenter/mc_server.c	/^static bool is_good_host(const char *value)$/;"	f	file:
is_good_interval	accessws/aw_depth.c	/^static bool is_good_interval(const char *interval)$/;"	f	file:
is_good_key	monitoragent/ma_server.c	/^static bool is_good_key(const char *value)$/;"	f	file:
is_good_key	monitorcenter/mc_server.c	/^static bool is_good_key(const char *value)$/;"	f	file:
is_good_limit	accessrest/ar_server.c	/^static bool is_good_limit(int limit)$/;"	f	file:
is_good_limit	accessws/aw_depth.c	/^static bool is_good_limit(int limit)$/;"	f	file:
is_good_merge	accessrest/ar_server.c	/^static bool is_good_merge(const char *merge_str)$/;"	f	file:
is_good_opcode	utils/ut_ws_svr.c	/^static bool is_good_opcode(uint8_t opcode)$/;"	f	file:
is_good_origin	utils/ut_ws_svr.c	/^static bool is_good_origin(const char *origin, const char *require)$/;"	f	file:
is_good_protocol	utils/ut_ws_svr.c	/^static bool is_good_protocol(const char *protocol_list, const char *protocol)$/;"	f	file:
is_good_scope	monitoragent/ma_server.c	/^static bool is_good_scope(const char *value)$/;"	f	file:
is_good_scope	monitorcenter/mc_server.c	/^static bool is_good_scope(const char *value)$/;"	f	file:
is_hex_digit	depends/hiredis/sds.c	/^int is_hex_digit(char c) {$/;"	f
is_hex_digit	utils/ut_sds.c	/^int is_hex_digit(char c) {$/;"	f
is_history_block	matchengine/me_history.c	/^bool is_history_block(void)$/;"	f
is_message_block	matchengine/me_message.c	/^bool is_message_block(void)$/;"	f
is_operlog_block	matchengine/me_operlog.c	/^bool is_operlog_block(void)$/;"	f
is_remote_log	utils/ut_log.c	/^static int is_remote_log(const char *base_name, struct sockaddr_in *addr)$/;"	f	file:
is_service_availablce	matchengine/me_server.c	/^static bool is_service_availablce(void)$/;"	f	file:
is_table_exists	utils/ut_mysql.c	/^bool is_table_exists(MYSQL *conn, const char *table)$/;"	f
job	matchengine/me_history.c	/^static nw_job *job;$/;"	v	file:
job	matchengine/me_operlog.c	/^static nw_job *job;$/;"	v	file:
job	network/nw_job.c	/^    nw_job *job;$/;"	m	struct:thread_arg	file:
job	readhistory/rh_server.c	/^static nw_job *job;$/;"	v	file:
job_context	accessws/aw_auth.c	/^static nw_job *job_context;$/;"	v	file:
job_context	accessws/aw_http.c	/^static nw_job *job_context;$/;"	v	file:
job_context	accessws/aw_sign.c	/^static nw_job *job_context;$/;"	v	file:
job_reply	readhistory/rh_server.c	/^struct job_reply {$/;"	s	file:
job_request	readhistory/rh_server.c	/^struct job_request {$/;"	s	file:
json	test/accesshttp/auth.py	/^import json$/;"	i
json	test/accesshttp/call.py	/^import json$/;"	i
json	test/monitoragent/test.py	/^import json$/;"	i
json_array_append_new_mpd	utils/ut_decimal.c	/^int json_array_append_new_mpd(json_t *obj, mpd_t *value)$/;"	f
json_object_set_new_mpd	utils/ut_decimal.c	/^int json_object_set_new_mpd(json_t *obj, const char *key, mpd_t *value)$/;"	f
kafka_balances	accessws/aw_message.c	/^static kafka_consumer_t *kafka_balances;$/;"	v	file:
kafka_consumer_cfg	utils/ut_kafka.h	/^typedef struct kafka_consumer_cfg {$/;"	s
kafka_consumer_cfg	utils/ut_kafka.h	/^} kafka_consumer_cfg;$/;"	t	typeref:struct:kafka_consumer_cfg
kafka_consumer_create	utils/ut_kafka.c	/^kafka_consumer_t *kafka_consumer_create(kafka_consumer_cfg *cfg, kafka_message_callback callback)$/;"	f
kafka_consumer_release	utils/ut_kafka.c	/^void kafka_consumer_release(kafka_consumer_t *consumer)$/;"	f
kafka_consumer_t	utils/ut_kafka.h	/^typedef struct kafka_consumer_t {$/;"	s
kafka_consumer_t	utils/ut_kafka.h	/^} kafka_consumer_t;$/;"	t	typeref:struct:kafka_consumer_t
kafka_deals	accessws/aw_message.c	/^static kafka_consumer_t *kafka_deals;$/;"	v	file:
kafka_message_callback	utils/ut_kafka.h	/^typedef void (*kafka_message_callback)(sds message, int64_t offset);$/;"	t
kafka_orders	accessws/aw_message.c	/^static kafka_consumer_t *kafka_orders;$/;"	v	file:
kafka_stops	accessws/aw_message.c	/^static kafka_consumer_t *kafka_stops;$/;"	v	file:
keep	utils/ut_config.h	/^    int     keep;$/;"	m	struct:log_cfg
keep_alive	utils/ut_http_svr.h	/^    int keep_alive;$/;"	m	struct:http_svr
keep_alive	utils/ut_http_svr.h	/^    int keep_alive;$/;"	m	struct:http_svr_cfg
keep_alive	utils/ut_ws_svr.h	/^    int keep_alive;$/;"	m	struct:ws_svr
keep_alive	utils/ut_ws_svr.h	/^    int keep_alive;$/;"	m	struct:ws_svr_cfg
keep_time	utils/ut_log.h	/^    int                 keep_time;$/;"	m	struct:__anon7
key	accessws/aw_depth.c	/^    struct depth_key key;$/;"	m	struct:state_data	typeref:struct:state_data::depth_key	file:
key	accessws/aw_kline.c	/^    struct kline_key key;$/;"	m	struct:state_data	typeref:struct:state_data::kline_key	file:
key	depends/hiredis/dict.h	/^    void *key;$/;"	m	struct:dictEntry
key	monitoragent/ma_server.c	/^    char key[160];$/;"	m	struct:monitor_key	file:
key	monitorcenter/mc_server.c	/^    char key[160];$/;"	m	struct:monitor_key	file:
key	utils/ut_dict.h	/^    void *key;$/;"	m	struct:dict_entry
keyCompare	depends/hiredis/dict.h	/^    int (*keyCompare)(void *privdata, const void *key1, const void *key2);$/;"	m	struct:dictType
keyDestructor	depends/hiredis/dict.h	/^    void (*keyDestructor)(void *privdata, void *key);$/;"	m	struct:dictType
keyDup	depends/hiredis/dict.h	/^    void *(*keyDup)(void *privdata, const void *key);$/;"	m	struct:dictType
key_compare	utils/ut_dict.h	/^    int (*key_compare)(const void *key1, const void *key2);$/;"	m	struct:dict_types
key_destructor	utils/ut_dict.h	/^    void (*key_destructor)(void *key);$/;"	m	struct:dict_types
key_dup	utils/ut_dict.h	/^    void *(*key_dup)(const void *key);$/;"	m	struct:dict_types
kline_compare	accessws/aw_kline.c	/^static int kline_compare(json_t *first, json_t *second)$/;"	f	file:
kline_from_str	marketprice/mp_kline.c	/^struct kline_info *kline_from_str(char *str)$/;"	f
kline_info	marketprice/mp_kline.h	/^struct kline_info {$/;"	s
kline_info_free	marketprice/mp_kline.c	/^void kline_info_free(struct kline_info *info)$/;"	f
kline_info_merge	marketprice/mp_kline.c	/^void kline_info_merge(struct kline_info *info, struct kline_info *update)$/;"	f
kline_info_new	marketprice/mp_kline.c	/^struct kline_info *kline_info_new(mpd_t *open)$/;"	f
kline_info_update	marketprice/mp_kline.c	/^void kline_info_update(struct kline_info *info, mpd_t *price, mpd_t *amount)$/;"	f
kline_interval	accessws/aw_config.h	/^    double              kline_interval;$/;"	m	struct:settings
kline_key	accessws/aw_kline.c	/^struct kline_key {$/;"	s	file:
kline_max	marketprice/mp_config.h	/^    int                 kline_max;$/;"	m	struct:settings
kline_query	marketprice/mp_message.c	/^static struct kline_info *kline_query(dict_t *dict, time_t timestamp)$/;"	f	file:
kline_subscribe	accessws/aw_kline.c	/^int kline_subscribe(nw_ses *ses, const char *market, int interval)$/;"	f
kline_subscribe_number	accessws/aw_kline.c	/^size_t kline_subscribe_number(void)$/;"	f
kline_to_str	marketprice/mp_kline.c	/^char *kline_to_str(struct kline_info *info)$/;"	f
kline_unsubscribe	accessws/aw_kline.c	/^int kline_unsubscribe(nw_ses *ses)$/;"	f
kline_val	accessws/aw_kline.c	/^struct kline_val {$/;"	s	file:
last	accessrest/ar_ticker.c	/^    json_t *last;$/;"	m	struct:market_val	file:
last	accessws/aw_depth.c	/^    json_t *last;$/;"	m	struct:depth_val	file:
last	accessws/aw_kline.c	/^    json_t *last;$/;"	m	struct:kline_val	file:
last	accessws/aw_state.c	/^    json_t *last;$/;"	m	struct:market_val	file:
last	marketprice/mp_message.c	/^    mpd_t  *last;$/;"	m	struct:market_info	file:
last	matchengine/me_market.h	/^    mpd_t           *last;$/;"	m	struct:market_t
last_activity	utils/ut_http_svr.c	/^    double  last_activity;$/;"	m	struct:clt_info	file:
last_activity	utils/ut_ws_svr.c	/^    double      last_activity;$/;"	m	struct:clt_info	file:
last_clean	accessws/aw_depth.c	/^    time_t  last_clean;$/;"	m	struct:depth_val	file:
last_flush	marketprice/mp_message.c	/^static double   last_flush;$/;"	v	file:
last_heartbeat	utils/ut_rpc_clt.h	/^    double last_heartbeat;$/;"	m	struct:rpc_clt
last_heartbeat	utils/ut_rpc_svr.c	/^    double last_heartbeat;$/;"	m	struct:clt_info	file:
last_id	accessws/aw_deals.c	/^    uint64_t last_id;$/;"	m	struct:market_val	file:
last_offset	marketprice/mp_message.c	/^static int64_t  last_offset;$/;"	v	file:
last_shift	utils/ut_log.h	/^    time_t              last_shift;$/;"	m	struct:__anon7
last_slice_time	matchengine/me_persist.c	/^static time_t last_slice_time;$/;"	v	file:
last_unlink	utils/ut_log.h	/^    time_t              last_unlink;$/;"	m	struct:__anon7
last_write	utils/ut_log.h	/^    struct timeval      last_write;$/;"	m	struct:__anon7	typeref:struct:__anon7::timeval
le16toh	utils/ut_misc.h	/^#  define le16toh(/;"	d
le32toh	utils/ut_misc.h	/^#  define le32toh(/;"	d
le64toh	utils/ut_misc.h	/^#  define le64toh(/;"	d
left	matchengine/me_market.h	/^    mpd_t           *left;$/;"	m	struct:order_t
len	depends/hiredis/hiredis.h	/^    int len; \/* Length of string *\/$/;"	m	struct:redisReply
len	depends/hiredis/read.h	/^    size_t len; \/* Buffer length *\/$/;"	m	struct:redisReader
len	depends/hiredis/sds.h	/^    int len;$/;"	m	struct:sdshdr
len	utils/http_parser.h	/^    uint16_t len;               \/* Length of run in buffer *\/$/;"	m	struct:http_parser_url::__anon5
len	utils/ut_list.h	/^    unsigned long len;$/;"	m	struct:list_t
len	utils/ut_sds.h	/^    int len;$/;"	m	struct:sdshdr
len	utils/ut_skiplist.h	/^    unsigned long len;$/;"	m	struct:skiplist_t
lenient_http_headers	utils/http_parser.h	/^  unsigned int lenient_http_headers : 1;$/;"	m	struct:http_parser
level	utils/ut_skiplist.h	/^    int level;$/;"	m	struct:skiplist_t
libev_on_accept_evt	network/nw_ses.c	/^static void libev_on_accept_evt(struct ev_loop *loop, ev_io *watcher, int events)$/;"	f	file:
libev_on_connect_evt	network/nw_ses.c	/^static void libev_on_connect_evt(struct ev_loop *loop, ev_io *watcher, int events)$/;"	f	file:
libev_on_read_write_evt	network/nw_ses.c	/^static void libev_on_read_write_evt(struct ev_loop *loop, ev_io *watcher, int events)$/;"	f	file:
limit	accessrest/ar_config.h	/^    int     *limit;$/;"	m	struct:depth_limit_cfg
limit	accessrest/ar_config.h	/^    mpd_t   **limit;$/;"	m	struct:depth_merge_cfg
limit	accessws/aw_config.h	/^    int     *limit;$/;"	m	struct:depth_limit_cfg
limit	accessws/aw_config.h	/^    mpd_t   **limit;$/;"	m	struct:depth_merge_cfg
limit	accessws/aw_depth.c	/^    uint32_t limit;$/;"	m	struct:depth_key	file:
limit	network/nw_buf.h	/^    uint32_t limit;$/;"	m	struct:nw_buf_list
limit	utils/ut_kafka.h	/^    int     limit;$/;"	m	struct:kafka_consumer_cfg
limit	utils/ut_kafka.h	/^    int limit;$/;"	m	struct:kafka_consumer_t
list	matchengine/me_operlog.c	/^static list_t *list;$/;"	v	file:
list	utils/ut_kafka.h	/^    list_t *list;$/;"	m	struct:kafka_consumer_t
list	utils/ut_redis.h	/^    redis_sentinel_node *list;$/;"	m	struct:redis_sentinel_t
list_add_node_head	utils/ut_list.c	/^list_t *list_add_node_head(list_t *list, void *value)$/;"	f
list_add_node_tail	utils/ut_list.c	/^list_t *list_add_node_tail(list_t *list, void *value)$/;"	f
list_balances	matchengine/me_message.c	/^static list_t *list_balances;$/;"	v	file:
list_clear	utils/ut_list.c	/^void list_clear(list_t *list)$/;"	f
list_create	utils/ut_list.c	/^list_t *list_create(list_type *type)$/;"	f
list_create_node	utils/ut_list.c	/^static list_node *list_create_node(list_t *list, void *value)$/;"	f	file:
list_deals	matchengine/me_message.c	/^static list_t *list_deals;$/;"	v	file:
list_deals_free	marketprice/mp_message.c	/^static void list_deals_free(void *val)$/;"	f	file:
list_deals_json_free	marketprice/mp_message.c	/^static void list_deals_json_free(void *val)$/;"	f	file:
list_del	utils/ut_list.c	/^void list_del(list_t *list, list_node *node)$/;"	f
list_dup	utils/ut_list.c	/^list_t *list_dup(list_t *orig)$/;"	f
list_find	utils/ut_list.c	/^list_node *list_find(list_t *list, void *value)$/;"	f
list_free	accessws/aw_deals.c	/^static void list_free(void *value)$/;"	f	file:
list_get_iterator	utils/ut_list.c	/^list_iter *list_get_iterator(list_t *list, int direction)$/;"	f
list_head	utils/ut_list.h	/^# define list_head(/;"	d
list_index	utils/ut_list.c	/^list_node *list_index(list_t *list, long index)$/;"	f
list_insert_node	utils/ut_list.c	/^list_t *list_insert_node(list_t *list, list_node *pos, void *value, int before)$/;"	f
list_iter	utils/ut_list.h	/^typedef struct list_iter {$/;"	s
list_iter	utils/ut_list.h	/^} list_iter;$/;"	t	typeref:struct:list_iter
list_len	utils/ut_list.h	/^# define list_len(/;"	d
list_market_dup	accessws/aw_state.c	/^static void *list_market_dup(void *val)$/;"	f	file:
list_market_free	accessws/aw_state.c	/^static void list_market_free(void *val)$/;"	f	file:
list_next	utils/ut_list.c	/^list_node *list_next(list_iter *iter)$/;"	f
list_next_node	utils/ut_list.h	/^# define list_next_node(/;"	d
list_node	utils/ut_list.h	/^typedef struct list_node {$/;"	s
list_node	utils/ut_list.h	/^} list_node;$/;"	t	typeref:struct:list_node
list_node_compare	accessws/aw_asset.c	/^static int list_node_compare(const void *value1, const void *value2)$/;"	f	file:
list_node_compare	accessws/aw_order.c	/^static int list_node_compare(const void *value1, const void *value2)$/;"	f	file:
list_node_dup	accessws/aw_asset.c	/^static void *list_node_dup(void *value)$/;"	f	file:
list_node_dup	accessws/aw_order.c	/^static void *list_node_dup(void *value)$/;"	f	file:
list_node_free	accessws/aw_asset.c	/^static void list_node_free(void *value)$/;"	f	file:
list_node_free	accessws/aw_order.c	/^static void list_node_free(void *value)$/;"	f	file:
list_node_value	utils/ut_list.h	/^# define list_node_value(/;"	d
list_orders	matchengine/me_message.c	/^static list_t *list_orders;$/;"	v	file:
list_prev_node	utils/ut_list.h	/^# define list_prev_node(/;"	d
list_release	utils/ut_list.c	/^void list_release(list_t *list)$/;"	f
list_release_iterator	utils/ut_list.c	/^void list_release_iterator(list_iter *iter)$/;"	f
list_rewind_head	utils/ut_list.c	/^void list_rewind_head(list_t *list, list_iter *iter)$/;"	f
list_rewind_tail	utils/ut_list.c	/^void list_rewind_tail(list_t *list, list_iter *iter)$/;"	f
list_rotate	utils/ut_list.c	/^void list_rotate(list_t *list)$/;"	f
list_stops	matchengine/me_message.c	/^static list_t *list_stops;$/;"	v	file:
list_t	utils/ut_list.h	/^typedef struct list_t {$/;"	s
list_t	utils/ut_list.h	/^} list_t;$/;"	t	typeref:struct:list_t
list_tail	utils/ut_list.h	/^# define list_tail(/;"	d
list_type	utils/ut_list.h	/^typedef struct list_type {$/;"	s
list_type	utils/ut_list.h	/^} list_type;$/;"	t	typeref:struct:list_type
listener	accesshttp/ah_server.c	/^static rpc_clt *listener;$/;"	v	file:
listener	accessrest/ar_server.c	/^static rpc_clt *listener;$/;"	v	file:
listener	accessws/aw_server.c	/^static rpc_clt *listener;$/;"	v	file:
listener_decode_pkg	accesshttp/ah_listener.c	/^static int listener_decode_pkg(nw_ses *ses, void *data, size_t max)$/;"	f	file:
listener_decode_pkg	accessrest/ar_listener.c	/^static int listener_decode_pkg(nw_ses *ses, void *data, size_t max)$/;"	f	file:
listener_decode_pkg	accessws/aw_listener.c	/^static int listener_decode_pkg(nw_ses *ses, void *data, size_t max)$/;"	f	file:
listener_on_accept	accesshttp/ah_listener.c	/^static int listener_on_accept(nw_ses *ses, int sockfd, nw_addr_t *peer_addr)$/;"	f	file:
listener_on_accept	accessrest/ar_listener.c	/^static int listener_on_accept(nw_ses *ses, int sockfd, nw_addr_t *peer_addr)$/;"	f	file:
listener_on_accept	accessws/aw_listener.c	/^static int listener_on_accept(nw_ses *ses, int sockfd, nw_addr_t *peer_addr)$/;"	f	file:
listener_on_error_msg	accesshttp/ah_listener.c	/^static void listener_on_error_msg(nw_ses *ses, const char *msg)$/;"	f	file:
listener_on_error_msg	accessrest/ar_listener.c	/^static void listener_on_error_msg(nw_ses *ses, const char *msg)$/;"	f	file:
listener_on_error_msg	accessws/aw_listener.c	/^static void listener_on_error_msg(nw_ses *ses, const char *msg)$/;"	f	file:
listener_on_recv_pkg	accesshttp/ah_listener.c	/^static void listener_on_recv_pkg(nw_ses *ses, void *data, size_t size)$/;"	f	file:
listener_on_recv_pkg	accessrest/ar_listener.c	/^static void listener_on_recv_pkg(nw_ses *ses, void *data, size_t size)$/;"	f	file:
listener_on_recv_pkg	accessws/aw_listener.c	/^static void listener_on_recv_pkg(nw_ses *ses, void *data, size_t size)$/;"	f	file:
listener_svr	accesshttp/ah_listener.c	/^static nw_svr *listener_svr;$/;"	v	file:
listener_svr	accessrest/ar_listener.c	/^static nw_svr *listener_svr;$/;"	v	file:
listener_svr	accessws/aw_listener.c	/^static nw_svr *listener_svr;$/;"	v	file:
load_asset_lock	matchengine/me_load.c	/^static int load_asset_lock(json_t *params)$/;"	f	file:
load_asset_unlock	matchengine/me_load.c	/^static int load_asset_unlock(json_t *params)$/;"	f	file:
load_assets	matchengine/me_config.c	/^static int load_assets(json_t *node)$/;"	f	file:
load_balance	matchengine/me_load.c	/^int load_balance(MYSQL *conn, const char *table)$/;"	f
load_cancel_order	matchengine/me_load.c	/^static int load_cancel_order(json_t *params)$/;"	f	file:
load_cancel_stop	matchengine/me_load.c	/^static int load_cancel_stop(json_t *params)$/;"	f	file:
load_cfg_alert	utils/ut_config.c	/^int load_cfg_alert(json_t *root, const char *key, alert_cfg *cfg)$/;"	f
load_cfg_cli_svr	utils/ut_config.c	/^int load_cfg_cli_svr(json_t *root, const char *key, cli_svr_cfg *cfg)$/;"	f
load_cfg_clt	utils/ut_config.c	/^int load_cfg_clt(json_t *root, const char *key, nw_clt_cfg *cfg)$/;"	f
load_cfg_http_svr	utils/ut_config.c	/^int load_cfg_http_svr(json_t *root, const char *key, http_svr_cfg *cfg)$/;"	f
load_cfg_inetv4_list	utils/ut_config.c	/^int load_cfg_inetv4_list(json_t *root, const char *key, inetv4_list *cfg)$/;"	f
load_cfg_kafka_consumer	utils/ut_config.c	/^int load_cfg_kafka_consumer(json_t *root, const char *key, kafka_consumer_cfg *cfg)$/;"	f
load_cfg_log	utils/ut_config.c	/^int load_cfg_log(json_t *root, const char *key, log_cfg *cfg)$/;"	f
load_cfg_mysql	utils/ut_config.c	/^int load_cfg_mysql(json_t *root,  const char *key, mysql_cfg *cfg)$/;"	f
load_cfg_process	utils/ut_config.c	/^int load_cfg_process(json_t *root, const char *key, process_cfg *cfg)$/;"	f
load_cfg_redis_sentinel	utils/ut_config.c	/^int load_cfg_redis_sentinel(json_t *root, const char *key, redis_sentinel_cfg *cfg)$/;"	f
load_cfg_rpc_clt	utils/ut_config.c	/^int load_cfg_rpc_clt(json_t *root, const char *key, rpc_clt_cfg *cfg)$/;"	f
load_cfg_rpc_svr	utils/ut_config.c	/^int load_cfg_rpc_svr(json_t *root, const char *key, rpc_svr_cfg *cfg)$/;"	f
load_cfg_svr	utils/ut_config.c	/^int load_cfg_svr(json_t *root, const char *key, nw_svr_cfg *cfg)$/;"	f
load_cfg_ws_svr	utils/ut_config.c	/^int load_cfg_ws_svr(json_t *root, const char *key, ws_svr_cfg *cfg)$/;"	f
load_config	alertcenter/ac_config.c	/^int load_config(const char *path)$/;"	f
load_config	logwriter/lw_config.c	/^int load_config(const char *path)$/;"	f
load_instances	logwriter/lw_config.c	/^int load_instances(json_t *root, const char *key)$/;"	f
load_limit_order	matchengine/me_load.c	/^static int load_limit_order(json_t *params)$/;"	f	file:
load_market	marketprice/mp_message.c	/^static int load_market(redisContext *context, struct market_info *info)$/;"	f	file:
load_market_deals	marketprice/mp_message.c	/^static int load_market_deals(redisContext *context, sds key, struct market_info *info)$/;"	f	file:
load_market_kline	marketprice/mp_message.c	/^static int load_market_kline(redisContext *context, sds key, dict_t *dict, time_t start)$/;"	f	file:
load_market_last	marketprice/mp_message.c	/^static int load_market_last(redisContext *context, struct market_info *info)$/;"	f	file:
load_market_order	matchengine/me_load.c	/^static int load_market_order(json_t *params)$/;"	f	file:
load_markets	matchengine/me_config.c	/^static int load_markets(json_t *node)$/;"	f	file:
load_oper	matchengine/me_load.c	/^static int load_oper(json_t *detail)$/;"	f	file:
load_operlog	matchengine/me_load.c	/^int load_operlog(MYSQL *conn, const char *table, uint64_t *start_id)$/;"	f
load_operlog_from_db	matchengine/me_persist.c	/^static int load_operlog_from_db(MYSQL *conn, time_t date, uint64_t *start_id)$/;"	f	file:
load_orders	matchengine/me_load.c	/^int load_orders(MYSQL *conn, const char *table)$/;"	f
load_slice_from_db	matchengine/me_persist.c	/^static int load_slice_from_db(MYSQL *conn, time_t timestamp)$/;"	f	file:
load_stop_limit	matchengine/me_load.c	/^static int load_stop_limit(json_t *params)$/;"	f	file:
load_stop_market	matchengine/me_load.c	/^static int load_stop_market(json_t *params)$/;"	f	file:
load_stops	matchengine/me_load.c	/^int load_stops(MYSQL *conn, const char *table)$/;"	f
load_update	matchengine/me_load.c	/^int load_update(MYSQL *conn, const char *table)$/;"	f
load_update_balance	matchengine/me_load.c	/^static int load_update_balance(json_t *params)$/;"	f	file:
lock	network/nw_job.h	/^    pthread_mutex_t lock;$/;"	m	struct:nw_job
lock	utils/ut_kafka.h	/^    pthread_mutex_t lock;$/;"	m	struct:kafka_consumer_t
lock	utils/ut_log.h	/^    pthread_mutex_t     lock;$/;"	m	struct:__anon7
log	accesshttp/ah_config.h	/^    log_cfg             log;$/;"	m	struct:settings
log	accessrest/ar_config.h	/^    log_cfg             log;$/;"	m	struct:settings
log	accessws/aw_config.h	/^    log_cfg             log;$/;"	m	struct:settings
log	alertcenter/ac_config.h	/^    log_cfg             log;$/;"	m	struct:settings
log	logwriter/lw_config.h	/^    log_cfg             log;$/;"	m	struct:instance_cfg
log	logwriter/lw_server.c	/^    dlog_t *log;$/;"	m	struct:instance	file:
log	marketprice/mp_config.h	/^    log_cfg             log;$/;"	m	struct:settings
log	matchengine/me_config.h	/^    log_cfg             log;$/;"	m	struct:settings
log	monitoragent/ma_config.h	/^    log_cfg             log;$/;"	m	struct:settings
log	monitorcenter/mc_config.h	/^    log_cfg             log;$/;"	m	struct:settings
log	readhistory/rh_config.h	/^    log_cfg             log;$/;"	m	struct:settings
log_cfg	utils/ut_config.h	/^typedef struct log_cfg {$/;"	s
log_cfg	utils/ut_config.h	/^} log_cfg;$/;"	t	typeref:struct:log_cfg
log_debug	utils/ut_log.h	/^# define log_debug(/;"	d
log_error	utils/ut_log.h	/^# define log_error(/;"	d
log_exception	utils/ut_log.h	/^# define log_exception(/;"	d
log_fatal	utils/ut_log.h	/^# define log_fatal(/;"	d
log_info	utils/ut_log.h	/^# define log_info(/;"	d
log_list_head	utils/ut_log.c	/^static dlog_t *log_list_head = NULL;$/;"	v	file:
log_notice	utils/ut_log.h	/^# define log_notice(/;"	d
log_num	utils/ut_log.h	/^    int                 log_num;$/;"	m	struct:__anon7
log_pid	utils/ut_log.h	/^    int                 log_pid;$/;"	m	struct:__anon7
log_stderr	utils/ut_log.h	/^# define log_stderr(/;"	d
log_suffix	utils/ut_log.c	/^static char *log_suffix(int type, time_t time, int index)$/;"	f	file:
log_trace	utils/ut_log.h	/^# define log_trace(/;"	d
log_user1	utils/ut_log.h	/^# define log_user1(/;"	d
log_user2	utils/ut_log.h	/^# define log_user2(/;"	d
log_vip	utils/ut_log.h	/^# define log_vip(/;"	d
log_warn	utils/ut_log.h	/^# define log_warn(/;"	d
loga	utils/ut_log.h	/^# define loga(/;"	d
loop	depends/hiredis/adapters/ae.h	/^    aeEventLoop *loop;$/;"	m	struct:redisAeEvents
loop	depends/hiredis/adapters/libev.h	/^    struct ev_loop *loop;$/;"	m	struct:redisLibevEvents	typeref:struct:redisLibevEvents::ev_loop
loop	depends/hiredis/examples/example-ae.c	/^static aeEventLoop *loop;$/;"	v	file:
loop	network/nw_job.h	/^    struct ev_loop *loop;$/;"	m	struct:nw_job	typeref:struct:nw_job::ev_loop
loop	network/nw_ses.h	/^    struct ev_loop *loop;$/;"	m	struct:nw_ses	typeref:struct:nw_ses::ev_loop
loop	network/nw_state.h	/^    struct ev_loop *loop;$/;"	m	struct:nw_state	typeref:struct:nw_state::ev_loop
loop	network/nw_timer.h	/^    struct ev_loop *loop;$/;"	m	struct:nw_timer	typeref:struct:nw_timer::ev_loop
loop	utils/ut_kafka.h	/^    struct ev_loop *loop;$/;"	m	struct:kafka_consumer_t	typeref:struct:kafka_consumer_t::ev_loop
low	marketprice/mp_kline.h	/^    mpd_t *low;$/;"	m	struct:kline_info
m_adapter	depends/hiredis/examples/example-qt.h	/^        RedisQtAdapter m_adapter;$/;"	m	class:ExampleQt
m_ctx	depends/hiredis/adapters/qt.h	/^        redisAsyncContext * m_ctx;$/;"	m	class:RedisQtAdapter
m_ctx	depends/hiredis/examples/example-qt.h	/^        redisAsyncContext * m_ctx;$/;"	m	class:ExampleQt
m_read	depends/hiredis/adapters/qt.h	/^        QSocketNotifier * m_read;$/;"	m	class:RedisQtAdapter
m_value	depends/hiredis/examples/example-qt.h	/^        const char * m_value;$/;"	m	class:ExampleQt
m_write	depends/hiredis/adapters/qt.h	/^        QSocketNotifier * m_write;$/;"	m	class:RedisQtAdapter
magic	utils/ut_queue.c	/^    uint32_t magic;$/;"	m	struct:queue_head	file:
magic	utils/ut_rpc.h	/^    uint32_t magic;$/;"	m	struct:rpc_pkg
magic_head	alertcenter/ac_server.c	/^static const char *magic_head = "373d26968a5a2b698045";$/;"	v	file:
magic_head	utils/ut_alert.c	/^static const char *magic_head = "373d26968a5a2b698045";$/;"	v	file:
main	accesshttp/ah_main.c	/^int main(int argc, char *argv[])$/;"	f
main	accessrest/ar_main.c	/^int main(int argc, char *argv[])$/;"	f
main	accessws/aw_main.c	/^int main(int argc, char *argv[])$/;"	f
main	alertcenter/ac_main.c	/^int main(int argc, char *argv[])$/;"	f
main	alertcenter/send_alert.py	/^def main():$/;"	f
main	depends/hiredis/examples/example-ae.c	/^int main (int argc, char **argv) {$/;"	f
main	depends/hiredis/examples/example-glib.c	/^main (gint argc     G_GNUC_UNUSED,$/;"	f
main	depends/hiredis/examples/example-ivykis.c	/^int main (int argc, char **argv) {$/;"	f
main	depends/hiredis/examples/example-libev.c	/^int main (int argc, char **argv) {$/;"	f
main	depends/hiredis/examples/example-libevent.c	/^int main (int argc, char **argv) {$/;"	f
main	depends/hiredis/examples/example-libuv.c	/^int main (int argc, char **argv) {$/;"	f
main	depends/hiredis/examples/example-macosx.c	/^int main (int argc, char **argv) {$/;"	f
main	depends/hiredis/examples/example-qt.cpp	/^int main (int argc, char **argv) {$/;"	f
main	depends/hiredis/examples/example.c	/^int main(int argc, char **argv) {$/;"	f
main	depends/hiredis/sds.c	/^int main(void) {$/;"	f
main	depends/hiredis/test.c	/^int main(int argc, char **argv) {$/;"	f
main	logwriter/lw_main.c	/^int main(int argc, char *argv[])$/;"	f
main	marketprice/mp_main.c	/^int main(int argc, char *argv[])$/;"	f
main	matchengine/me_main.c	/^int main(int argc, char *argv[])$/;"	f
main	monitoragent/ma_main.c	/^int main(int argc, char *argv[])$/;"	f
main	monitorcenter/delete_all.py	/^def main():$/;"	f
main	monitorcenter/mc_main.c	/^int main(int argc, char *argv[])$/;"	f
main	readhistory/rh_main.c	/^int main(int argc, char *argv[])$/;"	f
main	test/marketprice/mp_main.c	/^int main(int argc, char *argv[])$/;"	f
main	test/matchengine/cli.c	/^int main(int argc, char *argv[])$/;"	f
main	test/utils/test_decimal.c	/^int main(int argc, char *argv[])$/;"	f
main	test/utils/test_dict.c	/^int main(void)$/;"	f
main	test/utils/test_http.c	/^int main(void)$/;"	f
main	test/utils/test_list.c	/^int main(int argc, char *argv[])$/;"	f
main	test/utils/test_skiplist.c	/^int main(int argc, char *argv[])$/;"	f
main	tools/monitor_delete_scope.py	/^def main(scope):$/;"	f
mainloop	depends/hiredis/examples/example-glib.c	/^static GMainLoop *mainloop;$/;"	v	file:
make_slice	matchengine/me_persist.c	/^int make_slice(time_t timestamp)$/;"	f
maker_fee	matchengine/me_market.h	/^    mpd_t           *maker_fee;$/;"	m	struct:order_t
maker_fee	matchengine/me_market.h	/^    mpd_t           *maker_fee;$/;"	m	struct:stop_t
market	accessrest/ar_ticker.c	/^    char market[MARKET_NAME_MAX_LEN];$/;"	m	struct:state_data	file:
market	accessws/aw_deals.c	/^    char market[MARKET_NAME_MAX_LEN];$/;"	m	struct:state_data	file:
market	accessws/aw_depth.c	/^    char market[MARKET_NAME_MAX_LEN];$/;"	m	struct:depth_key	file:
market	accessws/aw_kline.c	/^    char market[MARKET_NAME_MAX_LEN];$/;"	m	struct:kline_key	file:
market	accessws/aw_order.c	/^    char market[MARKET_NAME_MAX_LEN];$/;"	m	struct:sub_unit	file:
market	accessws/aw_state.c	/^    char market[MARKET_NAME_MAX_LEN];$/;"	m	struct:state_data	file:
market	matchengine/me_config.h	/^struct market {$/;"	s
market	matchengine/me_market.h	/^    char            *market;$/;"	m	struct:order_t
market	matchengine/me_market.h	/^    char            *market;$/;"	m	struct:stop_t
market_cancel_order	matchengine/me_market.c	/^int market_cancel_order(bool real, json_t **result, market_t *m, order_t *order)$/;"	f
market_cancel_stop	matchengine/me_market.c	/^int market_cancel_stop(bool real, json_t **result, market_t *m, stop_t *stop)$/;"	f
market_create	matchengine/me_market.c	/^market_t *market_create(struct market *conf)$/;"	f
market_dict_hash_function	matchengine/me_trade.c	/^static uint32_t market_dict_hash_function(const void *key)$/;"	f	file:
market_dict_key_compare	matchengine/me_trade.c	/^static int market_dict_key_compare(const void *key1, const void *key2)$/;"	f	file:
market_dict_key_dup	matchengine/me_trade.c	/^static void *market_dict_key_dup(const void *key)$/;"	f	file:
market_dict_key_free	matchengine/me_trade.c	/^static void market_dict_key_free(void *key)$/;"	f	file:
market_exist	marketprice/mp_message.c	/^bool market_exist(const char *market)$/;"	f
market_get_order	matchengine/me_market.c	/^order_t *market_get_order(market_t *m, uint64_t order_id)$/;"	f
market_get_order_list	matchengine/me_market.c	/^skiplist_t *market_get_order_list(market_t *m, uint32_t user_id)$/;"	f
market_get_stop	matchengine/me_market.c	/^stop_t *market_get_stop(market_t *m, uint64_t order_id)$/;"	f
market_get_stop_list	matchengine/me_market.c	/^skiplist_t *market_get_stop_list(market_t *m, uint32_t user_id)$/;"	f
market_info	marketprice/mp_message.c	/^struct market_info {$/;"	s	file:
market_interval	accessrest/ar_config.h	/^    double              market_interval;$/;"	m	struct:settings
market_interval	accessws/aw_config.h	/^    double              market_interval;$/;"	m	struct:settings
market_num	matchengine/me_config.h	/^    size_t              market_num;$/;"	m	struct:settings
market_put_limit_order	matchengine/me_market.c	/^int market_put_limit_order(bool real, json_t **result, market_t *m, uint32_t user_id, uint32_t side, mpd_t *amount,$/;"	f
market_put_market_order	matchengine/me_market.c	/^int market_put_market_order(bool real, json_t **result, market_t *m, uint32_t user_id, uint32_t side, mpd_t *amount,$/;"	f
market_put_order	matchengine/me_market.c	/^int market_put_order(market_t *m, order_t *order)$/;"	f
market_put_stop	matchengine/me_market.c	/^int market_put_stop(market_t *m, stop_t *stop)$/;"	f
market_put_stop_limit	matchengine/me_market.c	/^int market_put_stop_limit(bool real, market_t *m, uint32_t user_id, uint32_t side, mpd_t *amount, mpd_t *stop_price, mpd_t *price,$/;"	f
market_put_stop_market	matchengine/me_market.c	/^int market_put_stop_market(bool real, market_t *m, uint32_t user_id, uint32_t side, mpd_t *amount, mpd_t *stop_price,$/;"	f
market_query	marketprice/mp_message.c	/^static struct market_info *market_query(const char *market)$/;"	f	file:
market_status	matchengine/me_market.c	/^sds market_status(sds reply)$/;"	f
market_t	matchengine/me_market.h	/^typedef struct market_t {$/;"	s
market_t	matchengine/me_market.h	/^} market_t;$/;"	t	typeref:struct:market_t
market_timer	accessrest/ar_ticker.c	/^static nw_timer market_timer;$/;"	v	file:
market_timer	accessws/aw_state.c	/^static nw_timer market_timer;$/;"	v	file:
market_timer	marketprice/mp_message.c	/^static nw_timer market_timer;$/;"	v	file:
market_update	marketprice/mp_message.c	/^static int market_update(double timestamp, uint64_t id, const char *market, int side, uint32_t ask_user_id, uint32_t bid_user_id, mpd_t *price, mpd_t *amount)$/;"	f	file:
market_update	matchengine/me_market.c	/^int market_update(market_t *m, struct market *conf)$/;"	f
market_url	matchengine/me_config.h	/^    char                *market_url;$/;"	m	struct:settings
market_val	accessrest/ar_ticker.c	/^struct market_val {$/;"	s	file:
market_val	accessws/aw_deals.c	/^struct market_val {$/;"	s	file:
market_val	accessws/aw_state.c	/^struct market_val {$/;"	s	file:
marketprice	accesshttp/ah_config.h	/^    rpc_clt_cfg         marketprice;$/;"	m	struct:settings
marketprice	accesshttp/ah_server.c	/^static rpc_clt *marketprice;$/;"	v	file:
marketprice	accessrest/ar_config.h	/^    rpc_clt_cfg         marketprice;$/;"	m	struct:settings
marketprice	accessrest/ar_server.c	/^static rpc_clt *marketprice;$/;"	v	file:
marketprice	accessrest/ar_ticker.c	/^static rpc_clt *marketprice;$/;"	v	file:
marketprice	accessws/aw_config.h	/^    rpc_clt_cfg         marketprice;$/;"	m	struct:settings
marketprice	accessws/aw_deals.c	/^static rpc_clt *marketprice;$/;"	v	file:
marketprice	accessws/aw_kline.c	/^static rpc_clt *marketprice;$/;"	v	file:
marketprice	accessws/aw_server.c	/^static rpc_clt *marketprice;$/;"	v	file:
marketprice	accessws/aw_state.c	/^static rpc_clt *marketprice;$/;"	v	file:
markets	matchengine/me_config.h	/^    struct market       *markets;$/;"	m	struct:settings	typeref:struct:settings::market
mask	utils/ut_dict.h	/^    uint32_t mask;$/;"	m	struct:dict_t
matchengine	accesshttp/ah_config.h	/^    rpc_clt_cfg         matchengine;$/;"	m	struct:settings
matchengine	accesshttp/ah_server.c	/^static rpc_clt *matchengine;$/;"	v	file:
matchengine	accessrest/ar_config.h	/^    rpc_clt_cfg         matchengine;$/;"	m	struct:settings
matchengine	accessrest/ar_server.c	/^static rpc_clt *matchengine;$/;"	v	file:
matchengine	accessrest/ar_ticker.c	/^static rpc_clt *matchengine;$/;"	v	file:
matchengine	accessws/aw_asset.c	/^static rpc_clt *matchengine;$/;"	v	file:
matchengine	accessws/aw_config.h	/^    rpc_clt_cfg         matchengine;$/;"	m	struct:settings
matchengine	accessws/aw_depth.c	/^static rpc_clt *matchengine;$/;"	v	file:
matchengine	accessws/aw_server.c	/^static rpc_clt *matchengine;$/;"	v	file:
max	utils/ut_config.h	/^    int     max;$/;"	m	struct:log_cfg
max_pkg_size	network/nw_clt.h	/^    uint32_t max_pkg_size;$/;"	m	struct:nw_clt_cfg
max_pkg_size	network/nw_svr.h	/^    uint32_t max_pkg_size;$/;"	m	struct:nw_svr_cfg
max_pkg_size	utils/ut_http_svr.h	/^    uint32_t max_pkg_size;$/;"	m	struct:http_svr_cfg
max_pkg_size	utils/ut_rpc_clt.h	/^    uint32_t max_pkg_size;$/;"	m	struct:rpc_clt_cfg
max_pkg_size	utils/ut_rpc_svr.h	/^    uint32_t max_pkg_size;$/;"	m	struct:rpc_svr_cfg
max_pkg_size	utils/ut_ws_svr.h	/^    uint32_t max_pkg_size;$/;"	m	struct:ws_svr_cfg
max_size	utils/ut_log.h	/^    size_t              max_size;$/;"	m	struct:__anon7
maxbuf	depends/hiredis/read.h	/^    size_t maxbuf; \/* Max length of unused buffer *\/$/;"	m	struct:redisReader
mem_num	utils/ut_queue.c	/^    uint32_t mem_num;$/;"	m	struct:queue_head	file:
mem_size	utils/ut_queue.c	/^    uint32_t mem_size;$/;"	m	struct:queue_head	file:
mem_use	utils/ut_queue.c	/^    uint32_t mem_use;$/;"	m	struct:queue_head	file:
memory	utils/ut_queue.h	/^    void   *memory;$/;"	m	struct:__anon4
message	readhistory/rh_server.c	/^    sds     message;$/;"	m	struct:job_reply	file:
message	utils/ut_kafka.c	/^    sds message;$/;"	m	struct:message_t	file:
message	utils/ut_ws_svr.c	/^    sds         message;$/;"	m	struct:clt_info	file:
message_status	matchengine/me_message.c	/^sds message_status(sds reply)$/;"	f
message_t	utils/ut_kafka.c	/^typedef struct message_t {$/;"	s	file:
message_t	utils/ut_kafka.c	/^} message_t;$/;"	t	typeref:struct:message_t	file:
method	accessws/aw_http.c	/^    char *method;$/;"	m	struct:http_request	file:
method	utils/http_parser.h	/^  unsigned int method : 8;       \/* requests only *\/$/;"	m	struct:http_parser
method	utils/ut_http.h	/^    uint32_t    method;$/;"	m	struct:http_request_t
method_map	accessrest/ar_server.c	/^static dict_t *method_map;$/;"	v	file:
method_map	accessws/aw_server.c	/^static dict_t *method_map;$/;"	v	file:
method_strings	utils/http_parser.c	/^static const char *method_strings[] =$/;"	v	file:
methods	accesshttp/ah_server.c	/^static dict_t *methods;$/;"	v	file:
min	marketprice/mp_message.c	/^    dict_t *min;$/;"	m	struct:market_info	file:
min_amount	matchengine/me_config.h	/^    mpd_t               *min_amount;$/;"	m	struct:market
min_amount	matchengine/me_market.h	/^    mpd_t           *min_amount;$/;"	m	struct:market_t
min_max	marketprice/mp_config.h	/^    int                 min_max;$/;"	m	struct:settings
money	matchengine/me_config.h	/^    char                *money;$/;"	m	struct:market
money	matchengine/me_market.h	/^    char            *money;$/;"	m	struct:market_t
money_prec	matchengine/me_config.h	/^    int                 money_prec;$/;"	m	struct:market
money_prec	matchengine/me_market.h	/^    int             money_prec;$/;"	m	struct:market_t
monitor	monitoragent/ma_server.c	/^static dict_t *monitor;$/;"	v	file:
monitor_key	monitoragent/ma_server.c	/^struct monitor_key {$/;"	s	file:
monitor_key	monitorcenter/mc_server.c	/^struct monitor_key {$/;"	s	file:
monitor_set	monitorcenter/mc_server.c	/^static dict_t *monitor_set;$/;"	v	file:
monitor_val	monitoragent/ma_server.c	/^struct monitor_val {$/;"	s	file:
monitor_val	monitorcenter/mc_server.c	/^static dict_t *monitor_val;$/;"	v	file:
monitor_val	monitorcenter/mc_server.c	/^struct monitor_val {$/;"	s	file:
monitorcenter	accesshttp/ah_config.h	/^    rpc_clt_cfg         monitorcenter;$/;"	m	struct:settings
monitorcenter	accesshttp/ah_server.c	/^static rpc_clt *monitorcenter;$/;"	v	file:
moveToNextTask	depends/hiredis/read.c	/^static void moveToNextTask(redisReader *r) {$/;"	f	file:
move_to_front	utils/ut_redis.c	/^static void move_to_front(redis_sentinel_t *context, redis_sentinel_node *node)$/;"	f	file:
mpd_ctx	utils/ut_decimal.c	/^mpd_context_t mpd_ctx;$/;"	v
mpd_one	utils/ut_decimal.c	/^mpd_t *mpd_one;$/;"	v
mpd_ten	utils/ut_decimal.c	/^mpd_t *mpd_ten;$/;"	v
mpd_zero	utils/ut_decimal.c	/^mpd_t *mpd_zero;$/;"	v
msg_max_size	utils/ut_alert.c	/^static const int msg_max_size = 10240;$/;"	v	file:
mysql_cfg	utils/ut_config.h	/^typedef struct mysql_cfg {$/;"	s
mysql_cfg	utils/ut_config.h	/^} mysql_cfg;$/;"	t	typeref:struct:mysql_cfg
mysql_conn	matchengine/me_history.c	/^static MYSQL *mysql_conn;$/;"	v	file:
mysql_conn	matchengine/me_operlog.c	/^static MYSQL *mysql_conn;$/;"	v	file:
mysql_connect	utils/ut_mysql.c	/^MYSQL *mysql_connect(mysql_cfg *db)$/;"	f
name	marketprice/mp_message.c	/^    char   *name;$/;"	m	struct:market_info	file:
name	matchengine/me_config.h	/^    char                *name;$/;"	m	struct:asset
name	matchengine/me_config.h	/^    char                *name;$/;"	m	struct:market
name	matchengine/me_market.h	/^    char            *name;$/;"	m	struct:market_t
name	utils/http_parser.c	/^  const char *name;$/;"	m	struct:__anon9	file:
name	utils/ut_config.h	/^    char    *name;$/;"	m	struct:mysql_cfg
name	utils/ut_log.h	/^    char                *name;$/;"	m	struct:__anon7
name	utils/ut_queue.c	/^    char     name[128];$/;"	m	struct:queue_head	file:
name	utils/ut_redis.h	/^    char *name;$/;"	m	struct:redis_sentinel_cfg
name	utils/ut_redis.h	/^    char *name;$/;"	m	struct:redis_sentinel_t
name	utils/ut_rpc_clt.h	/^    char *name;$/;"	m	struct:rpc_clt
name	utils/ut_rpc_clt.h	/^    char *name;$/;"	m	struct:rpc_clt_cfg
next	depends/hiredis/async.h	/^    struct redisCallback *next; \/* simple singly linked list *\/$/;"	m	struct:redisCallback	typeref:struct:redisCallback::redisCallback
next	depends/hiredis/dict.h	/^    struct dictEntry *next;$/;"	m	struct:dictEntry	typeref:struct:dictEntry::dictEntry
next	network/nw_buf.h	/^    struct nw_buf *next;$/;"	m	struct:nw_buf	typeref:struct:nw_buf::nw_buf
next	network/nw_job.h	/^    struct nw_job_entry *next;$/;"	m	struct:nw_job_entry	typeref:struct:nw_job_entry::nw_job_entry
next	network/nw_ses.h	/^    struct nw_ses *next;$/;"	m	struct:nw_ses	typeref:struct:nw_ses::nw_ses
next	network/nw_state.h	/^    struct nw_state_entry *next;$/;"	m	struct:nw_state_entry	typeref:struct:nw_state_entry::nw_state_entry
next	utils/ut_dict.h	/^    struct dict_entry *next;$/;"	m	struct:dict_entry	typeref:struct:dict_entry::dict_entry
next	utils/ut_list.h	/^    list_node *next;$/;"	m	struct:list_iter
next	utils/ut_list.h	/^    struct list_node *next;$/;"	m	struct:list_node	typeref:struct:list_node::list_node
next	utils/ut_log.h	/^    void                *next;$/;"	m	struct:__anon7
next	utils/ut_redis.h	/^    struct redis_sentinel_node *next;$/;"	m	struct:redis_sentinel_node	typeref:struct:redis_sentinel_node::redis_sentinel_node
next	utils/ut_skiplist.h	/^    skiplist_node *next;$/;"	m	struct:skiplist_iter
nextArgument	depends/hiredis/async.c	/^static const char *nextArgument(const char *start, const char **str, size_t *len) {$/;"	f	file:
nextEntry	depends/hiredis/dict.h	/^    dictEntry *entry, *nextEntry;$/;"	m	struct:dictIterator
next_entry	network/nw_state.h	/^    nw_state_entry *next_entry;$/;"	m	struct:nw_state_iterator
next_entry	utils/ut_dict.h	/^    dict_entry *next_entry;$/;"	m	struct:dict_iterator
no_cache	utils/ut_log.h	/^    int                 no_cache;$/;"	m	struct:__anon7
no_shift	utils/ut_log.h	/^    int                 no_shift;$/;"	m	struct:__anon7
no_timestamp	utils/ut_log.h	/^    int                 no_timestamp;$/;"	m	struct:__anon7
node_compare	test/utils/test_list.c	/^int node_compare(const void *obj, const void *key)$/;"	f
node_compare	test/utils/test_skiplist.c	/^int node_compare(const void *obj, const void *key)$/;"	f
node_dup	test/utils/test_list.c	/^void *node_dup(void *obj)$/;"	f
node_dup	test/utils/test_skiplist.c	/^void *node_dup(void *obj)$/;"	f
node_free	test/utils/test_list.c	/^void node_free(void *obj)$/;"	f
node_free	test/utils/test_skiplist.c	/^void node_free(void *obj)$/;"	f
normal_url_char	utils/http_parser.c	/^static const uint8_t normal_url_char[32] = {$/;"	v	file:
notify	network/nw_job.h	/^    pthread_cond_t notify;$/;"	m	struct:nw_job
notify_timer	accessws/aw_state.c	/^static nw_timer notify_timer;$/;"	v	file:
nread	utils/http_parser.h	/^  uint32_t nread;          \/* # bytes read in various scenarios *\/$/;"	m	struct:http_parser
num	utils/ut_config.h	/^    int     num;$/;"	m	struct:log_cfg
nw_addr_t	network/nw_sock.h	/^typedef struct nw_addr_t {$/;"	s
nw_addr_t	network/nw_sock.h	/^} nw_addr_t;$/;"	t	typeref:struct:nw_addr_t
nw_buf	network/nw_buf.h	/^typedef struct nw_buf {$/;"	s
nw_buf	network/nw_buf.h	/^} nw_buf;$/;"	t	typeref:struct:nw_buf
nw_buf_alloc	network/nw_buf.c	/^nw_buf *nw_buf_alloc(nw_buf_pool *pool)$/;"	f
nw_buf_avail	network/nw_buf.c	/^size_t nw_buf_avail(nw_buf *buf)$/;"	f
nw_buf_free	network/nw_buf.c	/^void nw_buf_free(nw_buf_pool *pool, nw_buf *buf)$/;"	f
nw_buf_list	network/nw_buf.h	/^typedef struct nw_buf_list {$/;"	s
nw_buf_list	network/nw_buf.h	/^} nw_buf_list;$/;"	t	typeref:struct:nw_buf_list
nw_buf_list_append	network/nw_buf.c	/^size_t nw_buf_list_append(nw_buf_list *list, const void *data, size_t len)$/;"	f
nw_buf_list_create	network/nw_buf.c	/^nw_buf_list *nw_buf_list_create(nw_buf_pool *pool, uint32_t limit)$/;"	f
nw_buf_list_release	network/nw_buf.c	/^void nw_buf_list_release(nw_buf_list *list)$/;"	f
nw_buf_list_shift	network/nw_buf.c	/^void nw_buf_list_shift(nw_buf_list *list)$/;"	f
nw_buf_list_write	network/nw_buf.c	/^size_t nw_buf_list_write(nw_buf_list *list, const void *data, size_t len)$/;"	f
nw_buf_pool	network/nw_buf.h	/^typedef struct nw_buf_pool {$/;"	s
nw_buf_pool	network/nw_buf.h	/^} nw_buf_pool;$/;"	t	typeref:struct:nw_buf_pool
nw_buf_pool_create	network/nw_buf.c	/^nw_buf_pool *nw_buf_pool_create(uint32_t size)$/;"	f
nw_buf_pool_release	network/nw_buf.c	/^void nw_buf_pool_release(nw_buf_pool *pool)$/;"	f
nw_buf_shift	network/nw_buf.c	/^void nw_buf_shift(nw_buf *buf)$/;"	f
nw_buf_size	network/nw_buf.c	/^size_t nw_buf_size(nw_buf *buf)$/;"	f
nw_buf_write	network/nw_buf.c	/^size_t nw_buf_write(nw_buf *buf, const void *data, size_t len)$/;"	f
nw_cache	network/nw_buf.h	/^typedef struct nw_cache {$/;"	s
nw_cache	network/nw_buf.h	/^} nw_cache;$/;"	t	typeref:struct:nw_cache
nw_cache_alloc	network/nw_buf.c	/^void *nw_cache_alloc(nw_cache *cache)$/;"	f
nw_cache_create	network/nw_buf.c	/^nw_cache *nw_cache_create(uint32_t size)$/;"	f
nw_cache_free	network/nw_buf.c	/^void nw_cache_free(nw_cache *cache, void *obj)$/;"	f
nw_cache_release	network/nw_buf.c	/^void nw_cache_release(nw_cache *cache)$/;"	f
nw_clt	network/nw_clt.h	/^typedef struct nw_clt {$/;"	s
nw_clt	network/nw_clt.h	/^} nw_clt;$/;"	t	typeref:struct:nw_clt
nw_clt_cfg	network/nw_clt.h	/^typedef struct nw_clt_cfg {$/;"	s
nw_clt_cfg	network/nw_clt.h	/^} nw_clt_cfg;$/;"	t	typeref:struct:nw_clt_cfg
nw_clt_close	network/nw_clt.c	/^int nw_clt_close(nw_clt *clt)$/;"	f
nw_clt_connected	network/nw_clt.c	/^bool nw_clt_connected(nw_clt *clt)$/;"	f
nw_clt_create	network/nw_clt.c	/^nw_clt *nw_clt_create(nw_clt_cfg *cfg, nw_clt_type *type, void *privdata)$/;"	f
nw_clt_release	network/nw_clt.c	/^void nw_clt_release(nw_clt *clt)$/;"	f
nw_clt_start	network/nw_clt.c	/^int nw_clt_start(nw_clt *clt)$/;"	f
nw_clt_type	network/nw_clt.h	/^typedef struct nw_clt_type {$/;"	s
nw_clt_type	network/nw_clt.h	/^} nw_clt_type;$/;"	t	typeref:struct:nw_clt_type
nw_default_loop	network/nw_evt.c	/^struct ev_loop *nw_default_loop;$/;"	v	typeref:struct:ev_loop
nw_job	network/nw_job.h	/^typedef struct nw_job {$/;"	s
nw_job	network/nw_job.h	/^} nw_job;$/;"	t	typeref:struct:nw_job
nw_job_add	network/nw_job.c	/^int nw_job_add(nw_job *job, uint32_t id, void *request)$/;"	f
nw_job_create	network/nw_job.c	/^nw_job *nw_job_create(nw_job_type *type, int thread_count)$/;"	f
nw_job_entry	network/nw_job.h	/^typedef struct nw_job_entry {$/;"	s
nw_job_entry	network/nw_job.h	/^} nw_job_entry;$/;"	t	typeref:struct:nw_job_entry
nw_job_free	network/nw_job.c	/^static void nw_job_free(nw_job *job)$/;"	f	file:
nw_job_release	network/nw_job.c	/^void nw_job_release(nw_job *job)$/;"	f
nw_job_type	network/nw_job.h	/^typedef struct nw_job_type {$/;"	s
nw_job_type	network/nw_job.h	/^} nw_job_type;$/;"	t	typeref:struct:nw_job_type
nw_loop_break	network/nw_evt.c	/^void nw_loop_break(void)$/;"	f
nw_loop_break_later	network/nw_evt.c	/^void nw_loop_break_later(double waittime)$/;"	f
nw_loop_init	network/nw_evt.c	/^void nw_loop_init(void)$/;"	f
nw_loop_run	network/nw_evt.c	/^void nw_loop_run(void)$/;"	f
nw_ses	network/nw_ses.h	/^typedef struct nw_ses {$/;"	s
nw_ses	network/nw_ses.h	/^} nw_ses;$/;"	t	typeref:struct:nw_ses
nw_ses_bind	network/nw_ses.c	/^int nw_ses_bind(nw_ses *ses, nw_addr_t *addr)$/;"	f
nw_ses_close	network/nw_ses.c	/^int nw_ses_close(nw_ses *ses)$/;"	f
nw_ses_connect	network/nw_ses.c	/^int nw_ses_connect(nw_ses *ses, nw_addr_t *addr)$/;"	f
nw_ses_init	network/nw_ses.c	/^int nw_ses_init(nw_ses *ses, struct ev_loop *loop, nw_buf_pool *pool, uint32_t buf_limit, int ses_type)$/;"	f
nw_ses_listen	network/nw_ses.c	/^int nw_ses_listen(nw_ses *ses, int backlog)$/;"	f
nw_ses_release	network/nw_ses.c	/^int nw_ses_release(nw_ses *ses)$/;"	f
nw_ses_send	network/nw_ses.c	/^int nw_ses_send(nw_ses *ses, const void *data, size_t size)$/;"	f
nw_ses_send_fd	network/nw_ses.c	/^int nw_ses_send_fd(nw_ses *ses, int fd)$/;"	f
nw_ses_start	network/nw_ses.c	/^int nw_ses_start(nw_ses *ses)$/;"	f
nw_ses_stop	network/nw_ses.c	/^int nw_ses_stop(nw_ses *ses)$/;"	f
nw_sock_addr_fill_inet	network/nw_sock.c	/^static int nw_sock_addr_fill_inet(nw_addr_t *addr, const char *host, const char *port)$/;"	f	file:
nw_sock_addr_fill_unix	network/nw_sock.c	/^int nw_sock_addr_fill_unix(nw_addr_t *addr, const char* unix_path)$/;"	f
nw_sock_cfg_parse	network/nw_sock.c	/^int nw_sock_cfg_parse(const char *cfg, nw_addr_t *addr, int *sock_type)$/;"	f
nw_sock_errno	network/nw_sock.c	/^int nw_sock_errno(int sockfd)$/;"	f
nw_sock_get_recv_buf	network/nw_sock.c	/^int nw_sock_get_recv_buf(int sockfd, int *buf_size)$/;"	f
nw_sock_get_send_buf	network/nw_sock.c	/^int nw_sock_get_send_buf(int sockfd, int *buf_size)$/;"	f
nw_sock_host_addr	network/nw_sock.c	/^int nw_sock_host_addr(int sockfd, nw_addr_t *addr)$/;"	f
nw_sock_human_addr	network/nw_sock.c	/^char *nw_sock_human_addr(nw_addr_t *addr)$/;"	f
nw_sock_human_addr_s	network/nw_sock.c	/^char *nw_sock_human_addr_s(nw_addr_t *addr, char *dest)$/;"	f
nw_sock_ip	network/nw_sock.c	/^char *nw_sock_ip(nw_addr_t *addr)$/;"	f
nw_sock_ip_s	network/nw_sock.c	/^char *nw_sock_ip_s(nw_addr_t *addr, char *ip)$/;"	f
nw_sock_peer_addr	network/nw_sock.c	/^int nw_sock_peer_addr(int sockfd, nw_addr_t *addr)$/;"	f
nw_sock_set_mode	network/nw_sock.c	/^int nw_sock_set_mode(nw_addr_t *addr, mode_t mode)$/;"	f
nw_sock_set_no_delay	network/nw_sock.c	/^int nw_sock_set_no_delay(int sockfd)$/;"	f
nw_sock_set_nonblock	network/nw_sock.c	/^int nw_sock_set_nonblock(int sockfd)$/;"	f
nw_sock_set_recv_buf	network/nw_sock.c	/^int nw_sock_set_recv_buf(int sockfd, int buf_size)$/;"	f
nw_sock_set_reuse_addr	network/nw_sock.c	/^int nw_sock_set_reuse_addr(int sockfd)$/;"	f
nw_sock_set_send_buf	network/nw_sock.c	/^int nw_sock_set_send_buf(int sockfd, int buf_size)$/;"	f
nw_state	network/nw_state.h	/^typedef struct nw_state {$/;"	s
nw_state	network/nw_state.h	/^} nw_state;$/;"	t	typeref:struct:nw_state
nw_state_add	network/nw_state.c	/^nw_state_entry *nw_state_add(nw_state *context, double timeout, uint32_t id)$/;"	f
nw_state_count	network/nw_state.c	/^size_t nw_state_count(nw_state *context)$/;"	f
nw_state_create	network/nw_state.c	/^nw_state *nw_state_create(nw_state_type *type, uint32_t data_size)$/;"	f
nw_state_del	network/nw_state.c	/^int nw_state_del(nw_state *context, uint32_t id)$/;"	f
nw_state_entry	network/nw_state.h	/^typedef struct nw_state_entry {$/;"	s
nw_state_entry	network/nw_state.h	/^} nw_state_entry;$/;"	t	typeref:struct:nw_state_entry
nw_state_get	network/nw_state.c	/^nw_state_entry *nw_state_get(nw_state *context, uint32_t id)$/;"	f
nw_state_get_iterator	network/nw_state.c	/^nw_state_iterator *nw_state_get_iterator(nw_state *context)$/;"	f
nw_state_iterator	network/nw_state.h	/^typedef struct nw_state_iterator {$/;"	s
nw_state_iterator	network/nw_state.h	/^} nw_state_iterator;$/;"	t	typeref:struct:nw_state_iterator
nw_state_iterator_release	network/nw_state.c	/^void nw_state_iterator_release(nw_state_iterator *iter)$/;"	f
nw_state_mod	network/nw_state.c	/^int nw_state_mod(nw_state *context, uint32_t id, double timeout)$/;"	f
nw_state_next	network/nw_state.c	/^nw_state_entry *nw_state_next(nw_state_iterator *iter)$/;"	f
nw_state_release	network/nw_state.c	/^void nw_state_release(nw_state *context)$/;"	f
nw_state_type	network/nw_state.h	/^typedef struct nw_state_type {$/;"	s
nw_state_type	network/nw_state.h	/^} nw_state_type;$/;"	t	typeref:struct:nw_state_type
nw_svr	network/nw_svr.h	/^typedef struct nw_svr {$/;"	s
nw_svr	network/nw_svr.h	/^} nw_svr;$/;"	t	typeref:struct:nw_svr
nw_svr_add_clt	network/nw_svr.c	/^static int nw_svr_add_clt(nw_ses *ses, int sockfd, nw_addr_t *peer_addr)$/;"	f	file:
nw_svr_add_clt_fd	network/nw_svr.c	/^int nw_svr_add_clt_fd(nw_svr *svr, int fd)$/;"	f
nw_svr_bind	network/nw_svr.h	/^typedef struct nw_svr_bind {$/;"	s
nw_svr_bind	network/nw_svr.h	/^} nw_svr_bind;$/;"	t	typeref:struct:nw_svr_bind
nw_svr_cfg	network/nw_svr.h	/^typedef struct nw_svr_cfg {$/;"	s
nw_svr_cfg	network/nw_svr.h	/^} nw_svr_cfg;$/;"	t	typeref:struct:nw_svr_cfg
nw_svr_close_clt	network/nw_svr.c	/^void nw_svr_close_clt(nw_svr *svr, nw_ses *ses)$/;"	f
nw_svr_create	network/nw_svr.c	/^nw_svr *nw_svr_create(nw_svr_cfg *cfg, nw_svr_type *type, void *privdata)$/;"	f
nw_svr_free	network/nw_svr.c	/^static void nw_svr_free(nw_svr *svr)$/;"	f	file:
nw_svr_release	network/nw_svr.c	/^void nw_svr_release(nw_svr *svr)$/;"	f
nw_svr_start	network/nw_svr.c	/^int nw_svr_start(nw_svr *svr)$/;"	f
nw_svr_stop	network/nw_svr.c	/^int nw_svr_stop(nw_svr *svr)$/;"	f
nw_svr_type	network/nw_svr.h	/^typedef struct nw_svr_type {$/;"	s
nw_svr_type	network/nw_svr.h	/^} nw_svr_type;$/;"	t	typeref:struct:nw_svr_type
nw_timer	network/nw_timer.h	/^typedef struct nw_timer {$/;"	s
nw_timer	network/nw_timer.h	/^} nw_timer;$/;"	t	typeref:struct:nw_timer
nw_timer_active	network/nw_timer.c	/^bool nw_timer_active(nw_timer *timer)$/;"	f
nw_timer_callback	network/nw_timer.h	/^typedef void (*nw_timer_callback)(struct nw_timer *timer, void *privdata);$/;"	t
nw_timer_remaining	network/nw_timer.c	/^double nw_timer_remaining(nw_timer *timer)$/;"	f
nw_timer_set	network/nw_timer.c	/^void nw_timer_set(nw_timer *timer, double interval, bool repeated, nw_timer_callback callback, void *privdata)$/;"	f
nw_timer_start	network/nw_timer.c	/^void nw_timer_start(nw_timer *timer)$/;"	f
nw_timer_stop	network/nw_timer.c	/^void nw_timer_stop(nw_timer *timer)$/;"	f
nw_write_packet	network/nw_ses.c	/^static int nw_write_packet(nw_ses *ses, const void *data, size_t size)$/;"	f	file:
nw_write_stream	network/nw_ses.c	/^static int nw_write_stream(nw_ses *ses, const void *data, size_t size)$/;"	f	file:
obj	depends/hiredis/read.h	/^    void *obj; \/* holds user-generated value for a read task *\/$/;"	m	struct:redisReadTask
obuf	depends/hiredis/hiredis.h	/^    char *obuf; \/* Write buffer *\/$/;"	m	struct:redisContext
off	utils/http_parser.h	/^    uint16_t off;               \/* Offset into buffer in which field starts *\/$/;"	m	struct:http_parser_url::__anon5
offset	utils/ut_kafka.c	/^    int64_t offset;$/;"	m	struct:message_t	file:
offset	utils/ut_kafka.h	/^    int64_t offset;$/;"	m	struct:kafka_consumer_cfg
onConnect	depends/hiredis/async.h	/^    redisConnectCallback *onConnect;$/;"	m	struct:redisAsyncContext
onDisconnect	depends/hiredis/async.h	/^    redisDisconnectCallback *onDisconnect;$/;"	m	struct:redisAsyncContext
on_accept	network/nw_ses.h	/^    int  (*on_accept)(struct nw_ses *ses, int sockfd, nw_addr_t *peer_addr);$/;"	m	struct:nw_ses
on_accept	network/nw_svr.c	/^static int on_accept(nw_ses *ses, int sockfd, nw_addr_t *peer_addr)$/;"	f	file:
on_accept	network/nw_svr.h	/^    int (*on_accept)(nw_ses *ses, int sockfd, nw_addr_t *peer_addr);$/;"	m	struct:nw_svr_type
on_backend_connect	accesshttp/ah_server.c	/^static void on_backend_connect(nw_ses *ses, bool result)$/;"	f	file:
on_backend_connect	accessrest/ar_server.c	/^static void on_backend_connect(nw_ses *ses, bool result)$/;"	f	file:
on_backend_connect	accessrest/ar_ticker.c	/^static void on_backend_connect(nw_ses *ses, bool result)$/;"	f	file:
on_backend_connect	accessws/aw_asset.c	/^static void on_backend_connect(nw_ses *ses, bool result)$/;"	f	file:
on_backend_connect	accessws/aw_deals.c	/^static void on_backend_connect(nw_ses *ses, bool result)$/;"	f	file:
on_backend_connect	accessws/aw_depth.c	/^static void on_backend_connect(nw_ses *ses, bool result)$/;"	f	file:
on_backend_connect	accessws/aw_kline.c	/^static void on_backend_connect(nw_ses *ses, bool result)$/;"	f	file:
on_backend_connect	accessws/aw_server.c	/^static void on_backend_connect(nw_ses *ses, bool result)$/;"	f	file:
on_backend_connect	accessws/aw_state.c	/^static void on_backend_connect(nw_ses *ses, bool result)$/;"	f	file:
on_backend_recv_pkg	accesshttp/ah_server.c	/^static void on_backend_recv_pkg(nw_ses *ses, rpc_pkg *pkg)$/;"	f	file:
on_backend_recv_pkg	accessrest/ar_server.c	/^static void on_backend_recv_pkg(nw_ses *ses, rpc_pkg *pkg)$/;"	f	file:
on_backend_recv_pkg	accessrest/ar_ticker.c	/^static void on_backend_recv_pkg(nw_ses *ses, rpc_pkg *pkg)$/;"	f	file:
on_backend_recv_pkg	accessws/aw_asset.c	/^static void on_backend_recv_pkg(nw_ses *ses, rpc_pkg *pkg)$/;"	f	file:
on_backend_recv_pkg	accessws/aw_deals.c	/^static void on_backend_recv_pkg(nw_ses *ses, rpc_pkg *pkg)$/;"	f	file:
on_backend_recv_pkg	accessws/aw_depth.c	/^static void on_backend_recv_pkg(nw_ses *ses, rpc_pkg *pkg)$/;"	f	file:
on_backend_recv_pkg	accessws/aw_kline.c	/^static void on_backend_recv_pkg(nw_ses *ses, rpc_pkg *pkg)$/;"	f	file:
on_backend_recv_pkg	accessws/aw_server.c	/^static void on_backend_recv_pkg(nw_ses *ses, rpc_pkg *pkg)$/;"	f	file:
on_backend_recv_pkg	accessws/aw_state.c	/^static void on_backend_recv_pkg(nw_ses *ses, rpc_pkg *pkg)$/;"	f	file:
on_balance_query_reply	accessws/aw_asset.c	/^static int on_balance_query_reply(struct state_data *state, json_t *result)$/;"	f	file:
on_balances_message	accessws/aw_message.c	/^static void on_balances_message(sds message, int64_t offset)$/;"	f	file:
on_body	utils/http_parser.h	/^  http_data_cb on_body;$/;"	m	struct:http_parser_settings
on_body	utils/ut_http_svr.c	/^static int on_body(http_parser* parser, const char* at, size_t length)$/;"	f	file:
on_break_timer	network/nw_evt.c	/^static void on_break_timer(struct ev_loop *loop, ev_timer *ev, int events)$/;"	f	file:
on_cache_timer	marketprice/mp_server.c	/^static void on_cache_timer(nw_timer *timer, void *privdata)$/;"	f	file:
on_cache_timer	matchengine/me_server.c	/^static void on_cache_timer(nw_timer *timer, void *privdata)$/;"	f	file:
on_can_accept	network/nw_ses.c	/^static void on_can_accept(nw_ses *ses)$/;"	f	file:
on_can_connect	network/nw_ses.c	/^static void on_can_connect(nw_ses *ses)$/;"	f	file:
on_can_read	network/nw_job.c	/^static void on_can_read(struct ev_loop *loop, ev_io *watcher, int events)$/;"	f	file:
on_can_read	network/nw_ses.c	/^static void on_can_read(nw_ses *ses)$/;"	f	file:
on_can_read	utils/ut_kafka.c	/^static void on_can_read(struct ev_loop *loop, ev_io *watcher, int events)$/;"	f	file:
on_can_write	network/nw_ses.c	/^static void on_can_write(nw_ses *ses)$/;"	f	file:
on_chunk_complete	utils/http_parser.h	/^  http_cb      on_chunk_complete;$/;"	m	struct:http_parser_settings
on_chunk_header	utils/http_parser.h	/^  http_cb      on_chunk_header;$/;"	m	struct:http_parser_settings
on_cleanup	accessws/aw_auth.c	/^static void on_cleanup(nw_job_entry *entry)$/;"	f	file:
on_cleanup	accessws/aw_sign.c	/^static void on_cleanup(nw_job_entry *entry)$/;"	f	file:
on_cleanup	network/nw_job.h	/^    void (*on_cleanup)(nw_job_entry *entry);$/;"	m	struct:nw_job_type
on_clear_timer	marketprice/mp_message.c	/^static void on_clear_timer(nw_timer *timer, void *privdata)$/;"	f	file:
on_cli_cmd	utils/ut_cli.h	/^typedef sds (*on_cli_cmd)(const char *cmd, int argc, sds *argv);$/;"	t
on_close	accessws/aw_server.c	/^static void on_close(nw_ses *ses, const char *remote)$/;"	f	file:
on_close	depends/hiredis/adapters/libuv.h	/^static void on_close(uv_handle_t* handle) {$/;"	f
on_close	network/nw_clt.c	/^static void on_close(nw_ses *ses)$/;"	f	file:
on_close	network/nw_clt.h	/^    int (*on_close)(nw_ses *ses);$/;"	m	struct:nw_clt_type
on_close	network/nw_ses.h	/^    void (*on_close)(struct nw_ses *ses);$/;"	m	struct:nw_ses
on_close	network/nw_svr.c	/^static void on_close(nw_ses *ses)$/;"	f	file:
on_close	utils/ut_rpc_clt.c	/^static int on_close(nw_ses *ses)$/;"	f	file:
on_close	utils/ut_ws_svr.h	/^    void (*on_close)(nw_ses *ses, const char *remote);$/;"	m	struct:ws_svr_type
on_clt_connect	monitoragent/ma_server.c	/^static void on_clt_connect(nw_ses *ses, bool result)$/;"	f	file:
on_clt_recv_pkg	monitoragent/ma_server.c	/^static void on_clt_recv_pkg(nw_ses *ses, rpc_pkg *pkg)$/;"	f	file:
on_cmd_asset_list	matchengine/me_server.c	/^static int on_cmd_asset_list(nw_ses *ses, rpc_pkg *pkg, json_t *params)$/;"	f	file:
on_cmd_asset_lock	matchengine/me_server.c	/^static int on_cmd_asset_lock(nw_ses *ses, rpc_pkg *pkg, json_t *params)$/;"	f	file:
on_cmd_asset_query	matchengine/me_server.c	/^static int on_cmd_asset_query(nw_ses *ses, rpc_pkg *pkg, json_t *params)$/;"	f	file:
on_cmd_asset_query_lock	matchengine/me_server.c	/^static int on_cmd_asset_query_lock(nw_ses *ses, rpc_pkg *pkg, json_t *params)$/;"	f	file:
on_cmd_asset_unlock	matchengine/me_server.c	/^static int on_cmd_asset_unlock(nw_ses *ses, rpc_pkg *pkg, json_t *params)$/;"	f	file:
on_cmd_asset_update	matchengine/me_server.c	/^static int on_cmd_asset_update(nw_ses *ses, rpc_pkg *pkg, json_t *params)$/;"	f	file:
on_cmd_balance_history	readhistory/rh_server.c	/^static int on_cmd_balance_history(MYSQL *conn, json_t *params, struct job_reply *rsp)$/;"	f	file:
on_cmd_cancel_stop	matchengine/me_server.c	/^static int on_cmd_cancel_stop(nw_ses *ses, rpc_pkg *pkg, json_t *params)$/;"	f	file:
on_cmd_makeslice	matchengine/me_cli.c	/^static sds on_cmd_makeslice(const char *cmd, int argc, sds *argv)$/;"	f	file:
on_cmd_market_deals	marketprice/mp_server.c	/^static int on_cmd_market_deals(nw_ses *ses, rpc_pkg *pkg, json_t *params)$/;"	f	file:
on_cmd_market_deals_ext	marketprice/mp_server.c	/^static int on_cmd_market_deals_ext(nw_ses *ses, rpc_pkg *pkg, json_t *params)$/;"	f	file:
on_cmd_market_kline	marketprice/mp_server.c	/^static int on_cmd_market_kline(nw_ses *ses, rpc_pkg *pkg, json_t *params)$/;"	f	file:
on_cmd_market_last	marketprice/mp_server.c	/^static int on_cmd_market_last(nw_ses *ses, rpc_pkg *pkg, json_t *params)$/;"	f	file:
on_cmd_market_list	matchengine/me_server.c	/^static int on_cmd_market_list(nw_ses *ses, rpc_pkg *pkg, json_t *params)$/;"	f	file:
on_cmd_market_status	marketprice/mp_server.c	/^static int on_cmd_market_status(nw_ses *ses, rpc_pkg *pkg, json_t *params)$/;"	f	file:
on_cmd_monitor_daily	monitorcenter/mc_server.c	/^static int on_cmd_monitor_daily(nw_ses *ses, rpc_pkg *pkg, json_t *params)$/;"	f	file:
on_cmd_monitor_inc	monitoragent/ma_server.c	/^static int on_cmd_monitor_inc(json_t *params)$/;"	f	file:
on_cmd_monitor_inc	monitorcenter/mc_server.c	/^static int on_cmd_monitor_inc(nw_ses *ses, rpc_pkg *pkg, json_t *params)$/;"	f	file:
on_cmd_monitor_list_host	monitorcenter/mc_server.c	/^static int on_cmd_monitor_list_host(nw_ses *ses, rpc_pkg *pkg, json_t *params)$/;"	f	file:
on_cmd_monitor_list_key	monitorcenter/mc_server.c	/^static int on_cmd_monitor_list_key(nw_ses *ses, rpc_pkg *pkg, json_t *params)$/;"	f	file:
on_cmd_monitor_list_scope	monitorcenter/mc_server.c	/^static int on_cmd_monitor_list_scope(nw_ses *ses, rpc_pkg *pkg, json_t *params)$/;"	f	file:
on_cmd_monitor_query	monitorcenter/mc_server.c	/^static int on_cmd_monitor_query(nw_ses *ses, rpc_pkg *pkg, json_t *params)$/;"	f	file:
on_cmd_monitor_set	monitoragent/ma_server.c	/^static int on_cmd_monitor_set(json_t *params)$/;"	f	file:
on_cmd_monitor_set	monitorcenter/mc_server.c	/^static int on_cmd_monitor_set(nw_ses *ses, rpc_pkg *pkg, json_t *params)$/;"	f	file:
on_cmd_order_book	matchengine/me_server.c	/^static int on_cmd_order_book(nw_ses *ses, rpc_pkg *pkg, json_t *params)$/;"	f	file:
on_cmd_order_cancel	matchengine/me_server.c	/^static int on_cmd_order_cancel(nw_ses *ses, rpc_pkg *pkg, json_t *params)$/;"	f	file:
on_cmd_order_deals	readhistory/rh_server.c	/^static int on_cmd_order_deals(MYSQL *conn, json_t *params, struct job_reply *rsp)$/;"	f	file:
on_cmd_order_depth	matchengine/me_server.c	/^static int on_cmd_order_depth(nw_ses *ses, rpc_pkg *pkg, json_t *params)$/;"	f	file:
on_cmd_order_detail	matchengine/me_server.c	/^static int on_cmd_order_detail(nw_ses *ses, rpc_pkg *pkg, json_t *params)$/;"	f	file:
on_cmd_order_detail	readhistory/rh_server.c	/^static int on_cmd_order_detail(MYSQL *conn, json_t *params, struct job_reply *rsp)$/;"	f	file:
on_cmd_order_history	readhistory/rh_server.c	/^static int on_cmd_order_history(MYSQL *conn, json_t *params, struct job_reply *rsp)$/;"	f	file:
on_cmd_order_pending	matchengine/me_server.c	/^static int on_cmd_order_pending(nw_ses *ses, rpc_pkg *pkg, json_t *params)$/;"	f	file:
on_cmd_order_put_limit	matchengine/me_server.c	/^static int on_cmd_order_put_limit(nw_ses *ses, rpc_pkg *pkg, json_t *params)$/;"	f	file:
on_cmd_order_put_market	matchengine/me_server.c	/^static int on_cmd_order_put_market(nw_ses *ses, rpc_pkg *pkg, json_t *params)$/;"	f	file:
on_cmd_pending_stop	matchengine/me_server.c	/^static int on_cmd_pending_stop(nw_ses *ses, rpc_pkg *pkg, json_t *params)$/;"	f	file:
on_cmd_put_stop_limit	matchengine/me_server.c	/^static int on_cmd_put_stop_limit(nw_ses *ses, rpc_pkg *pkg, json_t *params)$/;"	f	file:
on_cmd_put_stop_market	matchengine/me_server.c	/^static int on_cmd_put_stop_market(nw_ses *ses, rpc_pkg *pkg, json_t *params)$/;"	f	file:
on_cmd_status	matchengine/me_cli.c	/^static sds on_cmd_status(const char *cmd, int argc, sds *argv)$/;"	f	file:
on_cmd_stop_book	matchengine/me_server.c	/^static int on_cmd_stop_book(nw_ses *ses, rpc_pkg *pkg, json_t *params)$/;"	f	file:
on_cmd_stop_history	readhistory/rh_server.c	/^static int on_cmd_stop_history(MYSQL *conn, json_t *params, struct job_reply *rsp)$/;"	f	file:
on_cmd_unfreeze	matchengine/me_cli.c	/^static sds on_cmd_unfreeze(const char *cmd, int argc, sds *argv)$/;"	f	file:
on_cmd_update_asset_config	matchengine/me_server.c	/^static int on_cmd_update_asset_config(nw_ses *ses, rpc_pkg *pkg, json_t *params)$/;"	f	file:
on_cmd_update_market_config	matchengine/me_server.c	/^static int on_cmd_update_market_config(nw_ses *ses, rpc_pkg *pkg, json_t *params)$/;"	f	file:
on_cmd_user_deals	readhistory/rh_server.c	/^static int on_cmd_user_deals(MYSQL *conn, json_t *params, struct job_reply *rsp)$/;"	f	file:
on_connect	network/nw_clt.c	/^static void on_connect(nw_ses *ses, bool result)$/;"	f	file:
on_connect	network/nw_clt.h	/^    void (*on_connect)(nw_ses *ses, bool result);$/;"	m	struct:nw_clt_type
on_connect	network/nw_ses.h	/^    void (*on_connect)(struct nw_ses *ses, bool result);$/;"	m	struct:nw_ses
on_connect	utils/ut_rpc_clt.c	/^static void on_connect(nw_ses *ses, bool result)$/;"	f	file:
on_connect	utils/ut_rpc_clt.h	/^    void (*on_connect)(nw_ses *ses, bool result);$/;"	m	struct:rpc_clt
on_connect	utils/ut_rpc_clt.h	/^    void (*on_connect)(nw_ses *ses, bool result);$/;"	m	struct:rpc_clt_type
on_connect_called	network/nw_clt.h	/^    bool on_connect_called;$/;"	m	struct:nw_clt
on_connect_timeout	network/nw_clt.c	/^static void on_connect_timeout(nw_timer *timer, void *privdata)$/;"	f	file:
on_connection_close	network/nw_svr.h	/^    void (*on_connection_close)(nw_ses *ses);$/;"	m	struct:nw_svr_type
on_connection_close	utils/ut_http_svr.c	/^static void on_connection_close(nw_ses *ses)$/;"	f	file:
on_connection_close	utils/ut_rpc_svr.h	/^    void (*on_connection_close)(nw_ses *ses);$/;"	m	struct:rpc_svr_type
on_connection_close	utils/ut_ws_svr.c	/^static void on_connection_close(nw_ses *ses)$/;"	f	file:
on_cron_check	accesshttp/ah_main.c	/^static void on_cron_check(nw_timer *timer, void *data)$/;"	f	file:
on_cron_check	accessrest/ar_main.c	/^static void on_cron_check(nw_timer *timer, void *data)$/;"	f	file:
on_cron_check	accessws/aw_main.c	/^static void on_cron_check(nw_timer *timer, void *data)$/;"	f	file:
on_cron_check	alertcenter/ac_main.c	/^static void on_cron_check(nw_timer *timer, void *data)$/;"	f	file:
on_cron_check	logwriter/lw_main.c	/^static void on_cron_check(nw_timer *timer, void *data)$/;"	f	file:
on_cron_check	marketprice/mp_main.c	/^static void on_cron_check(nw_timer *timer, void *data)$/;"	f	file:
on_cron_check	matchengine/me_main.c	/^static void on_cron_check(nw_timer *timer, void *data)$/;"	f	file:
on_cron_check	monitoragent/ma_main.c	/^static void on_cron_check(nw_timer *timer, void *data)$/;"	f	file:
on_cron_check	monitorcenter/mc_main.c	/^static void on_cron_check(nw_timer *timer, void *data)$/;"	f	file:
on_cron_check	readhistory/rh_main.c	/^static void on_cron_check(nw_timer *timer, void *data)$/;"	f	file:
on_deals_message	accessws/aw_message.c	/^static void on_deals_message(sds message, int64_t offset)$/;"	f	file:
on_deals_message	marketprice/mp_message.c	/^static void on_deals_message(sds message, int64_t offset)$/;"	f	file:
on_delivery	matchengine/me_message.c	/^static void on_delivery(rd_kafka_t *rk, const rd_kafka_message_t *rkmessage, void *opaque)$/;"	f	file:
on_error	network/nw_clt.c	/^static void on_error(nw_ses *ses, const char *msg)$/;"	f	file:
on_error	network/nw_ses.h	/^    void (*on_error)(struct nw_ses *ses, const char *msg);$/;"	m	struct:nw_ses
on_error	network/nw_svr.c	/^static void on_error(nw_ses *ses, const char *msg)$/;"	f	file:
on_error_msg	alertcenter/ac_server.c	/^static void on_error_msg(nw_ses *ses, const char *msg)$/;"	f	file:
on_error_msg	network/nw_clt.h	/^    void (*on_error_msg)(nw_ses *ses, const char *msg);$/;"	m	struct:nw_clt_type
on_error_msg	network/nw_svr.h	/^    void (*on_error_msg)(nw_ses *ses, const char *msg);$/;"	m	struct:nw_svr_type
on_error_msg	utils/ut_cli.c	/^static void on_error_msg(nw_ses *ses, const char *msg)$/;"	f	file:
on_error_msg	utils/ut_http_svr.c	/^static void on_error_msg(nw_ses *ses, const char *msg)$/;"	f	file:
on_error_msg	utils/ut_rpc_clt.c	/^static void on_error_msg(nw_ses *ses, const char *msg)$/;"	f	file:
on_error_msg	utils/ut_rpc_svr.c	/^static void on_error_msg(nw_ses *ses, const char *msg)$/;"	f	file:
on_error_msg	utils/ut_ws_svr.c	/^static void on_error_msg(nw_ses *ses, const char *msg)$/;"	f	file:
on_finish	accessws/aw_auth.c	/^static void on_finish(nw_job_entry *entry)$/;"	f	file:
on_finish	accessws/aw_sign.c	/^static void on_finish(nw_job_entry *entry)$/;"	f	file:
on_finish	network/nw_job.h	/^    void (*on_finish)(nw_job_entry *entry);$/;"	m	struct:nw_job_type
on_flush_timer	marketprice/mp_message.c	/^static void on_flush_timer(nw_timer *timer, void *privdata)$/;"	f	file:
on_header_field	utils/http_parser.h	/^  http_data_cb on_header_field;$/;"	m	struct:http_parser_settings
on_header_field	utils/ut_http_svr.c	/^static int on_header_field(http_parser* parser, const char* at, size_t length)$/;"	f	file:
on_header_value	utils/http_parser.h	/^  http_data_cb on_header_value;$/;"	m	struct:http_parser_settings
on_header_value	utils/ut_http_svr.c	/^static int on_header_value(http_parser* parser, const char* at, size_t length)$/;"	f	file:
on_headers_complete	utils/http_parser.h	/^  http_cb      on_headers_complete;$/;"	m	struct:http_parser_settings
on_heartbeat	utils/ut_rpc_svr.c	/^static int on_heartbeat(nw_ses *ses, rpc_pkg *pkg)$/;"	f	file:
on_help	utils/ut_cli.c	/^static sds on_help(dict_t *dict)$/;"	f	file:
on_http_body	utils/ut_ws_svr.c	/^static int on_http_body(http_parser* parser, const char* at, size_t length)$/;"	f	file:
on_http_header_field	utils/ut_ws_svr.c	/^static int on_http_header_field(http_parser* parser, const char* at, size_t length)$/;"	f	file:
on_http_header_value	utils/ut_ws_svr.c	/^static int on_http_header_value(http_parser* parser, const char* at, size_t length)$/;"	f	file:
on_http_message_begin	utils/ut_ws_svr.c	/^static int on_http_message_begin(http_parser* parser)$/;"	f	file:
on_http_message_complete	utils/ut_ws_svr.c	/^static int on_http_message_complete(http_parser* parser)$/;"	f	file:
on_http_request	accesshttp/ah_server.c	/^static int on_http_request(nw_ses *ses, http_request_t *request)$/;"	f	file:
on_http_request	accessrest/ar_server.c	/^static int on_http_request(nw_ses *ses, http_request_t *request)$/;"	f	file:
on_http_url	utils/ut_ws_svr.c	/^static int on_http_url(http_parser* parser, const char* at, size_t length)$/;"	f	file:
on_init	network/nw_job.h	/^    void *(*on_init)(void);$/;"	m	struct:nw_job_type
on_job	accessws/aw_auth.c	/^static void on_job(nw_job_entry *entry, void *privdata)$/;"	f	file:
on_job	accessws/aw_http.c	/^static void on_job(nw_job_entry *entry, void *privdata)$/;"	f	file:
on_job	accessws/aw_sign.c	/^static void on_job(nw_job_entry *entry, void *privdata)$/;"	f	file:
on_job	matchengine/me_history.c	/^static void on_job(nw_job_entry *entry, void *privdata)$/;"	f	file:
on_job	matchengine/me_operlog.c	/^static void on_job(nw_job_entry *entry, void *privdata)$/;"	f	file:
on_job	network/nw_job.h	/^    void (*on_job)(nw_job_entry *entry, void *privdata);$/;"	m	struct:nw_job_type
on_job	readhistory/rh_server.c	/^static void on_job(nw_job_entry *entry, void *privdata)$/;"	f	file:
on_job_cleanup	accessws/aw_http.c	/^static void on_job_cleanup(nw_job_entry *entry)$/;"	f	file:
on_job_cleanup	matchengine/me_history.c	/^static void on_job_cleanup(nw_job_entry *entry)$/;"	f	file:
on_job_cleanup	matchengine/me_operlog.c	/^static void on_job_cleanup(nw_job_entry *entry)$/;"	f	file:
on_job_cleanup	readhistory/rh_server.c	/^static void on_job_cleanup(nw_job_entry *entry)$/;"	f	file:
on_job_finish	accessws/aw_http.c	/^static void on_job_finish(nw_job_entry *entry)$/;"	f	file:
on_job_finish	matchengine/me_history.c	/^static void on_job_finish(nw_job_entry *entry)$/;"	f	file:
on_job_finish	readhistory/rh_server.c	/^static void on_job_finish(nw_job_entry *entry)$/;"	f	file:
on_job_init	matchengine/me_history.c	/^static void *on_job_init(void)$/;"	f	file:
on_job_init	matchengine/me_operlog.c	/^static void *on_job_init(void)$/;"	f	file:
on_job_init	readhistory/rh_server.c	/^static void *on_job_init(void)$/;"	f	file:
on_job_release	matchengine/me_history.c	/^static void on_job_release(void *privdata)$/;"	f	file:
on_job_release	matchengine/me_operlog.c	/^static void on_job_release(void *privdata)$/;"	f	file:
on_job_release	readhistory/rh_server.c	/^static void on_job_release(void *privdata)$/;"	f	file:
on_key_compare	utils/ut_cli.c	/^static int on_key_compare(const void *key1, const void *key2)$/;"	f	file:
on_key_destructor	utils/ut_cli.c	/^static void on_key_destructor(void *key)$/;"	f	file:
on_key_dup	utils/ut_cli.c	/^static void *on_key_dup(const void *key)$/;"	f	file:
on_list_dup	matchengine/me_history.c	/^static void *on_list_dup(void *val)$/;"	f	file:
on_list_free	matchengine/me_history.c	/^static void on_list_free(void *val)$/;"	f	file:
on_list_free	matchengine/me_message.c	/^static void on_list_free(void *value)$/;"	f	file:
on_list_free	matchengine/me_operlog.c	/^static void on_list_free(void *value)$/;"	f	file:
on_listener_connect	accesshttp/ah_server.c	/^static void on_listener_connect(nw_ses *ses, bool result)$/;"	f	file:
on_listener_connect	accessrest/ar_server.c	/^static void on_listener_connect(nw_ses *ses, bool result)$/;"	f	file:
on_listener_connect	accessws/aw_server.c	/^static void on_listener_connect(nw_ses *ses, bool result)$/;"	f	file:
on_listener_recv_fd	accesshttp/ah_server.c	/^static void on_listener_recv_fd(nw_ses *ses, int fd)$/;"	f	file:
on_listener_recv_fd	accessrest/ar_server.c	/^static void on_listener_recv_fd(nw_ses *ses, int fd)$/;"	f	file:
on_listener_recv_fd	accessws/aw_server.c	/^static void on_listener_recv_fd(nw_ses *ses, int fd)$/;"	f	file:
on_listener_recv_pkg	accesshttp/ah_server.c	/^static void on_listener_recv_pkg(nw_ses *ses, rpc_pkg *pkg)$/;"	f	file:
on_listener_recv_pkg	accessrest/ar_server.c	/^static void on_listener_recv_pkg(nw_ses *ses, rpc_pkg *pkg)$/;"	f	file:
on_listener_recv_pkg	accessws/aw_server.c	/^static void on_listener_recv_pkg(nw_ses *ses, rpc_pkg *pkg)$/;"	f	file:
on_logger	matchengine/me_message.c	/^static void on_logger(const rd_kafka_t *rk, int level, const char *fac, const char *buf)$/;"	f	file:
on_logger	utils/ut_kafka.c	/^static void on_logger(const rd_kafka_t *rk, int level, const char *fac, const char *buf)$/;"	f	file:
on_market_deals	accessrest/ar_server.c	/^static int on_market_deals(nw_ses *ses, dict_t *params)$/;"	f	file:
on_market_depth	accessrest/ar_server.c	/^static int on_market_depth(nw_ses *ses, dict_t *params)$/;"	f	file:
on_market_depth_reply	accessws/aw_depth.c	/^static int on_market_depth_reply(struct state_data *state, json_t *result)$/;"	f	file:
on_market_kline	accessrest/ar_server.c	/^static int on_market_kline(nw_ses *ses, dict_t *params)$/;"	f	file:
on_market_kline_reply	accessws/aw_kline.c	/^static int on_market_kline_reply(struct state_data *state, json_t *result)$/;"	f	file:
on_market_list	accessrest/ar_server.c	/^static int on_market_list(nw_ses *ses, dict_t *params)$/;"	f	file:
on_market_list_callback	accessws/aw_state.c	/^static void on_market_list_callback(json_t *result)$/;"	f	file:
on_market_list_reply	accessrest/ar_ticker.c	/^static int on_market_list_reply(struct state_data *state, json_t *result)$/;"	f	file:
on_market_status_reply	accessrest/ar_ticker.c	/^static int on_market_status_reply(struct state_data *state, json_t *result)$/;"	f	file:
on_market_status_reply	accessws/aw_state.c	/^static int on_market_status_reply(struct state_data *state, json_t *result)$/;"	f	file:
on_market_ticker	accessrest/ar_server.c	/^static int on_market_ticker(nw_ses *ses, dict_t *params)$/;"	f	file:
on_market_ticker_all	accessrest/ar_server.c	/^static int on_market_ticker_all(nw_ses *ses, dict_t *params)$/;"	f	file:
on_market_timer	accessrest/ar_ticker.c	/^static void on_market_timer(nw_timer *timer, void *privdata)$/;"	f	file:
on_market_timer	accessws/aw_state.c	/^static void on_market_timer(nw_timer *timer, void *privdata)$/;"	f	file:
on_market_timer	marketprice/mp_message.c	/^static void on_market_timer(nw_timer *timer, void *privdata)$/;"	f	file:
on_message	accessws/aw_server.c	/^static int on_message(nw_ses *ses, const char *remote, const char *url, void *message, size_t size)$/;"	f	file:
on_message	utils/ut_ws_svr.h	/^    int (*on_message)(nw_ses *ses, const char *remote, const char *url, void *message, size_t size);$/;"	m	struct:ws_svr_type
on_message_begin	utils/http_parser.h	/^  http_cb      on_message_begin;$/;"	m	struct:http_parser_settings
on_message_begin	utils/ut_http_svr.c	/^static int on_message_begin(http_parser* parser)$/;"	f	file:
on_message_complete	utils/http_parser.h	/^  http_cb      on_message_complete;$/;"	m	struct:http_parser_settings
on_message_complete	utils/ut_http_svr.c	/^static int on_message_complete(http_parser* parser)$/;"	f	file:
on_method_asset_query	accessws/aw_server.c	/^static int on_method_asset_query(nw_ses *ses, uint64_t id, struct clt_info *info, json_t *params)$/;"	f	file:
on_method_asset_subscribe	accessws/aw_server.c	/^static int on_method_asset_subscribe(nw_ses *ses, uint64_t id, struct clt_info *info, json_t *params)$/;"	f	file:
on_method_asset_unsubscribe	accessws/aw_server.c	/^static int on_method_asset_unsubscribe(nw_ses *ses, uint64_t id, struct clt_info *info, json_t *params)$/;"	f	file:
on_method_deals_query	accessws/aw_server.c	/^static int on_method_deals_query(nw_ses *ses, uint64_t id, struct clt_info *info, json_t *params)$/;"	f	file:
on_method_deals_query_user	accessws/aw_server.c	/^static int on_method_deals_query_user(nw_ses *ses, uint64_t id, struct clt_info *info, json_t *params)$/;"	f	file:
on_method_deals_subscribe	accessws/aw_server.c	/^static int on_method_deals_subscribe(nw_ses *ses, uint64_t id, struct clt_info *info, json_t *params)$/;"	f	file:
on_method_deals_unsubscribe	accessws/aw_server.c	/^static int on_method_deals_unsubscribe(nw_ses *ses, uint64_t id, struct clt_info *info, json_t *params)$/;"	f	file:
on_method_depth_query	accessws/aw_server.c	/^static int on_method_depth_query(nw_ses *ses, uint64_t id, struct clt_info *info, json_t *params)$/;"	f	file:
on_method_depth_subscribe	accessws/aw_server.c	/^static int on_method_depth_subscribe(nw_ses *ses, uint64_t id, struct clt_info *info, json_t *params)$/;"	f	file:
on_method_depth_unsubscribe	accessws/aw_server.c	/^static int on_method_depth_unsubscribe(nw_ses *ses, uint64_t id, struct clt_info *info, json_t *params)$/;"	f	file:
on_method_kline_query	accessws/aw_server.c	/^static int on_method_kline_query(nw_ses *ses, uint64_t id, struct clt_info *info, json_t *params)$/;"	f	file:
on_method_kline_subscribe	accessws/aw_server.c	/^static int on_method_kline_subscribe(nw_ses *ses, uint64_t id, struct clt_info *info, json_t *params)$/;"	f	file:
on_method_kline_unsubscribe	accessws/aw_server.c	/^static int on_method_kline_unsubscribe(nw_ses *ses, uint64_t id, struct clt_info *info, json_t *params)$/;"	f	file:
on_method_order_query	accessws/aw_server.c	/^static int on_method_order_query(nw_ses *ses, uint64_t id, struct clt_info *info, json_t *params)$/;"	f	file:
on_method_order_query_stop	accessws/aw_server.c	/^static int on_method_order_query_stop(nw_ses *ses, uint64_t id, struct clt_info *info, json_t *params)$/;"	f	file:
on_method_order_subscribe	accessws/aw_server.c	/^static int on_method_order_subscribe(nw_ses *ses, uint64_t id, struct clt_info *info, json_t *params)$/;"	f	file:
on_method_order_unsubscribe	accessws/aw_server.c	/^static int on_method_order_unsubscribe(nw_ses *ses, uint64_t id, struct clt_info *info, json_t *params)$/;"	f	file:
on_method_server_auth	accessws/aw_server.c	/^static int on_method_server_auth(nw_ses *ses, uint64_t id, struct clt_info *info, json_t *params)$/;"	f	file:
on_method_server_ping	accessws/aw_server.c	/^static int on_method_server_ping(nw_ses *ses, uint64_t id, struct clt_info *info, json_t *params)$/;"	f	file:
on_method_server_sign	accessws/aw_server.c	/^static int on_method_server_sign(nw_ses *ses, uint64_t id, struct clt_info *info, json_t *params)$/;"	f	file:
on_method_server_time	accessws/aw_server.c	/^static int on_method_server_time(nw_ses *ses, uint64_t id, struct clt_info *info, json_t *params)$/;"	f	file:
on_method_state_query	accessws/aw_server.c	/^static int on_method_state_query(nw_ses *ses, uint64_t id, struct clt_info *info, json_t *params)$/;"	f	file:
on_method_state_subscribe	accessws/aw_server.c	/^static int on_method_state_subscribe(nw_ses *ses, uint64_t id, struct clt_info *info, json_t *params)$/;"	f	file:
on_method_state_unsubscribe	accessws/aw_server.c	/^static int on_method_state_unsubscribe(nw_ses *ses, uint64_t id, struct clt_info *info, json_t *params)$/;"	f	file:
on_new_connection	network/nw_svr.h	/^    void (*on_new_connection)(nw_ses *ses);$/;"	m	struct:nw_svr_type
on_new_connection	utils/ut_http_svr.c	/^static void on_new_connection(nw_ses *ses)$/;"	f	file:
on_new_connection	utils/ut_rpc_svr.c	/^static void on_new_connection(nw_ses *ses)$/;"	f	file:
on_new_connection	utils/ut_rpc_svr.h	/^    void (*on_new_connection)(nw_ses *ses);$/;"	m	struct:rpc_svr
on_new_connection	utils/ut_rpc_svr.h	/^    void (*on_new_connection)(nw_ses *ses);$/;"	m	struct:rpc_svr_type
on_new_connection	utils/ut_ws_svr.c	/^static void on_new_connection(nw_ses *ses)$/;"	f	file:
on_notify_timer	accessws/aw_state.c	/^static void on_notify_timer(nw_timer *timer, void *privdata)$/;"	f	file:
on_order_deals_reply	accessws/aw_deals.c	/^static int on_order_deals_reply(struct state_data *state, json_t *result)$/;"	f	file:
on_order_depth_reply	accessrest/ar_ticker.c	/^static int on_order_depth_reply(struct state_data *state, json_t *result)$/;"	f	file:
on_orders_message	accessws/aw_message.c	/^static void on_orders_message(sds message, int64_t offset)$/;"	f	file:
on_ping	accessrest/ar_server.c	/^static int on_ping(nw_ses *ses, dict_t *params)$/;"	f	file:
on_privdata_alloc	accessws/aw_server.c	/^static void *on_privdata_alloc(void *svr)$/;"	f	file:
on_privdata_alloc	network/nw_svr.h	/^    void *(*on_privdata_alloc)(void *svr);$/;"	m	struct:nw_svr_type
on_privdata_alloc	utils/ut_http_svr.c	/^static void *on_privdata_alloc(void *svr)$/;"	f	file:
on_privdata_alloc	utils/ut_rpc_svr.c	/^static void *on_privdata_alloc(void *svr)$/;"	f	file:
on_privdata_alloc	utils/ut_ws_svr.c	/^static void *on_privdata_alloc(void *svr)$/;"	f	file:
on_privdata_alloc	utils/ut_ws_svr.h	/^    void *(*on_privdata_alloc)(void *svr);$/;"	m	struct:ws_svr_type
on_privdata_free	accessws/aw_server.c	/^static void on_privdata_free(void *svr, void *privdata)$/;"	f	file:
on_privdata_free	network/nw_svr.h	/^    void (*on_privdata_free)(void *svr, void *privdata);$/;"	m	struct:nw_svr_type
on_privdata_free	utils/ut_http_svr.c	/^static void on_privdata_free(void *svr, void *privdata)$/;"	f	file:
on_privdata_free	utils/ut_rpc_svr.c	/^static void on_privdata_free(void *svr, void *privdata)$/;"	f	file:
on_privdata_free	utils/ut_ws_svr.c	/^static void on_privdata_free(void *svr, void *privdata)$/;"	f	file:
on_privdata_free	utils/ut_ws_svr.h	/^    void (*on_privdata_free)(void *svr, void *privdata);$/;"	m	struct:ws_svr_type
on_reconnect_timeout	network/nw_clt.c	/^static void on_reconnect_timeout(nw_timer *timer, void *privdata)$/;"	f	file:
on_recv_fd	network/nw_clt.c	/^static void on_recv_fd(nw_ses *ses, int fd)$/;"	f	file:
on_recv_fd	network/nw_clt.h	/^    void (*on_recv_fd)(nw_ses *ses, int fd);$/;"	m	struct:nw_clt_type
on_recv_fd	network/nw_ses.h	/^    void (*on_recv_fd)(struct nw_ses *ses, int fd);$/;"	m	struct:nw_ses
on_recv_fd	network/nw_svr.c	/^static void on_recv_fd(nw_ses *ses, int fd)$/;"	f	file:
on_recv_fd	network/nw_svr.h	/^    void (*on_recv_fd)(nw_ses *ses, int fd);$/;"	m	struct:nw_svr_type
on_recv_fd	utils/ut_rpc_clt.h	/^    void (*on_recv_fd)(nw_ses *ses, int fd);$/;"	m	struct:rpc_clt_type
on_recv_fd	utils/ut_rpc_svr.h	/^    void (*on_recv_fd)(nw_ses *ses, int fd);$/;"	m	struct:rpc_svr_type
on_recv_pkg	alertcenter/ac_server.c	/^static void on_recv_pkg(nw_ses *ses, void *data, size_t size)$/;"	f	file:
on_recv_pkg	logwriter/lw_server.c	/^static void on_recv_pkg(nw_ses *ses, void *data, size_t size)$/;"	f	file:
on_recv_pkg	network/nw_clt.h	/^    void (*on_recv_pkg)(nw_ses *ses, void *data, size_t size);$/;"	m	struct:nw_clt_type
on_recv_pkg	network/nw_ses.h	/^    void (*on_recv_pkg)(struct nw_ses *ses, void *data, size_t size);$/;"	m	struct:nw_ses
on_recv_pkg	network/nw_svr.h	/^    void (*on_recv_pkg)(nw_ses *ses, void *data, size_t size);$/;"	m	struct:nw_svr_type
on_recv_pkg	utils/ut_cli.c	/^static void on_recv_pkg(nw_ses *ses, void *data, size_t size)$/;"	f	file:
on_recv_pkg	utils/ut_http_svr.c	/^static void on_recv_pkg(nw_ses *ses, void *data, size_t size)$/;"	f	file:
on_recv_pkg	utils/ut_rpc_clt.c	/^static void on_recv_pkg(nw_ses *ses, void *data, size_t size)$/;"	f	file:
on_recv_pkg	utils/ut_rpc_clt.h	/^    void (*on_recv_pkg)(nw_ses *ses, rpc_pkg *pkg);$/;"	m	struct:rpc_clt
on_recv_pkg	utils/ut_rpc_clt.h	/^    void (*on_recv_pkg)(nw_ses *ses, rpc_pkg *pkg);$/;"	m	struct:rpc_clt_type
on_recv_pkg	utils/ut_rpc_svr.c	/^static void on_recv_pkg(nw_ses *ses, void *data, size_t size)$/;"	f	file:
on_recv_pkg	utils/ut_rpc_svr.h	/^    void (*on_recv_pkg)(nw_ses *ses, rpc_pkg *pkg);$/;"	m	struct:rpc_svr
on_recv_pkg	utils/ut_rpc_svr.h	/^    void (*on_recv_pkg)(nw_ses *ses, rpc_pkg *pkg);$/;"	m	struct:rpc_svr_type
on_recv_pkg	utils/ut_ws_svr.c	/^static void on_recv_pkg(nw_ses *ses, void *data, size_t size)$/;"	f	file:
on_redis_timer	marketprice/mp_message.c	/^static void on_redis_timer(nw_timer *timer, void *privdata)$/;"	f	file:
on_release	accessrest/ar_server.c	/^static void on_release(nw_state_entry *entry)$/;"	f	file:
on_release	accessws/aw_server.c	/^static void on_release(nw_state_entry *entry)$/;"	f	file:
on_release	network/nw_job.h	/^    void (*on_release)(void *privdata);$/;"	m	struct:nw_job_type
on_release	network/nw_state.h	/^    void (*on_release)(nw_state_entry *entry);$/;"	m	struct:nw_state_type
on_request	utils/ut_http_svr.h	/^    http_request_callback on_request;$/;"	m	struct:http_svr
on_request_method	accessrest/ar_server.c	/^typedef int (*on_request_method)(nw_ses *ses, dict_t *params);$/;"	t	file:
on_request_method	accessws/aw_server.c	/^typedef int (*on_request_method)(nw_ses *ses, uint64_t id, struct clt_info *info, json_t *params);$/;"	t	file:
on_result	accessws/aw_auth.c	/^static void on_result(struct state_data *state, sds token, json_t *result)$/;"	f	file:
on_result	accessws/aw_sign.c	/^static void on_result(struct state_data *state, struct sign_request *request, json_t *result)$/;"	f	file:
on_state_timeout	accesshttp/ah_server.c	/^static void on_state_timeout(nw_state_entry *entry)$/;"	f	file:
on_state_timeout	marketprice/mp_access.c	/^static void on_state_timeout(nw_state_entry *entry)$/;"	f	file:
on_status	utils/http_parser.h	/^  http_data_cb on_status;$/;"	m	struct:http_parser_settings
on_stops_message	accessws/aw_message.c	/^static void on_stops_message(sds message, int64_t offset)$/;"	f	file:
on_svr_decode_pkg	monitoragent/ma_server.c	/^static int on_svr_decode_pkg(nw_ses *ses, void *data, size_t max)$/;"	f	file:
on_svr_error_msg	monitoragent/ma_server.c	/^static void on_svr_error_msg(nw_ses *ses, const char *msg)$/;"	f	file:
on_svr_recv_pkg	monitoragent/ma_server.c	/^static void on_svr_recv_pkg(nw_ses *ses, void *data, size_t size)$/;"	f	file:
on_timeout	accessrest/ar_server.c	/^static void on_timeout(nw_state_entry *entry)$/;"	f	file:
on_timeout	accessrest/ar_ticker.c	/^static void on_timeout(nw_state_entry *entry)$/;"	f	file:
on_timeout	accessws/aw_asset.c	/^static void on_timeout(nw_state_entry *entry)$/;"	f	file:
on_timeout	accessws/aw_auth.c	/^static void on_timeout(nw_state_entry *entry)$/;"	f	file:
on_timeout	accessws/aw_deals.c	/^static void on_timeout(nw_state_entry *entry)$/;"	f	file:
on_timeout	accessws/aw_depth.c	/^static void on_timeout(nw_state_entry *entry)$/;"	f	file:
on_timeout	accessws/aw_kline.c	/^static void on_timeout(nw_state_entry *entry)$/;"	f	file:
on_timeout	accessws/aw_server.c	/^static void on_timeout(nw_state_entry *entry)$/;"	f	file:
on_timeout	accessws/aw_sign.c	/^static void on_timeout(nw_state_entry *entry)$/;"	f	file:
on_timeout	accessws/aw_state.c	/^static void on_timeout(nw_state_entry *entry)$/;"	f	file:
on_timeout	network/nw_state.c	/^static void on_timeout(struct ev_loop *loop, ev_timer *ev, int events)$/;"	f	file:
on_timeout	network/nw_state.h	/^    void (*on_timeout)(nw_state_entry *entry);$/;"	m	struct:nw_state_type
on_timer	accessrest/ar_server.c	/^static void on_timer(nw_timer *timer, void *privdata)$/;"	f	file:
on_timer	accessws/aw_deals.c	/^static void on_timer(nw_timer *timer, void *privdata)$/;"	f	file:
on_timer	accessws/aw_depth.c	/^static void on_timer(nw_timer *timer, void *privdata)$/;"	f	file:
on_timer	accessws/aw_kline.c	/^static void on_timer(nw_timer *timer, void *privdata)$/;"	f	file:
on_timer	accessws/aw_server.c	/^static void on_timer(nw_timer *timer, void *privdata)$/;"	f	file:
on_timer	matchengine/me_history.c	/^static void on_timer(nw_timer *t, void *privdata)$/;"	f	file:
on_timer	matchengine/me_market.c	/^static void on_timer(nw_timer *timer, void *privdata)$/;"	f	file:
on_timer	matchengine/me_message.c	/^static void on_timer(nw_timer *t, void *privdata)$/;"	f	file:
on_timer	matchengine/me_operlog.c	/^static void on_timer(nw_timer *t, void *privdata)$/;"	f	file:
on_timer	matchengine/me_persist.c	/^static void on_timer(nw_timer *timer, void *privdata)$/;"	f	file:
on_timer	matchengine/me_trade.c	/^static void on_timer(nw_timer *timer, void *privdata)$/;"	f	file:
on_timer	matchengine/me_update.c	/^static void on_timer(nw_timer *t, void *privdata)$/;"	f	file:
on_timer	monitoragent/ma_server.c	/^static void on_timer(nw_timer *timer, void *privdata)$/;"	f	file:
on_timer	monitorcenter/mc_server.c	/^static void on_timer(nw_timer *timer, void *privdata)$/;"	f	file:
on_timer	network/nw_timer.c	/^static void on_timer(struct ev_loop *loop, ev_timer *ev, int events)$/;"	f	file:
on_timer	utils/ut_http_svr.c	/^static void on_timer(nw_timer *timer, void *privdata)$/;"	f	file:
on_timer	utils/ut_profile.c	/^static void on_timer(nw_timer *timer, void *privdata)$/;"	f	file:
on_timer	utils/ut_rpc_clt.c	/^static void on_timer(nw_timer *timer, void *privdata)$/;"	f	file:
on_timer	utils/ut_rpc_svr.c	/^static void on_timer(nw_timer *timer, void *privdata)$/;"	f	file:
on_timer	utils/ut_ws_svr.c	/^static void on_timer(nw_timer *timer, void *privdata)$/;"	f	file:
on_update_timer	accessrest/ar_ticker.c	/^static void on_update_timer(nw_timer *timer, void *privdata)$/;"	f	file:
on_update_timer	accessws/aw_state.c	/^static void on_update_timer(nw_timer *timer, void *privdata)$/;"	f	file:
on_upgrade	accessws/aw_server.c	/^static void on_upgrade(nw_ses *ses, const char *remote)$/;"	f	file:
on_upgrade	utils/ut_ws_svr.h	/^    void (*on_upgrade)(nw_ses *ses, const char *remote);$/;"	m	struct:ws_svr_type
on_url	utils/http_parser.h	/^  http_data_cb on_url;$/;"	m	struct:http_parser_settings
on_url	utils/ut_http_svr.c	/^static int on_url(http_parser* parser, const char* at, size_t length)$/;"	f	file:
on_worker_connect	marketprice/mp_access.c	/^static void on_worker_connect(nw_ses *ses, bool result)$/;"	f	file:
on_worker_recv_pkg	marketprice/mp_access.c	/^static void on_worker_recv_pkg(nw_ses *ses, rpc_pkg *pkg)$/;"	f	file:
opcode	utils/ut_ws_svr.c	/^    uint8_t     opcode;$/;"	m	struct:ws_frame	file:
open	marketprice/mp_kline.h	/^    mpd_t *open;$/;"	m	struct:kline_info
operlog	matchengine/me_operlog.c	/^struct operlog {$/;"	s	file:
operlog_id_start	matchengine/me_operlog.c	/^uint64_t operlog_id_start;$/;"	v
operlog_status	matchengine/me_operlog.c	/^sds operlog_status(sds reply)$/;"	f
order_free	matchengine/me_market.c	/^static void order_free(order_t *order)$/;"	f	file:
order_id	matchengine/me_history.c	/^    uint64_t order_id;$/;"	m	struct:dict_order_key	file:
order_id	matchengine/me_market.c	/^    uint64_t    order_id;$/;"	m	struct:dict_order_key	file:
order_id_compare	matchengine/me_market.c	/^static int order_id_compare(const void *value1, const void *value2)$/;"	f	file:
order_id_start	matchengine/me_market.c	/^uint64_t order_id_start;$/;"	v
order_match_compare	matchengine/me_market.c	/^static int order_match_compare(const void *value1, const void *value2)$/;"	f	file:
order_on_update	accessws/aw_order.c	/^int order_on_update(uint32_t user_id, int event, json_t *order)$/;"	f
order_on_update_stop	accessws/aw_order.c	/^int order_on_update_stop(uint32_t user_id, int event, json_t *order)$/;"	f
order_subscribe	accessws/aw_order.c	/^int order_subscribe(uint32_t user_id, nw_ses *ses, const char *market)$/;"	f
order_subscribe_number	accessws/aw_order.c	/^size_t order_subscribe_number(void)$/;"	f
order_t	matchengine/me_market.h	/^typedef struct order_t {$/;"	s
order_t	matchengine/me_market.h	/^} order_t;$/;"	t	typeref:struct:order_t
order_unsubscribe	accessws/aw_order.c	/^int order_unsubscribe(uint32_t user_id, nw_ses *ses)$/;"	f
orderids	matchengine/me_history.c	/^    list_t *orderids;$/;"	m	struct:dict_sql_val	file:
orders	accessws/aw_config.h	/^    kafka_consumer_cfg  orders;$/;"	m	struct:settings
orders	matchengine/me_market.h	/^    dict_t          *orders;$/;"	m	struct:market_t
origin	utils/ut_ws_svr.h	/^    char *origin;$/;"	m	struct:ws_svr
origin	utils/ut_ws_svr.h	/^    char *origin;$/;"	m	struct:ws_svr_cfg
p_head	utils/ut_queue.c	/^    uint32_t p_head;$/;"	m	struct:queue_head	file:
p_tail	utils/ut_queue.c	/^    uint32_t p_tail;$/;"	m	struct:queue_head	file:
pack_buf	utils/ut_pack.c	/^int pack_buf(void **dest, size_t *left, const void *data, size_t len)$/;"	f
pack_char	utils/ut_pack.c	/^int pack_char(void **dest, size_t *left, uint8_t c)$/;"	f
pack_oppush	utils/ut_pack.c	/^int pack_oppush(void **dest, size_t *left, const char *data, size_t len)$/;"	f
pack_oppushint_le	utils/ut_pack.c	/^int pack_oppushint_le(void **dest, size_t *left, int64_t num)$/;"	f
pack_uint16_le	utils/ut_pack.c	/^int pack_uint16_le(void **dest, size_t *left, uint16_t num)$/;"	f
pack_uint32_le	utils/ut_pack.c	/^int pack_uint32_le(void **dest, size_t *left, uint32_t num)$/;"	f
pack_uint64_le	utils/ut_pack.c	/^int pack_uint64_le(void **dest, size_t *left, uint64_t num)$/;"	f
pack_varint_le	utils/ut_pack.c	/^int pack_varint_le(void **dest, size_t *left, uint64_t num)$/;"	f
pack_varstr	utils/ut_pack.c	/^int pack_varstr(void **dest, size_t *left, const char *str, size_t len)$/;"	f
params	accessws/aw_http.c	/^    json_t *params;$/;"	m	struct:http_request	file:
params	readhistory/rh_server.c	/^    json_t   *params;$/;"	m	struct:job_request	file:
params	utils/ut_http.h	/^    dict_t      *params;$/;"	m	struct:http_params_t
parent	depends/hiredis/read.h	/^    struct redisReadTask *parent; \/* parent task *\/$/;"	m	struct:redisReadTask	typeref:struct:redisReadTask::redisReadTask
parse	test/utils/test_http.c	/^int parse(char *url)$/;"	f
parse_inetv4_addr	utils/ut_config.c	/^int parse_inetv4_addr(const char *str, struct sockaddr_in *addr)$/;"	f
parse_url_char	utils/http_parser.c	/^parse_url_char(enum state s, const char ch)$/;"	f	file:
parser	utils/ut_http_svr.c	/^    struct  http_parser parser;$/;"	m	struct:clt_info	typeref:struct:clt_info::http_parser	file:
parser	utils/ut_ws_svr.c	/^    struct      http_parser parser;$/;"	m	struct:clt_info	typeref:struct:clt_info::http_parser	file:
partition	utils/ut_kafka.h	/^    int     partition;$/;"	m	struct:kafka_consumer_cfg
partition	utils/ut_kafka.h	/^    int32_t partition;$/;"	m	struct:kafka_consumer_t
pass	utils/ut_config.h	/^    char    *pass;$/;"	m	struct:mysql_cfg
path	depends/hiredis/hiredis.h	/^        char *path;$/;"	m	struct:redisContext::__anon14
path	depends/hiredis/test.c	/^        const char *path;$/;"	m	struct:config::__anon20	file:
path	utils/ut_config.h	/^    char   *path;$/;"	m	struct:log_cfg
path	utils/ut_http.h	/^    char        *path;$/;"	m	struct:http_params_t
patterns	depends/hiredis/async.h	/^        struct dict *patterns;$/;"	m	struct:redisAsyncContext::__anon18	typeref:struct:redisAsyncContext::__anon18::dict
payload	utils/ut_ws_svr.c	/^    void        *payload;$/;"	m	struct:ws_frame	file:
payload_len	utils/ut_ws_svr.c	/^    uint64_t    payload_len;$/;"	m	struct:ws_frame	file:
peer_addr	network/nw_ses.h	/^    nw_addr_t peer_addr;$/;"	m	struct:nw_ses
pending_auth_request	accessws/aw_auth.c	/^size_t pending_auth_request(void)$/;"	f
pending_sign_request	accessws/aw_sign.c	/^size_t pending_sign_request(void)$/;"	f
pipefd	network/nw_job.h	/^    int pipefd[2];$/;"	m	struct:nw_job
pipefd	utils/ut_kafka.h	/^    int pipefd[2];$/;"	m	struct:kafka_consumer_t
pkg	readhistory/rh_server.c	/^    rpc_pkg  pkg;$/;"	m	struct:job_request	file:
pkg_type	utils/ut_rpc.h	/^    uint16_t pkg_type;$/;"	m	struct:rpc_pkg
poll_fd	depends/hiredis/adapters/glib.h	/^    GPollFD poll_fd;$/;"	m	struct:__anon15
pool	network/nw_buf.h	/^    nw_buf_pool *pool;$/;"	m	struct:nw_buf_list
pool	network/nw_ses.h	/^    nw_buf_pool *pool;$/;"	m	struct:nw_ses
port	depends/hiredis/hiredis.h	/^        int port;$/;"	m	struct:redisContext::__anon13
port	depends/hiredis/test.c	/^        int port;$/;"	m	struct:config::__anon19	file:
port	logwriter/lw_config.h	/^    int                 port;$/;"	m	struct:instance_cfg
port	utils/http_parser.h	/^  uint16_t port;                \/* Converted UF_PORT string *\/$/;"	m	struct:http_parser_url
port	utils/ut_config.h	/^    int      port;$/;"	m	struct:mysql_cfg
port	utils/ut_redis.h	/^    int   port;$/;"	m	struct:redis_addr
pos	depends/hiredis/read.h	/^    size_t pos; \/* Buffer cursor *\/$/;"	m	struct:redisReader
post_write_callback	accessws/aw_auth.c	/^static size_t post_write_callback(char *ptr, size_t size, size_t nmemb, void *userdata)$/;"	f	file:
post_write_callback	accessws/aw_http.c	/^static size_t post_write_callback(char *ptr, size_t size, size_t nmemb, void *userdata)$/;"	f	file:
post_write_callback	accessws/aw_sign.c	/^static size_t post_write_callback(char *ptr, size_t size, size_t nmemb, void *userdata)$/;"	f	file:
post_write_callback	marketprice/mp_message.c	/^static size_t post_write_callback(char *ptr, size_t size, size_t nmemb, void *userdata)$/;"	f	file:
prec_save	matchengine/me_balance.c	/^    int prec_save;$/;"	m	struct:asset_type	file:
prec_save	matchengine/me_config.h	/^    int                 prec_save;$/;"	m	struct:asset
prec_show	matchengine/me_balance.c	/^    int prec_show;$/;"	m	struct:asset_type	file:
prec_show	matchengine/me_config.h	/^    int                 prec_show;$/;"	m	struct:asset
prev	network/nw_job.h	/^    struct nw_job_entry *prev;$/;"	m	struct:nw_job_entry	typeref:struct:nw_job_entry::nw_job_entry
prev	network/nw_ses.h	/^    struct nw_ses *prev;$/;"	m	struct:nw_ses	typeref:struct:nw_ses::nw_ses
prev	utils/ut_list.h	/^    struct list_node *prev;$/;"	m	struct:list_node	typeref:struct:list_node::list_node
prev	utils/ut_redis.h	/^    struct redis_sentinel_node *prev;$/;"	m	struct:redis_sentinel_node	typeref:struct:redis_sentinel_node::redis_sentinel_node
price	matchengine/me_market.h	/^    mpd_t           *price;$/;"	m	struct:order_t
price	matchengine/me_market.h	/^    mpd_t           *price;$/;"	m	struct:stop_t
price_interval	accessws/aw_config.h	/^    double              price_interval;$/;"	m	struct:settings
privdata	depends/hiredis/async.h	/^    void *privdata;$/;"	m	struct:redisCallback
privdata	depends/hiredis/dict.h	/^    void *privdata;$/;"	m	struct:dict
privdata	depends/hiredis/read.h	/^    void *privdata; \/* user-settable arbitrary field *\/$/;"	m	struct:redisReadTask
privdata	depends/hiredis/read.h	/^    void *privdata;$/;"	m	struct:redisReader
privdata	network/nw_job.c	/^    void *privdata;$/;"	m	struct:thread_arg	file:
privdata	network/nw_ses.h	/^    void *privdata;$/;"	m	struct:nw_ses
privdata	network/nw_svr.h	/^    void *privdata;$/;"	m	struct:nw_svr
privdata	network/nw_timer.h	/^    void *privdata;$/;"	m	struct:nw_timer
privdata	utils/ut_ws_svr.c	/^    void        *privdata;$/;"	m	struct:clt_info	file:
privdata_cache	accessws/aw_server.c	/^static nw_cache *privdata_cache;$/;"	v	file:
privdata_cache	utils/ut_http_svr.h	/^    nw_cache *privdata_cache;$/;"	m	struct:http_svr
privdata_cache	utils/ut_rpc_svr.h	/^    nw_cache *privdata_cache;$/;"	m	struct:rpc_svr
privdata_cache	utils/ut_ws_svr.h	/^    nw_cache *privdata_cache;$/;"	m	struct:ws_svr
process	accesshttp/ah_config.h	/^    process_cfg         process;$/;"	m	struct:settings
process	accessrest/ar_config.h	/^    process_cfg         process;$/;"	m	struct:settings
process	accessws/aw_config.h	/^    process_cfg         process;$/;"	m	struct:settings
process	alertcenter/ac_config.h	/^    process_cfg         process;$/;"	m	struct:settings
process	marketprice/mp_config.h	/^    process_cfg         process;$/;"	m	struct:settings
process	matchengine/me_config.h	/^    process_cfg         process;$/;"	m	struct:settings
process	monitoragent/ma_config.h	/^    process_cfg         process;$/;"	m	struct:settings
process	monitorcenter/mc_config.h	/^    process_cfg         process;$/;"	m	struct:settings
process	readhistory/rh_config.h	/^    process_cfg         process;$/;"	m	struct:settings
processBulkItem	depends/hiredis/read.c	/^static int processBulkItem(redisReader *r) {$/;"	f	file:
processItem	depends/hiredis/read.c	/^static int processItem(redisReader *r) {$/;"	f	file:
processLineItem	depends/hiredis/read.c	/^static int processLineItem(redisReader *r) {$/;"	f	file:
processMultiBulkItem	depends/hiredis/read.c	/^static int processMultiBulkItem(redisReader *r) {$/;"	f	file:
process_balances_message	accessws/aw_message.c	/^static int process_balances_message(json_t *msg)$/;"	f	file:
process_cache	marketprice/mp_server.c	/^static bool process_cache(nw_ses *ses, rpc_pkg *pkg, sds *cache_key)$/;"	f	file:
process_cfg	utils/ut_config.h	/^typedef struct process_cfg {$/;"	s
process_cfg	utils/ut_config.h	/^} process_cfg;$/;"	t	typeref:struct:process_cfg
process_deals_message	accessws/aw_message.c	/^static int process_deals_message(json_t *msg)$/;"	f	file:
process_exist	utils/ut_misc.c	/^int process_exist(const char *fmt, ...)$/;"	f
process_host	utils/ut_profile.c	/^static char *process_host;$/;"	v	file:
process_keepalive	utils/ut_misc.c	/^int process_keepalive(void)$/;"	f
process_market_deals_result	accessrest/ar_server.c	/^static json_t *process_market_deals_result(json_t *result)$/;"	f	file:
process_market_kline_result	accessrest/ar_server.c	/^static json_t *process_market_kline_result(json_t *result)$/;"	f	file:
process_order_depth_result	accessrest/ar_server.c	/^static json_t *process_order_depth_result(json_t *result)$/;"	f	file:
process_orders_message	accessws/aw_message.c	/^static int process_orders_message(json_t *msg)$/;"	f	file:
process_scope	utils/ut_profile.c	/^static char *process_scope;$/;"	v	file:
process_stops_message	accessws/aw_message.c	/^static int process_stops_message(json_t *msg)$/;"	f	file:
process_title_init	utils/ut_title.c	/^void process_title_init(int argc, char *argv[])$/;"	f
process_title_set	utils/ut_title.c	/^void process_title_set(const char *fmt, ...)$/;"	f
produce_list	matchengine/me_message.c	/^static void produce_list(list_t *list, rd_kafka_topic_t *topic)$/;"	f	file:
profile_inc	utils/ut_profile.c	/^void profile_inc(const char *key, uint64_t val)$/;"	f
profile_inc_real	utils/ut_profile.c	/^void profile_inc_real(const char *key, uint64_t val)$/;"	f
profile_init	utils/ut_profile.c	/^int profile_init(const char *scope, const char *host)$/;"	f
profile_set	utils/ut_profile.c	/^void profile_set(const char *key, uint64_t val)$/;"	f
profile_val	utils/ut_profile.c	/^struct profile_val {$/;"	s	file:
protocol	utils/ut_ws_svr.h	/^    char *protocol;$/;"	m	struct:ws_svr
protocol	utils/ut_ws_svr.h	/^    char *protocol;$/;"	m	struct:ws_svr_cfg
push_balance_message	matchengine/me_message.c	/^int push_balance_message(double t, uint32_t user_id, const char *asset, const char *business, mpd_t *change, mpd_t *result)$/;"	f
push_deal_message	matchengine/me_message.c	/^int push_deal_message(double t, uint64_t id, market_t *market, int side, order_t *ask, order_t *bid,$/;"	f
push_message	matchengine/me_message.c	/^static int push_message(char *message, rd_kafka_topic_t *topic, list_t *list)$/;"	f	file:
push_order_message	matchengine/me_message.c	/^int push_order_message(uint32_t event, order_t *order, market_t *market)$/;"	f
push_stop_message	matchengine/me_message.c	/^int push_stop_message(uint32_t event, stop_t *stop, market_t *market, int status)$/;"	f
put_order	matchengine/me_market.c	/^static int put_order(market_t *m, order_t *order)$/;"	f	file:
put_stop	matchengine/me_market.c	/^static int put_stop(market_t *m, stop_t *stop)$/;"	f	file:
putmem	utils/ut_queue.c	/^static void putmem(queue_t *queue, uint32_t *p_tail, void *data, uint32_t size)$/;"	f	file:
query_market_depth	accessrest/ar_ticker.c	/^static int query_market_depth(const char *market)$/;"	f	file:
query_market_list	accessrest/ar_ticker.c	/^static int query_market_list(void)$/;"	f	file:
query_market_status	accessrest/ar_ticker.c	/^static int query_market_status(const char *market)$/;"	f	file:
queue_fini	utils/ut_queue.c	/^void queue_fini(queue_t *queue)$/;"	f
queue_head	utils/ut_queue.c	/^struct queue_head$/;"	s	file:
queue_init	utils/ut_queue.c	/^int queue_init(queue_t *queue, char *name, key_t shm_key,$/;"	f
queue_len	utils/ut_queue.c	/^uint64_t queue_len(queue_t *queue)$/;"	f
queue_num	utils/ut_queue.c	/^uint64_t queue_num(queue_t *queue)$/;"	f
queue_pop	utils/ut_queue.c	/^int queue_pop(queue_t *queue, void **data, uint32_t *size)$/;"	f
queue_push	utils/ut_queue.c	/^int queue_push(queue_t *queue, void *data, uint32_t size)$/;"	f
queue_stat	utils/ut_queue.c	/^int queue_stat(queue_t *queue, \\$/;"	f
queue_t	utils/ut_queue.h	/^} queue_t;$/;"	t	typeref:struct:__anon4
r	test/accesshttp/auth.py	/^r = requests.post("http:\/\/120.77.243.61\/exchange\/v1\/user\/sign\/in\/mobile", data=json.dumps(data), headers=headers);$/;"	v
raw_clt	utils/ut_rpc_clt.h	/^    nw_clt *raw_clt;$/;"	m	struct:rpc_clt
raw_svr	utils/ut_cli.h	/^    nw_svr *raw_svr;$/;"	m	struct:cli_svr
raw_svr	utils/ut_http_svr.h	/^    nw_svr *raw_svr;$/;"	m	struct:http_svr
raw_svr	utils/ut_rpc_svr.h	/^    nw_svr *raw_svr;$/;"	m	struct:rpc_svr
raw_svr	utils/ut_ws_svr.h	/^    nw_svr *raw_svr;$/;"	m	struct:ws_svr
read	depends/hiredis/adapters/qt.h	/^        void read() { redisAsyncHandleRead(m_ctx); }$/;"	f	class:RedisQtAdapter
readBytes	depends/hiredis/read.c	/^static char *readBytes(redisReader *r, unsigned int bytes) {$/;"	f	file:
readLine	depends/hiredis/read.c	/^static char *readLine(redisReader *r, int *_len) {$/;"	f	file:
readLongLong	depends/hiredis/read.c	/^static long long readLongLong(char *s) {$/;"	f	file:
read_buf	network/nw_ses.h	/^    nw_buf *read_buf;$/;"	m	struct:nw_ses
read_buf	utils/ut_queue.h	/^    void   *read_buf;$/;"	m	struct:__anon4
read_buf_size	utils/ut_queue.h	/^    size_t read_buf_size;$/;"	m	struct:__anon4
read_cfg_bool	utils/ut_config.c	/^int read_cfg_bool(json_t *root, const char *key, bool *val, bool required, bool default_val)$/;"	f
read_cfg_int	utils/ut_config.c	/^int read_cfg_int(json_t *root, const char *key, int *val, bool required, int default_val)$/;"	f
read_cfg_int32	utils/ut_config.c	/^int read_cfg_int32(json_t *root, const char *key, int32_t *val, bool required, int32_t default_val)$/;"	f
read_cfg_int64	utils/ut_config.c	/^int read_cfg_int64(json_t *root, const char *key, int64_t *val, bool required, int64_t default_val)$/;"	f
read_cfg_mpd	utils/ut_config.c	/^int read_cfg_mpd(json_t *root, const char *key, mpd_t **val, const char *default_val)$/;"	f
read_cfg_real	utils/ut_config.c	/^int read_cfg_real(json_t *root, const char *key, double *val, bool required, double default_val)$/;"	f
read_cfg_str	utils/ut_config.c	/^int read_cfg_str(json_t *root, const char *key, char **val, const char *default_val)$/;"	f
read_cfg_uint32	utils/ut_config.c	/^int read_cfg_uint32(json_t *root, const char *key, uint32_t *val, bool required, uint32_t default_val)$/;"	f
read_cfg_uint64	utils/ut_config.c	/^int read_cfg_uint64(json_t *root, const char *key, uint64_t *val, bool required, uint64_t default_val)$/;"	f
read_config_from_json	accesshttp/ah_config.c	/^static int read_config_from_json(json_t *root)$/;"	f	file:
read_config_from_json	accessrest/ar_config.c	/^static int read_config_from_json(json_t *root)$/;"	f	file:
read_config_from_json	accessws/aw_config.c	/^static int read_config_from_json(json_t *root)$/;"	f	file:
read_config_from_json	marketprice/mp_config.c	/^static int read_config_from_json(json_t *root)$/;"	f	file:
read_config_from_json	matchengine/me_config.c	/^static int read_config_from_json(json_t *root)$/;"	f	file:
read_config_from_json	monitoragent/ma_config.c	/^static int read_config_from_json(json_t *root)$/;"	f	file:
read_config_from_json	monitorcenter/mc_config.c	/^static int read_config_from_json(json_t *root)$/;"	f	file:
read_config_from_json	readhistory/rh_config.c	/^static int read_config_from_json(json_t *root)$/;"	f	file:
read_depth_limit_cfg	accessrest/ar_config.c	/^static int read_depth_limit_cfg(json_t *root, const char *key)$/;"	f	file:
read_depth_limit_cfg	accessws/aw_config.c	/^static int read_depth_limit_cfg(json_t *root, const char *key)$/;"	f	file:
read_depth_merge_cfg	accessrest/ar_config.c	/^static int read_depth_merge_cfg(json_t *root, const char *key)$/;"	f	file:
read_depth_merge_cfg	accessws/aw_config.c	/^static int read_depth_merge_cfg(json_t *root, const char *key)$/;"	f	file:
read_file	utils/ut_queue.c	/^static int read_file(queue_t *queue, void **data, uint32_t *size)$/;"	f	file:
read_mem	network/nw_clt.h	/^    uint32_t read_mem;$/;"	m	struct:nw_clt
read_mem	network/nw_clt.h	/^    uint32_t read_mem;$/;"	m	struct:nw_clt_cfg
read_mem	network/nw_svr.h	/^    uint32_t read_mem;$/;"	m	struct:nw_svr
read_mem	network/nw_svr.h	/^    uint32_t read_mem;$/;"	m	struct:nw_svr_cfg
read_mem	utils/ut_http_svr.h	/^    uint32_t read_mem;$/;"	m	struct:http_svr_cfg
read_mem	utils/ut_rpc_clt.h	/^    uint32_t read_mem;$/;"	m	struct:rpc_clt_cfg
read_mem	utils/ut_rpc_svr.h	/^    uint32_t read_mem;$/;"	m	struct:rpc_svr_cfg
read_mem	utils/ut_ws_svr.h	/^    uint32_t read_mem;$/;"	m	struct:ws_svr_cfg
reader	depends/hiredis/hiredis.h	/^    redisReader *reader; \/* Protocol reader *\/$/;"	m	struct:redisContext
readhistory	accesshttp/ah_config.h	/^    rpc_clt_cfg         readhistory;$/;"	m	struct:settings
readhistory	accesshttp/ah_server.c	/^static rpc_clt *readhistory;$/;"	v	file:
readhistory	accessws/aw_config.h	/^    rpc_clt_cfg         readhistory;$/;"	m	struct:settings
readhistory	accessws/aw_server.c	/^static rpc_clt *readhistory;$/;"	v	file:
reading	depends/hiredis/adapters/ae.h	/^    int reading, writing;$/;"	m	struct:redisAeEvents
reading	depends/hiredis/adapters/libev.h	/^    int reading, writing;$/;"	m	struct:redisLibevEvents
reconnect_later	network/nw_clt.c	/^static void reconnect_later(nw_clt *clt)$/;"	f	file:
reconnect_timeout	network/nw_clt.h	/^    double reconnect_timeout;$/;"	m	struct:nw_clt
reconnect_timeout	network/nw_clt.h	/^    double reconnect_timeout;$/;"	m	struct:nw_clt_cfg
reconnect_timeout	utils/ut_rpc_clt.h	/^    double reconnect_timeout;$/;"	m	struct:rpc_clt_cfg
redis	alertcenter/ac_config.h	/^    redis_sentinel_cfg  redis;$/;"	m	struct:settings
redis	alertcenter/ac_server.c	/^static redis_sentinel_t *redis;$/;"	v	file:
redis	marketprice/mp_config.h	/^    redis_sentinel_cfg  redis;$/;"	m	struct:settings
redis	marketprice/mp_message.c	/^static redis_sentinel_t *redis;$/;"	v	file:
redis	monitorcenter/mc_config.h	/^    redis_sentinel_cfg  redis;$/;"	m	struct:settings
redis	monitorcenter/mc_server.c	/^static redis_sentinel_t *redis;$/;"	v	file:
redisAeAddRead	depends/hiredis/adapters/ae.h	/^static void redisAeAddRead(void *privdata) {$/;"	f
redisAeAddWrite	depends/hiredis/adapters/ae.h	/^static void redisAeAddWrite(void *privdata) {$/;"	f
redisAeAttach	depends/hiredis/adapters/ae.h	/^static int redisAeAttach(aeEventLoop *loop, redisAsyncContext *ac) {$/;"	f
redisAeCleanup	depends/hiredis/adapters/ae.h	/^static void redisAeCleanup(void *privdata) {$/;"	f
redisAeDelRead	depends/hiredis/adapters/ae.h	/^static void redisAeDelRead(void *privdata) {$/;"	f
redisAeDelWrite	depends/hiredis/adapters/ae.h	/^static void redisAeDelWrite(void *privdata) {$/;"	f
redisAeEvents	depends/hiredis/adapters/ae.h	/^typedef struct redisAeEvents {$/;"	s
redisAeEvents	depends/hiredis/adapters/ae.h	/^} redisAeEvents;$/;"	t	typeref:struct:redisAeEvents
redisAeReadEvent	depends/hiredis/adapters/ae.h	/^static void redisAeReadEvent(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f
redisAeWriteEvent	depends/hiredis/adapters/ae.h	/^static void redisAeWriteEvent(aeEventLoop *el, int fd, void *privdata, int mask) {$/;"	f
redisAppendCommand	depends/hiredis/hiredis.c	/^int redisAppendCommand(redisContext *c, const char *format, ...) {$/;"	f
redisAppendCommandArgv	depends/hiredis/hiredis.c	/^int redisAppendCommandArgv(redisContext *c, int argc, const char **argv, const size_t *argvlen) {$/;"	f
redisAppendFormattedCommand	depends/hiredis/hiredis.c	/^int redisAppendFormattedCommand(redisContext *c, const char *cmd, size_t len) {$/;"	f
redisAsyncCommand	depends/hiredis/async.c	/^int redisAsyncCommand(redisAsyncContext *ac, redisCallbackFn *fn, void *privdata, const char *format, ...) {$/;"	f
redisAsyncCommandArgv	depends/hiredis/async.c	/^int redisAsyncCommandArgv(redisAsyncContext *ac, redisCallbackFn *fn, void *privdata, int argc, const char **argv, const size_t *argvlen) {$/;"	f
redisAsyncConnect	depends/hiredis/async.c	/^redisAsyncContext *redisAsyncConnect(const char *ip, int port) {$/;"	f
redisAsyncConnectBind	depends/hiredis/async.c	/^redisAsyncContext *redisAsyncConnectBind(const char *ip, int port,$/;"	f
redisAsyncConnectBindWithReuse	depends/hiredis/async.c	/^redisAsyncContext *redisAsyncConnectBindWithReuse(const char *ip, int port,$/;"	f
redisAsyncConnectUnix	depends/hiredis/async.c	/^redisAsyncContext *redisAsyncConnectUnix(const char *path) {$/;"	f
redisAsyncContext	depends/hiredis/async.h	/^typedef struct redisAsyncContext {$/;"	s
redisAsyncContext	depends/hiredis/async.h	/^} redisAsyncContext;$/;"	t	typeref:struct:redisAsyncContext
redisAsyncDisconnect	depends/hiredis/async.c	/^void redisAsyncDisconnect(redisAsyncContext *ac) {$/;"	f
redisAsyncFormattedCommand	depends/hiredis/async.c	/^int redisAsyncFormattedCommand(redisAsyncContext *ac, redisCallbackFn *fn, void *privdata, const char *cmd, size_t len) {$/;"	f
redisAsyncFree	depends/hiredis/async.c	/^void redisAsyncFree(redisAsyncContext *ac) {$/;"	f
redisAsyncHandleRead	depends/hiredis/async.c	/^void redisAsyncHandleRead(redisAsyncContext *ac) {$/;"	f
redisAsyncHandleWrite	depends/hiredis/async.c	/^void redisAsyncHandleWrite(redisAsyncContext *ac) {$/;"	f
redisAsyncInitialize	depends/hiredis/async.c	/^static redisAsyncContext *redisAsyncInitialize(redisContext *c) {$/;"	f	file:
redisAsyncSetConnectCallback	depends/hiredis/async.c	/^int redisAsyncSetConnectCallback(redisAsyncContext *ac, redisConnectCallback *fn) {$/;"	f
redisAsyncSetDisconnectCallback	depends/hiredis/async.c	/^int redisAsyncSetDisconnectCallback(redisAsyncContext *ac, redisDisconnectCallback *fn) {$/;"	f
redisBufferRead	depends/hiredis/hiredis.c	/^int redisBufferRead(redisContext *c) {$/;"	f
redisBufferWrite	depends/hiredis/hiredis.c	/^int redisBufferWrite(redisContext *c, int *done) {$/;"	f
redisCallback	depends/hiredis/async.h	/^typedef struct redisCallback {$/;"	s
redisCallback	depends/hiredis/async.h	/^} redisCallback;$/;"	t	typeref:struct:redisCallback
redisCallbackFn	depends/hiredis/async.h	/^typedef void (redisCallbackFn)(struct redisAsyncContext*, void*, void*);$/;"	t
redisCallbackList	depends/hiredis/async.h	/^typedef struct redisCallbackList {$/;"	s
redisCallbackList	depends/hiredis/async.h	/^} redisCallbackList;$/;"	t	typeref:struct:redisCallbackList
redisCheckSocketError	depends/hiredis/net.c	/^int redisCheckSocketError(redisContext *c) {$/;"	f
redisCmd	utils/ut_redis.c	/^void *redisCmd(redisContext *c, const char *format, ...)$/;"	f
redisCommand	depends/hiredis/hiredis.c	/^void *redisCommand(redisContext *c, const char *format, ...) {$/;"	f
redisCommandArgv	depends/hiredis/hiredis.c	/^void *redisCommandArgv(redisContext *c, int argc, const char **argv, const size_t *argvlen) {$/;"	f
redisConnect	depends/hiredis/hiredis.c	/^redisContext *redisConnect(const char *ip, int port) {$/;"	f
redisConnectBindNonBlock	depends/hiredis/hiredis.c	/^redisContext *redisConnectBindNonBlock(const char *ip, int port,$/;"	f
redisConnectBindNonBlockWithReuse	depends/hiredis/hiredis.c	/^redisContext *redisConnectBindNonBlockWithReuse(const char *ip, int port,$/;"	f
redisConnectCallback	depends/hiredis/async.h	/^typedef void (redisConnectCallback)(const struct redisAsyncContext*, int status);$/;"	t
redisConnectFd	depends/hiredis/hiredis.c	/^redisContext *redisConnectFd(int fd) {$/;"	f
redisConnectNonBlock	depends/hiredis/hiredis.c	/^redisContext *redisConnectNonBlock(const char *ip, int port) {$/;"	f
redisConnectUnix	depends/hiredis/hiredis.c	/^redisContext *redisConnectUnix(const char *path) {$/;"	f
redisConnectUnixNonBlock	depends/hiredis/hiredis.c	/^redisContext *redisConnectUnixNonBlock(const char *path) {$/;"	f
redisConnectUnixWithTimeout	depends/hiredis/hiredis.c	/^redisContext *redisConnectUnixWithTimeout(const char *path, const struct timeval tv) {$/;"	f
redisConnectWithTimeout	depends/hiredis/hiredis.c	/^redisContext *redisConnectWithTimeout(const char *ip, int port, const struct timeval tv) {$/;"	f
redisConnectionType	depends/hiredis/hiredis.h	/^enum redisConnectionType {$/;"	g
redisContext	depends/hiredis/hiredis.h	/^typedef struct redisContext {$/;"	s
redisContext	depends/hiredis/hiredis.h	/^} redisContext;$/;"	t	typeref:struct:redisContext
redisContextCloseFd	depends/hiredis/net.c	/^static void redisContextCloseFd(redisContext *c) {$/;"	f	file:
redisContextConnectBindTcp	depends/hiredis/net.c	/^int redisContextConnectBindTcp(redisContext *c, const char *addr, int port,$/;"	f
redisContextConnectTcp	depends/hiredis/net.c	/^int redisContextConnectTcp(redisContext *c, const char *addr, int port,$/;"	f
redisContextConnectUnix	depends/hiredis/net.c	/^int redisContextConnectUnix(redisContext *c, const char *path, const struct timeval *timeout) {$/;"	f
redisContextInit	depends/hiredis/hiredis.c	/^static redisContext *redisContextInit(void) {$/;"	f	file:
redisContextSetTimeout	depends/hiredis/net.c	/^int redisContextSetTimeout(redisContext *c, const struct timeval tv) {$/;"	f
redisContextWaitReady	depends/hiredis/net.c	/^static int redisContextWaitReady(redisContext *c, const struct timeval *timeout) {$/;"	f	file:
redisCreateSocket	depends/hiredis/net.c	/^static int redisCreateSocket(redisContext *c, int type) {$/;"	f	file:
redisDisconnectCallback	depends/hiredis/async.h	/^typedef void (redisDisconnectCallback)(const struct redisAsyncContext*, int status);$/;"	t
redisEnableKeepAlive	depends/hiredis/hiredis.c	/^int redisEnableKeepAlive(redisContext *c) {$/;"	f
redisFormatCommand	depends/hiredis/hiredis.c	/^int redisFormatCommand(char **target, const char *format, ...) {$/;"	f
redisFormatCommandArgv	depends/hiredis/hiredis.c	/^int redisFormatCommandArgv(char **target, int argc, const char **argv, const size_t *argvlen) {$/;"	f
redisFormatSdsCommandArgv	depends/hiredis/hiredis.c	/^int redisFormatSdsCommandArgv(sds *target, int argc, const char **argv,$/;"	f
redisFree	depends/hiredis/hiredis.c	/^void redisFree(redisContext *c) {$/;"	f
redisFreeCommand	depends/hiredis/hiredis.c	/^void redisFreeCommand(char *cmd) {$/;"	f
redisFreeKeepFd	depends/hiredis/hiredis.c	/^int redisFreeKeepFd(redisContext *c) {$/;"	f
redisFreeSdsCommand	depends/hiredis/hiredis.c	/^void redisFreeSdsCommand(sds cmd) {$/;"	f
redisGetReply	depends/hiredis/hiredis.c	/^int redisGetReply(redisContext *c, void **reply) {$/;"	f
redisGetReplyFromReader	depends/hiredis/hiredis.c	/^int redisGetReplyFromReader(redisContext *c, void **reply) {$/;"	f
redisIvykisAddRead	depends/hiredis/adapters/ivykis.h	/^static void redisIvykisAddRead(void *privdata) {$/;"	f
redisIvykisAddWrite	depends/hiredis/adapters/ivykis.h	/^static void redisIvykisAddWrite(void *privdata) {$/;"	f
redisIvykisAttach	depends/hiredis/adapters/ivykis.h	/^static int redisIvykisAttach(redisAsyncContext *ac) {$/;"	f
redisIvykisCleanup	depends/hiredis/adapters/ivykis.h	/^static void redisIvykisCleanup(void *privdata) {$/;"	f
redisIvykisDelRead	depends/hiredis/adapters/ivykis.h	/^static void redisIvykisDelRead(void *privdata) {$/;"	f
redisIvykisDelWrite	depends/hiredis/adapters/ivykis.h	/^static void redisIvykisDelWrite(void *privdata) {$/;"	f
redisIvykisEvents	depends/hiredis/adapters/ivykis.h	/^typedef struct redisIvykisEvents {$/;"	s
redisIvykisEvents	depends/hiredis/adapters/ivykis.h	/^} redisIvykisEvents;$/;"	t	typeref:struct:redisIvykisEvents
redisIvykisReadEvent	depends/hiredis/adapters/ivykis.h	/^static void redisIvykisReadEvent(void *arg) {$/;"	f
redisIvykisWriteEvent	depends/hiredis/adapters/ivykis.h	/^static void redisIvykisWriteEvent(void *arg) {$/;"	f
redisKeepAlive	depends/hiredis/net.c	/^int redisKeepAlive(redisContext *c, int interval) {$/;"	f
redisLibevAddRead	depends/hiredis/adapters/libev.h	/^static void redisLibevAddRead(void *privdata) {$/;"	f
redisLibevAddWrite	depends/hiredis/adapters/libev.h	/^static void redisLibevAddWrite(void *privdata) {$/;"	f
redisLibevAttach	depends/hiredis/adapters/libev.h	/^static int redisLibevAttach(EV_P_ redisAsyncContext *ac) {$/;"	f
redisLibevCleanup	depends/hiredis/adapters/libev.h	/^static void redisLibevCleanup(void *privdata) {$/;"	f
redisLibevDelRead	depends/hiredis/adapters/libev.h	/^static void redisLibevDelRead(void *privdata) {$/;"	f
redisLibevDelWrite	depends/hiredis/adapters/libev.h	/^static void redisLibevDelWrite(void *privdata) {$/;"	f
redisLibevEvents	depends/hiredis/adapters/libev.h	/^typedef struct redisLibevEvents {$/;"	s
redisLibevEvents	depends/hiredis/adapters/libev.h	/^} redisLibevEvents;$/;"	t	typeref:struct:redisLibevEvents
redisLibevReadEvent	depends/hiredis/adapters/libev.h	/^static void redisLibevReadEvent(EV_P_ ev_io *watcher, int revents) {$/;"	f
redisLibevWriteEvent	depends/hiredis/adapters/libev.h	/^static void redisLibevWriteEvent(EV_P_ ev_io *watcher, int revents) {$/;"	f
redisLibeventAddRead	depends/hiredis/adapters/libevent.h	/^static void redisLibeventAddRead(void *privdata) {$/;"	f
redisLibeventAddWrite	depends/hiredis/adapters/libevent.h	/^static void redisLibeventAddWrite(void *privdata) {$/;"	f
redisLibeventAttach	depends/hiredis/adapters/libevent.h	/^static int redisLibeventAttach(redisAsyncContext *ac, struct event_base *base) {$/;"	f
redisLibeventCleanup	depends/hiredis/adapters/libevent.h	/^static void redisLibeventCleanup(void *privdata) {$/;"	f
redisLibeventDelRead	depends/hiredis/adapters/libevent.h	/^static void redisLibeventDelRead(void *privdata) {$/;"	f
redisLibeventDelWrite	depends/hiredis/adapters/libevent.h	/^static void redisLibeventDelWrite(void *privdata) {$/;"	f
redisLibeventEvents	depends/hiredis/adapters/libevent.h	/^typedef struct redisLibeventEvents {$/;"	s
redisLibeventEvents	depends/hiredis/adapters/libevent.h	/^} redisLibeventEvents;$/;"	t	typeref:struct:redisLibeventEvents
redisLibeventReadEvent	depends/hiredis/adapters/libevent.h	/^static void redisLibeventReadEvent(int fd, short event, void *arg) {$/;"	f
redisLibeventWriteEvent	depends/hiredis/adapters/libevent.h	/^static void redisLibeventWriteEvent(int fd, short event, void *arg) {$/;"	f
redisLibuvAddRead	depends/hiredis/adapters/libuv.h	/^static void redisLibuvAddRead(void *privdata) {$/;"	f
redisLibuvAddWrite	depends/hiredis/adapters/libuv.h	/^static void redisLibuvAddWrite(void *privdata) {$/;"	f
redisLibuvAttach	depends/hiredis/adapters/libuv.h	/^static int redisLibuvAttach(redisAsyncContext* ac, uv_loop_t* loop) {$/;"	f
redisLibuvCleanup	depends/hiredis/adapters/libuv.h	/^static void redisLibuvCleanup(void *privdata) {$/;"	f
redisLibuvDelRead	depends/hiredis/adapters/libuv.h	/^static void redisLibuvDelRead(void *privdata) {$/;"	f
redisLibuvDelWrite	depends/hiredis/adapters/libuv.h	/^static void redisLibuvDelWrite(void *privdata) {$/;"	f
redisLibuvEvents	depends/hiredis/adapters/libuv.h	/^typedef struct redisLibuvEvents {$/;"	s
redisLibuvEvents	depends/hiredis/adapters/libuv.h	/^} redisLibuvEvents;$/;"	t	typeref:struct:redisLibuvEvents
redisLibuvPoll	depends/hiredis/adapters/libuv.h	/^static void redisLibuvPoll(uv_poll_t* handle, int status, int events) {$/;"	f
redisMacOSAddRead	depends/hiredis/adapters/macosx.h	/^static void redisMacOSAddRead(void *privdata) {$/;"	f
redisMacOSAddWrite	depends/hiredis/adapters/macosx.h	/^static void redisMacOSAddWrite(void *privdata) {$/;"	f
redisMacOSAsyncCallback	depends/hiredis/adapters/macosx.h	/^static void redisMacOSAsyncCallback(CFSocketRef __unused s, CFSocketCallBackType callbackType, CFDataRef __unused address, const void __unused *data, void *info) {$/;"	f
redisMacOSAttach	depends/hiredis/adapters/macosx.h	/^static int redisMacOSAttach(redisAsyncContext *redisAsyncCtx, CFRunLoopRef runLoop) {$/;"	f
redisMacOSCleanup	depends/hiredis/adapters/macosx.h	/^static void redisMacOSCleanup(void *privdata) {$/;"	f
redisMacOSDelRead	depends/hiredis/adapters/macosx.h	/^static void redisMacOSDelRead(void *privdata) {$/;"	f
redisMacOSDelWrite	depends/hiredis/adapters/macosx.h	/^static void redisMacOSDelWrite(void *privdata) {$/;"	f
redisProcessCallbacks	depends/hiredis/async.c	/^void redisProcessCallbacks(redisAsyncContext *ac) {$/;"	f
redisRawCmd	utils/ut_redis.c	/^void *redisRawCmd(redisContext *c, const char *cmd)$/;"	f
redisReadTask	depends/hiredis/read.h	/^typedef struct redisReadTask {$/;"	s
redisReadTask	depends/hiredis/read.h	/^} redisReadTask;$/;"	t	typeref:struct:redisReadTask
redisReader	depends/hiredis/read.h	/^typedef struct redisReader {$/;"	s
redisReader	depends/hiredis/read.h	/^} redisReader;$/;"	t	typeref:struct:redisReader
redisReaderCreate	depends/hiredis/hiredis.c	/^redisReader *redisReaderCreate(void) {$/;"	f
redisReaderCreateWithFunctions	depends/hiredis/read.c	/^redisReader *redisReaderCreateWithFunctions(redisReplyObjectFunctions *fn) {$/;"	f
redisReaderFeed	depends/hiredis/read.c	/^int redisReaderFeed(redisReader *r, const char *buf, size_t len) {$/;"	f
redisReaderFree	depends/hiredis/read.c	/^void redisReaderFree(redisReader *r) {$/;"	f
redisReaderGetReply	depends/hiredis/read.c	/^int redisReaderGetReply(redisReader *r, void **reply) {$/;"	f
redisReconnect	depends/hiredis/hiredis.c	/^int redisReconnect(redisContext *c) {$/;"	f
redisReply	depends/hiredis/hiredis.h	/^typedef struct redisReply {$/;"	s
redisReply	depends/hiredis/hiredis.h	/^} redisReply;$/;"	t	typeref:struct:redisReply
redisReplyObjectFunctions	depends/hiredis/read.h	/^typedef struct redisReplyObjectFunctions {$/;"	s
redisReplyObjectFunctions	depends/hiredis/read.h	/^} redisReplyObjectFunctions;$/;"	t	typeref:struct:redisReplyObjectFunctions
redisReplyReaderCreate	depends/hiredis/read.h	/^#define redisReplyReaderCreate /;"	d
redisReplyReaderFeed	depends/hiredis/read.h	/^#define redisReplyReaderFeed /;"	d
redisReplyReaderFree	depends/hiredis/read.h	/^#define redisReplyReaderFree /;"	d
redisReplyReaderGetError	depends/hiredis/read.h	/^#define redisReplyReaderGetError(/;"	d
redisReplyReaderGetObject	depends/hiredis/read.h	/^#define redisReplyReaderGetObject(/;"	d
redisReplyReaderGetReply	depends/hiredis/read.h	/^#define redisReplyReaderGetReply /;"	d
redisReplyReaderSetPrivdata	depends/hiredis/read.h	/^#define redisReplyReaderSetPrivdata(/;"	d
redisSetBlocking	depends/hiredis/net.c	/^static int redisSetBlocking(redisContext *c, int blocking) {$/;"	f	file:
redisSetReuseAddr	depends/hiredis/net.c	/^static int redisSetReuseAddr(redisContext *c) {$/;"	f	file:
redisSetTcpNoDelay	depends/hiredis/net.c	/^static int redisSetTcpNoDelay(redisContext *c) {$/;"	f	file:
redisSetTimeout	depends/hiredis/hiredis.c	/^int redisSetTimeout(redisContext *c, const struct timeval tv) {$/;"	f
redis_addr	utils/ut_redis.h	/^typedef struct redis_addr {$/;"	s
redis_addr	utils/ut_redis.h	/^} redis_addr;$/;"	t	typeref:struct:redis_addr
redis_addr_cfg_parse	utils/ut_redis.c	/^int redis_addr_cfg_parse(const char *cfg, redis_addr *addr)$/;"	f
redis_query	monitorcenter/mc_server.c	/^void *redis_query(const char *format, ...)$/;"	f
redis_sentinel_cfg	utils/ut_redis.h	/^typedef struct redis_sentinel_cfg {$/;"	s
redis_sentinel_cfg	utils/ut_redis.h	/^} redis_sentinel_cfg;$/;"	t	typeref:struct:redis_sentinel_cfg
redis_sentinel_connect_master	utils/ut_redis.c	/^redisContext *redis_sentinel_connect_master(redis_sentinel_t *context)$/;"	f
redis_sentinel_connect_slave	utils/ut_redis.c	/^redisContext *redis_sentinel_connect_slave(redis_sentinel_t *context)$/;"	f
redis_sentinel_create	utils/ut_redis.c	/^redis_sentinel_t *redis_sentinel_create(redis_sentinel_cfg *cfg)$/;"	f
redis_sentinel_get_master_addr	utils/ut_redis.c	/^int redis_sentinel_get_master_addr(redis_sentinel_t *context, redis_addr *addr)$/;"	f
redis_sentinel_get_slave_addr	utils/ut_redis.c	/^int redis_sentinel_get_slave_addr(redis_sentinel_t *context, redis_addr *addr)$/;"	f
redis_sentinel_node	utils/ut_redis.h	/^typedef struct redis_sentinel_node {$/;"	s
redis_sentinel_node	utils/ut_redis.h	/^} redis_sentinel_node;$/;"	t	typeref:struct:redis_sentinel_node
redis_sentinel_release	utils/ut_redis.c	/^void redis_sentinel_release(redis_sentinel_t *context)$/;"	f
redis_sentinel_t	utils/ut_redis.h	/^typedef struct redis_sentinel_t {$/;"	s
redis_sentinel_t	utils/ut_redis.h	/^} redis_sentinel_t;$/;"	t	typeref:struct:redis_sentinel_t
redis_source_add_read	depends/hiredis/adapters/glib.h	/^redis_source_add_read (gpointer data)$/;"	f
redis_source_add_write	depends/hiredis/adapters/glib.h	/^redis_source_add_write (gpointer data)$/;"	f
redis_source_check	depends/hiredis/adapters/glib.h	/^redis_source_check (GSource *source)$/;"	f
redis_source_cleanup	depends/hiredis/adapters/glib.h	/^redis_source_cleanup (gpointer data)$/;"	f
redis_source_del_read	depends/hiredis/adapters/glib.h	/^redis_source_del_read (gpointer data)$/;"	f
redis_source_del_write	depends/hiredis/adapters/glib.h	/^redis_source_del_write (gpointer data)$/;"	f
redis_source_dispatch	depends/hiredis/adapters/glib.h	/^redis_source_dispatch (GSource      *source,$/;"	f
redis_source_finalize	depends/hiredis/adapters/glib.h	/^redis_source_finalize (GSource *source)$/;"	f
redis_source_new	depends/hiredis/adapters/glib.h	/^redis_source_new (redisAsyncContext *ac)$/;"	f
redis_source_prepare	depends/hiredis/adapters/glib.h	/^redis_source_prepare (GSource *source,$/;"	f
redis_store	monitorcenter/mc_server.c	/^static redisContext *redis_store;$/;"	v	file:
redis_timer	marketprice/mp_message.c	/^static nw_timer redis_timer;$/;"	v	file:
redisvAppendCommand	depends/hiredis/hiredis.c	/^int redisvAppendCommand(redisContext *c, const char *format, va_list ap) {$/;"	f
redisvAsyncCommand	depends/hiredis/async.c	/^int redisvAsyncCommand(redisAsyncContext *ac, redisCallbackFn *fn, void *privdata, const char *format, va_list ap) {$/;"	f
redisvCommand	depends/hiredis/hiredis.c	/^void *redisvCommand(redisContext *c, const char *format, va_list ap) {$/;"	f
redisvFormatCommand	depends/hiredis/hiredis.c	/^int redisvFormatCommand(char **target, const char *format, va_list ap) {$/;"	f
remote	accessws/aw_server.h	/^    char        *remote;$/;"	m	struct:clt_info
remote	utils/ut_ws_svr.c	/^    sds         remote;$/;"	m	struct:clt_info	file:
remote_ip	accessws/aw_sign.c	/^    sds remote_ip;$/;"	m	struct:sign_request	file:
remote_log	utils/ut_log.h	/^    int                 remote_log;$/;"	m	struct:__anon7
replies	depends/hiredis/async.h	/^    redisCallbackList replies;$/;"	m	struct:redisAsyncContext
reply	depends/hiredis/read.h	/^    void *reply; \/* Temporary reply pointer *\/$/;"	m	struct:redisReader
reply	network/nw_job.h	/^    void *reply;$/;"	m	struct:nw_job_entry
reply_bad_request	accesshttp/ah_server.c	/^static void reply_bad_request(nw_ses *ses)$/;"	f	file:
reply_count	network/nw_job.h	/^    int reply_count;$/;"	m	struct:nw_job
reply_error	accesshttp/ah_server.c	/^static void reply_error(nw_ses *ses, int64_t id, int code, const char *message, uint32_t status)$/;"	f	file:
reply_error	accessrest/ar_server.c	/^static int reply_error(nw_ses *ses, int code, const char *message, uint32_t status)$/;"	f	file:
reply_error	marketprice/mp_server.c	/^static int reply_error(nw_ses *ses, rpc_pkg *pkg, int code, const char *message)$/;"	f	file:
reply_error	matchengine/me_server.c	/^static int reply_error(nw_ses *ses, rpc_pkg *pkg, int code, const char *message)$/;"	f	file:
reply_error	monitorcenter/mc_server.c	/^static int reply_error(nw_ses *ses, rpc_pkg *pkg, int code, const char *message)$/;"	f	file:
reply_error	readhistory/rh_server.c	/^static int reply_error(nw_ses *ses, rpc_pkg *pkg, int code, const char *message)$/;"	f	file:
reply_error_internal_error	marketprice/mp_server.c	/^static int reply_error_internal_error(nw_ses *ses, rpc_pkg *pkg)$/;"	f	file:
reply_error_internal_error	matchengine/me_server.c	/^static int reply_error_internal_error(nw_ses *ses, rpc_pkg *pkg)$/;"	f	file:
reply_error_internal_error	monitorcenter/mc_server.c	/^static int reply_error_internal_error(nw_ses *ses, rpc_pkg *pkg)$/;"	f	file:
reply_error_internal_error	readhistory/rh_server.c	/^static int reply_error_internal_error(nw_ses *ses, rpc_pkg *pkg)$/;"	f	file:
reply_error_invalid_argument	marketprice/mp_server.c	/^static int reply_error_invalid_argument(nw_ses *ses, rpc_pkg *pkg)$/;"	f	file:
reply_error_invalid_argument	matchengine/me_server.c	/^static int reply_error_invalid_argument(nw_ses *ses, rpc_pkg *pkg)$/;"	f	file:
reply_error_invalid_argument	monitorcenter/mc_server.c	/^static int reply_error_invalid_argument(nw_ses *ses, rpc_pkg *pkg)$/;"	f	file:
reply_error_service_unavailable	matchengine/me_server.c	/^static int reply_error_service_unavailable(nw_ses *ses, rpc_pkg *pkg)$/;"	f	file:
reply_error_service_unavailable	readhistory/rh_server.c	/^static int reply_error_service_unavailable(nw_ses *ses, rpc_pkg *pkg)$/;"	f	file:
reply_head	network/nw_job.h	/^    nw_job_entry *reply_head;$/;"	m	struct:nw_job
reply_internal_error	accesshttp/ah_server.c	/^static void reply_internal_error(nw_ses *ses)$/;"	f	file:
reply_internal_error	accessrest/ar_server.c	/^static int reply_internal_error(nw_ses *ses)$/;"	f	file:
reply_invalid_params	accessrest/ar_server.c	/^static int reply_invalid_params(nw_ses *ses)$/;"	f	file:
reply_json	accessrest/ar_server.c	/^static int reply_json(nw_ses *ses, json_t *data, sds cache_key)$/;"	f	file:
reply_json	marketprice/mp_server.c	/^static int reply_json(nw_ses *ses, rpc_pkg *pkg, const json_t *json)$/;"	f	file:
reply_json	matchengine/me_server.c	/^static int reply_json(nw_ses *ses, rpc_pkg *pkg, const json_t *json)$/;"	f	file:
reply_json	monitorcenter/mc_server.c	/^static int reply_json(nw_ses *ses, rpc_pkg *pkg, const json_t *json)$/;"	f	file:
reply_json	readhistory/rh_server.c	/^static int reply_json(nw_ses *ses, rpc_pkg *pkg, const json_t *json)$/;"	f	file:
reply_not_found	accesshttp/ah_server.c	/^static void reply_not_found(nw_ses *ses, int64_t id)$/;"	f	file:
reply_not_found	accessrest/ar_server.c	/^static int reply_not_found(nw_ses *ses)$/;"	f	file:
reply_result	marketprice/mp_server.c	/^static int reply_result(nw_ses *ses, rpc_pkg *pkg, json_t *result)$/;"	f	file:
reply_result	matchengine/me_server.c	/^static int reply_result(nw_ses *ses, rpc_pkg *pkg, json_t *result)$/;"	f	file:
reply_result	monitorcenter/mc_server.c	/^static int reply_result(nw_ses *ses, rpc_pkg *pkg, json_t *result)$/;"	f	file:
reply_result	readhistory/rh_server.c	/^static int reply_result(nw_ses *ses, rpc_pkg *pkg, json_t *result)$/;"	f	file:
reply_success	matchengine/me_server.c	/^static int reply_success(nw_ses *ses, rpc_pkg *pkg)$/;"	f	file:
reply_success	monitorcenter/mc_server.c	/^static int reply_success(nw_ses *ses, rpc_pkg *pkg)$/;"	f	file:
reply_tail	network/nw_job.h	/^    nw_job_entry *reply_tail;$/;"	m	struct:nw_job
reply_time_out	accesshttp/ah_server.c	/^static void reply_time_out(nw_ses *ses, int64_t id)$/;"	f	file:
reply_time_out	accessrest/ar_server.c	/^static int reply_time_out(nw_ses *ses)$/;"	f	file:
report_profile	utils/ut_profile.c	/^static void report_profile(const char *key, uint64_t val)$/;"	f	file:
report_to_center	monitoragent/ma_server.c	/^int report_to_center(const char *key, uint64_t val)$/;"	f
req_id	utils/ut_rpc.h	/^    uint64_t req_id;$/;"	m	struct:rpc_pkg
request	network/nw_job.h	/^    void *request;$/;"	m	struct:nw_job_entry
request	utils/ut_http_svr.c	/^    http_request_t *request;$/;"	m	struct:clt_info	file:
request	utils/ut_ws_svr.c	/^    http_request_t *request;$/;"	m	struct:clt_info	file:
request_count	network/nw_job.h	/^    int request_count;$/;"	m	struct:nw_job
request_head	network/nw_job.h	/^    nw_job_entry *request_head;$/;"	m	struct:nw_job
request_id	accesshttp/ah_server.c	/^    int64_t  request_id;$/;"	m	struct:state_info	file:
request_id	accessws/aw_auth.c	/^    uint64_t request_id;$/;"	m	struct:state_data	file:
request_id	accessws/aw_server.c	/^    uint64_t    request_id;$/;"	m	struct:state_data	file:
request_id	accessws/aw_sign.c	/^    uint64_t request_id;$/;"	m	struct:state_data	file:
request_info	accesshttp/ah_server.c	/^struct request_info {$/;"	s	file:
request_json	matchengine/me_config.c	/^static json_t *request_json(const char *url)$/;"	f	file:
request_tail	network/nw_job.h	/^    nw_job_entry *request_tail;$/;"	m	struct:nw_job
requests	test/accesshttp/auth.py	/^import requests$/;"	i
requests	test/accesshttp/call.py	/^import requests$/;"	i
requests	test/accessrest/request.py	/^import requests$/;"	i
requests	test/monitoragent/test.py	/^import requests$/;"	i
result	accessws/aw_server.c	/^    json_t      *result;$/;"	m	struct:cache_val	file:
result	marketprice/mp_server.c	/^    json_t      *result;$/;"	m	struct:cache_val	file:
result	matchengine/me_server.c	/^    json_t      *result;$/;"	m	struct:cache_val	file:
result	readhistory/rh_server.c	/^    json_t  *result;$/;"	m	struct:job_reply	file:
result	utils/ut_rpc.h	/^    uint32_t result;$/;"	m	struct:rpc_pkg
result_callback	accessws/aw_http.h	/^typedef void (*result_callback)(json_t *result);$/;"	t
rev	depends/hiredis/adapters/libev.h	/^    ev_io rev, wev;$/;"	m	struct:redisLibevEvents
rev	depends/hiredis/adapters/libevent.h	/^    struct event rev, wev;$/;"	m	struct:redisLibeventEvents	typeref:struct:redisLibeventEvents::event
reverse_mem	utils/ut_misc.c	/^void reverse_mem(char *mem, size_t len)$/;"	f
ridx	depends/hiredis/read.h	/^    int ridx; \/* Index of current read task *\/$/;"	m	struct:redisReader
rk	matchengine/me_message.c	/^static rd_kafka_t *rk;$/;"	v	file:
rk	utils/ut_kafka.h	/^    rd_kafka_t *rk;$/;"	m	struct:kafka_consumer_t
rkt	utils/ut_kafka.h	/^    rd_kafka_topic_t *rkt;$/;"	m	struct:kafka_consumer_t
rkt_balances	matchengine/me_message.c	/^static rd_kafka_topic_t *rkt_balances;$/;"	v	file:
rkt_deals	matchengine/me_message.c	/^static rd_kafka_topic_t *rkt_deals;$/;"	v	file:
rkt_orders	matchengine/me_message.c	/^static rd_kafka_topic_t *rkt_orders;$/;"	v	file:
rkt_stops	matchengine/me_message.c	/^static rd_kafka_topic_t *rkt_stops;$/;"	v	file:
rpc_clt	utils/ut_rpc_clt.h	/^typedef struct rpc_clt {$/;"	s
rpc_clt	utils/ut_rpc_clt.h	/^} rpc_clt;$/;"	t	typeref:struct:rpc_clt
rpc_clt_cfg	utils/ut_rpc_clt.h	/^typedef struct rpc_clt_cfg {$/;"	s
rpc_clt_cfg	utils/ut_rpc_clt.h	/^} rpc_clt_cfg;$/;"	t	typeref:struct:rpc_clt_cfg
rpc_clt_close	utils/ut_rpc_clt.c	/^int rpc_clt_close(rpc_clt *clt)$/;"	f
rpc_clt_connected	utils/ut_rpc_clt.c	/^bool rpc_clt_connected(rpc_clt *clt)$/;"	f
rpc_clt_create	utils/ut_rpc_clt.c	/^rpc_clt *rpc_clt_create(rpc_clt_cfg *cfg, rpc_clt_type *type)$/;"	f
rpc_clt_peer_addr	utils/ut_rpc_clt.h	/^# define rpc_clt_peer_addr(/;"	d
rpc_clt_release	utils/ut_rpc_clt.c	/^void rpc_clt_release(rpc_clt *clt)$/;"	f
rpc_clt_send	utils/ut_rpc_clt.c	/^int rpc_clt_send(rpc_clt *clt, rpc_pkg *pkg)$/;"	f
rpc_clt_start	utils/ut_rpc_clt.c	/^int rpc_clt_start(rpc_clt *clt)$/;"	f
rpc_clt_type	utils/ut_rpc_clt.h	/^typedef struct rpc_clt_type {$/;"	s
rpc_clt_type	utils/ut_rpc_clt.h	/^} rpc_clt_type;$/;"	t	typeref:struct:rpc_clt_type
rpc_decode	utils/ut_rpc.c	/^int rpc_decode(nw_ses *ses, void *data, size_t max)$/;"	f
rpc_pack	utils/ut_rpc.c	/^int rpc_pack(rpc_pkg *pkg, void **data, uint32_t *size)$/;"	f
rpc_pkg	utils/ut_rpc.h	/^typedef struct rpc_pkg {$/;"	s
rpc_pkg	utils/ut_rpc.h	/^} rpc_pkg;$/;"	t	typeref:struct:rpc_pkg
rpc_send	utils/ut_rpc.c	/^int rpc_send(nw_ses *ses, rpc_pkg *pkg)$/;"	f
rpc_svr	utils/ut_rpc_svr.h	/^typedef struct rpc_svr {$/;"	s
rpc_svr	utils/ut_rpc_svr.h	/^} rpc_svr;$/;"	t	typeref:struct:rpc_svr
rpc_svr_cfg	utils/ut_rpc_svr.h	/^typedef struct rpc_svr_cfg {$/;"	s
rpc_svr_cfg	utils/ut_rpc_svr.h	/^} rpc_svr_cfg;$/;"	t	typeref:struct:rpc_svr_cfg
rpc_svr_close_clt	utils/ut_rpc_svr.c	/^void rpc_svr_close_clt(rpc_svr *svr, nw_ses *ses)$/;"	f
rpc_svr_create	utils/ut_rpc_svr.c	/^rpc_svr *rpc_svr_create(rpc_svr_cfg *cfg, rpc_svr_type *type)$/;"	f
rpc_svr_from_ses	utils/ut_rpc_svr.c	/^rpc_svr *rpc_svr_from_ses(nw_ses *ses)$/;"	f
rpc_svr_release	utils/ut_rpc_svr.c	/^void rpc_svr_release(rpc_svr *svr)$/;"	f
rpc_svr_start	utils/ut_rpc_svr.c	/^int rpc_svr_start(rpc_svr *svr)$/;"	f
rpc_svr_stop	utils/ut_rpc_svr.c	/^int rpc_svr_stop(rpc_svr *svr)$/;"	f
rpc_svr_type	utils/ut_rpc_svr.h	/^typedef struct rpc_svr_type {$/;"	s
rpc_svr_type	utils/ut_rpc_svr.h	/^} rpc_svr_type;$/;"	t	typeref:struct:rpc_svr_type
rpos	network/nw_buf.h	/^    uint32_t rpos;$/;"	m	struct:nw_buf
rstack	depends/hiredis/read.h	/^    redisReadTask rstack[9];$/;"	m	struct:redisReader
rstripzero	utils/ut_decimal.c	/^char *rstripzero(char *str)$/;"	f
run	depends/hiredis/examples/example-qt.cpp	/^void ExampleQt::run() {$/;"	f	class:ExampleQt
running	network/nw_evt.c	/^static int running;$/;"	v	file:
running	utils/ut_kafka.h	/^    bool running;$/;"	m	struct:kafka_consumer_t
s_body_identity	utils/http_parser.c	/^  , s_body_identity$/;"	e	enum:state	file:
s_body_identity_eof	utils/http_parser.c	/^  , s_body_identity_eof$/;"	e	enum:state	file:
s_chunk_data	utils/http_parser.c	/^  , s_chunk_data$/;"	e	enum:state	file:
s_chunk_data_almost_done	utils/http_parser.c	/^  , s_chunk_data_almost_done$/;"	e	enum:state	file:
s_chunk_data_done	utils/http_parser.c	/^  , s_chunk_data_done$/;"	e	enum:state	file:
s_chunk_parameters	utils/http_parser.c	/^  , s_chunk_parameters$/;"	e	enum:state	file:
s_chunk_size	utils/http_parser.c	/^  , s_chunk_size$/;"	e	enum:state	file:
s_chunk_size_almost_done	utils/http_parser.c	/^  , s_chunk_size_almost_done$/;"	e	enum:state	file:
s_chunk_size_start	utils/http_parser.c	/^  , s_chunk_size_start$/;"	e	enum:state	file:
s_dead	utils/http_parser.c	/^  { s_dead = 1 \/* important that this is > 0 *\/$/;"	e	enum:state	file:
s_header_almost_done	utils/http_parser.c	/^  , s_header_almost_done$/;"	e	enum:state	file:
s_header_field	utils/http_parser.c	/^  , s_header_field$/;"	e	enum:state	file:
s_header_field_start	utils/http_parser.c	/^  , s_header_field_start$/;"	e	enum:state	file:
s_header_value	utils/http_parser.c	/^  , s_header_value$/;"	e	enum:state	file:
s_header_value_discard_lws	utils/http_parser.c	/^  , s_header_value_discard_lws$/;"	e	enum:state	file:
s_header_value_discard_ws	utils/http_parser.c	/^  , s_header_value_discard_ws$/;"	e	enum:state	file:
s_header_value_discard_ws_almost_done	utils/http_parser.c	/^  , s_header_value_discard_ws_almost_done$/;"	e	enum:state	file:
s_header_value_lws	utils/http_parser.c	/^  , s_header_value_lws$/;"	e	enum:state	file:
s_header_value_start	utils/http_parser.c	/^  , s_header_value_start$/;"	e	enum:state	file:
s_headers_almost_done	utils/http_parser.c	/^  , s_headers_almost_done$/;"	e	enum:state	file:
s_headers_done	utils/http_parser.c	/^  , s_headers_done$/;"	e	enum:state	file:
s_http_host	utils/http_parser.c	/^  , s_http_host$/;"	e	enum:http_host_state	file:
s_http_host_dead	utils/http_parser.c	/^    s_http_host_dead = 1$/;"	e	enum:http_host_state	file:
s_http_host_port	utils/http_parser.c	/^  , s_http_host_port$/;"	e	enum:http_host_state	file:
s_http_host_port_start	utils/http_parser.c	/^  , s_http_host_port_start$/;"	e	enum:http_host_state	file:
s_http_host_start	utils/http_parser.c	/^  , s_http_host_start$/;"	e	enum:http_host_state	file:
s_http_host_v6	utils/http_parser.c	/^  , s_http_host_v6$/;"	e	enum:http_host_state	file:
s_http_host_v6_end	utils/http_parser.c	/^  , s_http_host_v6_end$/;"	e	enum:http_host_state	file:
s_http_host_v6_start	utils/http_parser.c	/^  , s_http_host_v6_start$/;"	e	enum:http_host_state	file:
s_http_host_v6_zone	utils/http_parser.c	/^  , s_http_host_v6_zone$/;"	e	enum:http_host_state	file:
s_http_host_v6_zone_start	utils/http_parser.c	/^  , s_http_host_v6_zone_start$/;"	e	enum:http_host_state	file:
s_http_userinfo	utils/http_parser.c	/^  , s_http_userinfo$/;"	e	enum:http_host_state	file:
s_http_userinfo_start	utils/http_parser.c	/^  , s_http_userinfo_start$/;"	e	enum:http_host_state	file:
s_message_done	utils/http_parser.c	/^  , s_message_done$/;"	e	enum:state	file:
s_req_first_http_major	utils/http_parser.c	/^  , s_req_first_http_major$/;"	e	enum:state	file:
s_req_first_http_minor	utils/http_parser.c	/^  , s_req_first_http_minor$/;"	e	enum:state	file:
s_req_fragment	utils/http_parser.c	/^  , s_req_fragment$/;"	e	enum:state	file:
s_req_fragment_start	utils/http_parser.c	/^  , s_req_fragment_start$/;"	e	enum:state	file:
s_req_http_H	utils/http_parser.c	/^  , s_req_http_H$/;"	e	enum:state	file:
s_req_http_HT	utils/http_parser.c	/^  , s_req_http_HT$/;"	e	enum:state	file:
s_req_http_HTT	utils/http_parser.c	/^  , s_req_http_HTT$/;"	e	enum:state	file:
s_req_http_HTTP	utils/http_parser.c	/^  , s_req_http_HTTP$/;"	e	enum:state	file:
s_req_http_major	utils/http_parser.c	/^  , s_req_http_major$/;"	e	enum:state	file:
s_req_http_minor	utils/http_parser.c	/^  , s_req_http_minor$/;"	e	enum:state	file:
s_req_http_start	utils/http_parser.c	/^  , s_req_http_start$/;"	e	enum:state	file:
s_req_line_almost_done	utils/http_parser.c	/^  , s_req_line_almost_done$/;"	e	enum:state	file:
s_req_method	utils/http_parser.c	/^  , s_req_method$/;"	e	enum:state	file:
s_req_path	utils/http_parser.c	/^  , s_req_path$/;"	e	enum:state	file:
s_req_query_string	utils/http_parser.c	/^  , s_req_query_string$/;"	e	enum:state	file:
s_req_query_string_start	utils/http_parser.c	/^  , s_req_query_string_start$/;"	e	enum:state	file:
s_req_schema	utils/http_parser.c	/^  , s_req_schema$/;"	e	enum:state	file:
s_req_schema_slash	utils/http_parser.c	/^  , s_req_schema_slash$/;"	e	enum:state	file:
s_req_schema_slash_slash	utils/http_parser.c	/^  , s_req_schema_slash_slash$/;"	e	enum:state	file:
s_req_server	utils/http_parser.c	/^  , s_req_server$/;"	e	enum:state	file:
s_req_server_start	utils/http_parser.c	/^  , s_req_server_start$/;"	e	enum:state	file:
s_req_server_with_at	utils/http_parser.c	/^  , s_req_server_with_at$/;"	e	enum:state	file:
s_req_spaces_before_url	utils/http_parser.c	/^  , s_req_spaces_before_url$/;"	e	enum:state	file:
s_res_H	utils/http_parser.c	/^  , s_res_H$/;"	e	enum:state	file:
s_res_HT	utils/http_parser.c	/^  , s_res_HT$/;"	e	enum:state	file:
s_res_HTT	utils/http_parser.c	/^  , s_res_HTT$/;"	e	enum:state	file:
s_res_HTTP	utils/http_parser.c	/^  , s_res_HTTP$/;"	e	enum:state	file:
s_res_first_http_major	utils/http_parser.c	/^  , s_res_first_http_major$/;"	e	enum:state	file:
s_res_first_http_minor	utils/http_parser.c	/^  , s_res_first_http_minor$/;"	e	enum:state	file:
s_res_first_status_code	utils/http_parser.c	/^  , s_res_first_status_code$/;"	e	enum:state	file:
s_res_http_major	utils/http_parser.c	/^  , s_res_http_major$/;"	e	enum:state	file:
s_res_http_minor	utils/http_parser.c	/^  , s_res_http_minor$/;"	e	enum:state	file:
s_res_line_almost_done	utils/http_parser.c	/^  , s_res_line_almost_done$/;"	e	enum:state	file:
s_res_or_resp_H	utils/http_parser.c	/^  , s_res_or_resp_H$/;"	e	enum:state	file:
s_res_status	utils/http_parser.c	/^  , s_res_status$/;"	e	enum:state	file:
s_res_status_code	utils/http_parser.c	/^  , s_res_status_code$/;"	e	enum:state	file:
s_res_status_start	utils/http_parser.c	/^  , s_res_status_start$/;"	e	enum:state	file:
s_start_req	utils/http_parser.c	/^  , s_start_req$/;"	e	enum:state	file:
s_start_req_or_res	utils/http_parser.c	/^  , s_start_req_or_res$/;"	e	enum:state	file:
s_start_res	utils/http_parser.c	/^  , s_start_res$/;"	e	enum:state	file:
sds	depends/hiredis/sds.h	/^typedef char *sds;$/;"	t
sds	utils/ut_sds.h	/^typedef char *sds;$/;"	t
sdsAllocSize	depends/hiredis/sds.c	/^size_t sdsAllocSize(sds s) {$/;"	f
sdsAllocSize	utils/ut_sds.c	/^size_t sdsAllocSize(sds s) {$/;"	f
sdsIncrLen	depends/hiredis/sds.c	/^void sdsIncrLen(sds s, int incr) {$/;"	f
sdsIncrLen	utils/ut_sds.c	/^void sdsIncrLen(sds s, int incr) {$/;"	f
sdsMakeRoomFor	depends/hiredis/sds.c	/^sds sdsMakeRoomFor(sds s, size_t addlen) {$/;"	f
sdsMakeRoomFor	utils/ut_sds.c	/^sds sdsMakeRoomFor(sds s, size_t addlen) {$/;"	f
sdsRemoveFreeSpace	depends/hiredis/sds.c	/^sds sdsRemoveFreeSpace(sds s) {$/;"	f
sdsRemoveFreeSpace	utils/ut_sds.c	/^sds sdsRemoveFreeSpace(sds s) {$/;"	f
sdsavail	depends/hiredis/sds.h	/^static inline size_t sdsavail(const sds s) {$/;"	f
sdsavail	utils/ut_sds.h	/^static inline size_t sdsavail(const sds s) {$/;"	f
sdscat	depends/hiredis/sds.c	/^sds sdscat(sds s, const char *t) {$/;"	f
sdscat	utils/ut_sds.c	/^sds sdscat(sds s, const char *t) {$/;"	f
sdscatfmt	depends/hiredis/sds.c	/^sds sdscatfmt(sds s, char const *fmt, ...) {$/;"	f
sdscatfmt	utils/ut_sds.c	/^sds sdscatfmt(sds s, char const *fmt, ...) {$/;"	f
sdscatlen	depends/hiredis/sds.c	/^sds sdscatlen(sds s, const void *t, size_t len) {$/;"	f
sdscatlen	utils/ut_sds.c	/^sds sdscatlen(sds s, const void *t, size_t len) {$/;"	f
sdscatprintf	depends/hiredis/sds.c	/^sds sdscatprintf(sds s, const char *fmt, ...) {$/;"	f
sdscatprintf	utils/ut_sds.c	/^sds sdscatprintf(sds s, const char *fmt, ...) {$/;"	f
sdscatrepr	depends/hiredis/sds.c	/^sds sdscatrepr(sds s, const char *p, size_t len) {$/;"	f
sdscatrepr	utils/ut_sds.c	/^sds sdscatrepr(sds s, const char *p, size_t len) {$/;"	f
sdscatsds	depends/hiredis/sds.c	/^sds sdscatsds(sds s, const sds t) {$/;"	f
sdscatsds	utils/ut_sds.c	/^sds sdscatsds(sds s, const sds t) {$/;"	f
sdscatvprintf	depends/hiredis/sds.c	/^sds sdscatvprintf(sds s, const char *fmt, va_list ap) {$/;"	f
sdscatvprintf	utils/ut_sds.c	/^sds sdscatvprintf(sds s, const char *fmt, va_list ap) {$/;"	f
sdsclear	depends/hiredis/sds.c	/^void sdsclear(sds s) {$/;"	f
sdsclear	utils/ut_sds.c	/^void sdsclear(sds s) {$/;"	f
sdscmp	depends/hiredis/sds.c	/^int sdscmp(const sds s1, const sds s2) {$/;"	f
sdscmp	utils/ut_sds.c	/^int sdscmp(const sds s1, const sds s2) {$/;"	f
sdscpy	depends/hiredis/sds.c	/^sds sdscpy(sds s, const char *t) {$/;"	f
sdscpy	utils/ut_sds.c	/^sds sdscpy(sds s, const char *t) {$/;"	f
sdscpylen	depends/hiredis/sds.c	/^sds sdscpylen(sds s, const char *t, size_t len) {$/;"	f
sdscpylen	utils/ut_sds.c	/^sds sdscpylen(sds s, const char *t, size_t len) {$/;"	f
sdsdup	depends/hiredis/sds.c	/^sds sdsdup(const sds s) {$/;"	f
sdsdup	utils/ut_sds.c	/^sds sdsdup(const sds s) {$/;"	f
sdsempty	depends/hiredis/sds.c	/^sds sdsempty(void) {$/;"	f
sdsempty	utils/ut_sds.c	/^sds sdsempty(void) {$/;"	f
sdsfree	depends/hiredis/sds.c	/^void sdsfree(sds s) {$/;"	f
sdsfree	utils/ut_sds.c	/^void sdsfree(sds s) {$/;"	f
sdsfreesplitres	depends/hiredis/sds.c	/^void sdsfreesplitres(sds *tokens, int count) {$/;"	f
sdsfreesplitres	utils/ut_sds.c	/^void sdsfreesplitres(sds *tokens, int count) {$/;"	f
sdsfromlonglong	depends/hiredis/sds.c	/^sds sdsfromlonglong(long long value) {$/;"	f
sdsfromlonglong	utils/ut_sds.c	/^sds sdsfromlonglong(long long value) {$/;"	f
sdsgrowzero	depends/hiredis/sds.c	/^sds sdsgrowzero(sds s, size_t len) {$/;"	f
sdsgrowzero	utils/ut_sds.c	/^sds sdsgrowzero(sds s, size_t len) {$/;"	f
sdshdr	depends/hiredis/sds.h	/^struct sdshdr {$/;"	s
sdshdr	utils/ut_sds.h	/^struct sdshdr {$/;"	s
sdsjoin	depends/hiredis/sds.c	/^sds sdsjoin(char **argv, int argc, char *sep, size_t seplen) {$/;"	f
sdsjoin	utils/ut_sds.c	/^sds sdsjoin(char **argv, int argc, char *sep, size_t seplen) {$/;"	f
sdsjoinsds	depends/hiredis/sds.c	/^sds sdsjoinsds(sds *argv, int argc, const char *sep, size_t seplen) {$/;"	f
sdsjoinsds	utils/ut_sds.c	/^sds sdsjoinsds(sds *argv, int argc, const char *sep, size_t seplen) {$/;"	f
sdslen	depends/hiredis/sds.h	/^static inline size_t sdslen(const sds s) {$/;"	f
sdslen	utils/ut_sds.h	/^static inline size_t sdslen(const sds s) {$/;"	f
sdsll2str	depends/hiredis/sds.c	/^int sdsll2str(char *s, long long value) {$/;"	f
sdsll2str	utils/ut_sds.c	/^int sdsll2str(char *s, long long value) {$/;"	f
sdsmapchars	depends/hiredis/sds.c	/^sds sdsmapchars(sds s, const char *from, const char *to, size_t setlen) {$/;"	f
sdsmapchars	utils/ut_sds.c	/^sds sdsmapchars(sds s, const char *from, const char *to, size_t setlen) {$/;"	f
sdsnew	depends/hiredis/sds.c	/^sds sdsnew(const char *init) {$/;"	f
sdsnew	utils/ut_sds.c	/^sds sdsnew(const char *init) {$/;"	f
sdsnewlen	depends/hiredis/sds.c	/^sds sdsnewlen(const void *init, size_t initlen) {$/;"	f
sdsnewlen	utils/ut_sds.c	/^sds sdsnewlen(const void *init, size_t initlen) {$/;"	f
sdsrange	depends/hiredis/sds.c	/^void sdsrange(sds s, int start, int end) {$/;"	f
sdsrange	utils/ut_sds.c	/^void sdsrange(sds s, int start, int end) {$/;"	f
sdssplitargs	depends/hiredis/sds.c	/^sds *sdssplitargs(const char *line, int *argc) {$/;"	f
sdssplitargs	utils/ut_sds.c	/^sds *sdssplitargs(const char *line, int *argc) {$/;"	f
sdssplitlen	depends/hiredis/sds.c	/^sds *sdssplitlen(const char *s, int len, const char *sep, int seplen, int *count) {$/;"	f
sdssplitlen	utils/ut_sds.c	/^sds *sdssplitlen(const char *s, int len, const char *sep, int seplen, int *count) {$/;"	f
sdstolower	depends/hiredis/sds.c	/^void sdstolower(sds s) {$/;"	f
sdstolower	utils/ut_sds.c	/^void sdstolower(sds s) {$/;"	f
sdstoupper	depends/hiredis/sds.c	/^void sdstoupper(sds s) {$/;"	f
sdstoupper	utils/ut_sds.c	/^void sdstoupper(sds s) {$/;"	f
sdstrim	depends/hiredis/sds.c	/^void sdstrim(sds s, const char *cset) {$/;"	f
sdstrim	utils/ut_sds.c	/^void sdstrim(sds s, const char *cset) {$/;"	f
sdsull2str	depends/hiredis/sds.c	/^int sdsull2str(char *s, unsigned long long v) {$/;"	f
sdsull2str	utils/ut_sds.c	/^int sdsull2str(char *s, unsigned long long v) {$/;"	f
sdsupdatelen	depends/hiredis/sds.c	/^void sdsupdatelen(sds s) {$/;"	f
sdsupdatelen	utils/ut_sds.c	/^void sdsupdatelen(sds s) {$/;"	f
sec	marketprice/mp_message.c	/^    dict_t *sec;$/;"	m	struct:market_info	file:
sec_max	marketprice/mp_config.h	/^    int                 sec_max;$/;"	m	struct:settings
seekNewline	depends/hiredis/read.c	/^static char *seekNewline(char *s, size_t len) {$/;"	f	file:
select_database	depends/hiredis/test.c	/^static redisContext *select_database(redisContext *c) {$/;"	f	file:
send_auth_request	accessws/aw_auth.c	/^int send_auth_request(nw_ses *ses, uint64_t id, struct clt_info *info, json_t *params)$/;"	f
send_email	alertcenter/send_alert.py	/^def send_email(to_address, subject, content):$/;"	f
send_empty_reply	utils/ut_ws_svr.c	/^static int send_empty_reply(nw_ses *ses)$/;"	f	file:
send_error	accessws/aw_server.c	/^int send_error(nw_ses *ses, uint64_t id, int code, const char *message)$/;"	f
send_error_internal_error	accessws/aw_server.c	/^int send_error_internal_error(nw_ses *ses, uint64_t id)$/;"	f
send_error_invalid_argument	accessws/aw_server.c	/^int send_error_invalid_argument(nw_ses *ses, uint64_t id)$/;"	f
send_error_method_notfound	accessws/aw_server.c	/^int send_error_method_notfound(nw_ses *ses, uint64_t id)$/;"	f
send_error_require_auth	accessws/aw_server.c	/^int send_error_require_auth(nw_ses *ses, uint64_t id)$/;"	f
send_error_service_timeout	accessws/aw_server.c	/^int send_error_service_timeout(nw_ses *ses, uint64_t id)$/;"	f
send_error_service_unavailable	accessws/aw_server.c	/^int send_error_service_unavailable(nw_ses *ses, uint64_t id)$/;"	f
send_hand_shake_reply	utils/ut_ws_svr.c	/^static int send_hand_shake_reply(nw_ses *ses, char *protocol, const char *key)$/;"	f	file:
send_heartbeat	utils/ut_rpc_clt.c	/^static int send_heartbeat(rpc_clt *clt)$/;"	f	file:
send_http_request	accessws/aw_http.c	/^int send_http_request(const char *method, json_t *params, result_callback callback)$/;"	f
send_http_response	utils/ut_http_svr.c	/^int send_http_response(nw_ses *ses, http_response_t *response)$/;"	f
send_http_response_simple	utils/ut_http_svr.c	/^int send_http_response_simple(nw_ses *ses, uint32_t status, void *content, size_t size)$/;"	f
send_json	accessws/aw_server.c	/^static int send_json(nw_ses *ses, const json_t *json)$/;"	f	file:
send_notify	accessws/aw_server.c	/^int send_notify(nw_ses *ses, const char *method, json_t *params)$/;"	f
send_pong_message	utils/ut_ws_svr.c	/^static int send_pong_message(nw_ses *ses)$/;"	f	file:
send_reply	utils/ut_ws_svr.c	/^static int send_reply(nw_ses *ses, uint8_t opcode, void *payload, size_t payload_len)$/;"	f	file:
send_result	accessws/aw_server.c	/^int send_result(nw_ses *ses, uint64_t id, json_t *result)$/;"	f
send_sign_request	accessws/aw_sign.c	/^int send_sign_request(nw_ses *ses, uint64_t id, struct clt_info *info, json_t *params)$/;"	f
send_success	accessws/aw_server.c	/^int send_success(nw_ses *ses, uint64_t id)$/;"	f
sequence	marketprice/mp_access.c	/^    uint32_t sequence;$/;"	m	struct:state_info	file:
sequence	utils/ut_rpc.h	/^    uint32_t sequence;$/;"	m	struct:rpc_pkg
ses	accesshttp/ah_server.c	/^    nw_ses  *ses;$/;"	m	struct:state_info	file:
ses	accessrest/ar_server.c	/^    nw_ses      *ses;$/;"	m	struct:state_data	file:
ses	accessws/aw_asset.c	/^    void *ses;$/;"	m	struct:sub_unit	file:
ses	accessws/aw_auth.c	/^    nw_ses *ses;$/;"	m	struct:state_data	file:
ses	accessws/aw_order.c	/^    void *ses;$/;"	m	struct:sub_unit	file:
ses	accessws/aw_server.c	/^    nw_ses      *ses;$/;"	m	struct:state_data	file:
ses	accessws/aw_sign.c	/^    nw_ses *ses;$/;"	m	struct:state_data	file:
ses	marketprice/mp_access.c	/^    nw_ses  *ses;$/;"	m	struct:state_info	file:
ses	network/nw_clt.h	/^    nw_ses ses;$/;"	m	struct:nw_clt
ses	readhistory/rh_server.c	/^    nw_ses   *ses;$/;"	m	struct:job_request	file:
ses	utils/ut_http_svr.c	/^    nw_ses  *ses;$/;"	m	struct:clt_info	file:
ses	utils/ut_ws_svr.c	/^    nw_ses      *ses;$/;"	m	struct:clt_info	file:
ses_id	accesshttp/ah_server.c	/^    uint64_t ses_id;$/;"	m	struct:state_info	file:
ses_id	accessrest/ar_server.c	/^    uint64_t    ses_id;$/;"	m	struct:state_data	file:
ses_id	accessws/aw_auth.c	/^    uint64_t ses_id;$/;"	m	struct:state_data	file:
ses_id	accessws/aw_server.c	/^    uint64_t    ses_id;$/;"	m	struct:state_data	file:
ses_id	accessws/aw_sign.c	/^    uint64_t ses_id;$/;"	m	struct:state_data	file:
ses_id	marketprice/mp_access.c	/^    uint64_t ses_id;$/;"	m	struct:state_info	file:
ses_id	readhistory/rh_server.c	/^    uint64_t ses_id;$/;"	m	struct:job_request	file:
ses_type	network/nw_ses.h	/^    int ses_type;$/;"	m	struct:nw_ses
sessions	accessws/aw_deals.c	/^    dict_t *sessions;$/;"	m	struct:market_val	file:
sessions	accessws/aw_deals.c	/^    dict_t *sessions;$/;"	m	struct:user_val	file:
sessions	accessws/aw_depth.c	/^    dict_t *sessions;$/;"	m	struct:depth_val	file:
sessions	accessws/aw_kline.c	/^    dict_t *sessions;$/;"	m	struct:kline_val	file:
setContext	depends/hiredis/adapters/qt.h	/^        int setContext(redisAsyncContext * ac) {$/;"	f	class:RedisQtAdapter
set_core_limit	utils/ut_misc.c	/^int set_core_limit(size_t limit)$/;"	f
set_dict_hash_func	monitorcenter/mc_server.c	/^static uint32_t set_dict_hash_func(const void *key)$/;"	f	file:
set_dict_key_compare	monitorcenter/mc_server.c	/^static int set_dict_key_compare(const void *key1, const void *key2)$/;"	f	file:
set_dict_key_dup	monitorcenter/mc_server.c	/^static void *set_dict_key_dup(const void *key)$/;"	f	file:
set_dict_key_free	monitorcenter/mc_server.c	/^static void set_dict_key_free(void *key)$/;"	f	file:
set_file_limit	utils/ut_misc.c	/^int set_file_limit(size_t limit)$/;"	f
set_last_aggregate_time	monitorcenter/mc_server.c	/^static int set_last_aggregate_time(const char *key, time_t val)$/;"	f	file:
set_socket_option	network/nw_clt.c	/^static int set_socket_option(nw_clt *clt, int sockfd)$/;"	f	file:
set_socket_option	network/nw_svr.c	/^static int set_socket_option(nw_svr *svr, int sockfd)$/;"	f	file:
settings	accesshttp/ah_config.c	/^struct settings settings;$/;"	v	typeref:struct:settings
settings	accesshttp/ah_config.h	/^struct settings {$/;"	s
settings	accessrest/ar_config.c	/^struct settings settings;$/;"	v	typeref:struct:settings
settings	accessrest/ar_config.h	/^struct settings {$/;"	s
settings	accessws/aw_config.c	/^struct settings settings;$/;"	v	typeref:struct:settings
settings	accessws/aw_config.h	/^struct settings {$/;"	s
settings	alertcenter/ac_config.c	/^struct settings settings;$/;"	v	typeref:struct:settings
settings	alertcenter/ac_config.h	/^struct settings {$/;"	s
settings	logwriter/lw_config.c	/^struct settings settings;$/;"	v	typeref:struct:settings
settings	logwriter/lw_config.h	/^struct settings {$/;"	s
settings	marketprice/mp_config.c	/^struct settings settings;$/;"	v	typeref:struct:settings
settings	marketprice/mp_config.h	/^struct settings {$/;"	s
settings	matchengine/me_config.c	/^struct settings settings;$/;"	v	typeref:struct:settings
settings	matchengine/me_config.h	/^struct settings {$/;"	s
settings	monitoragent/ma_config.c	/^struct settings settings;$/;"	v	typeref:struct:settings
settings	monitoragent/ma_config.h	/^struct settings {$/;"	s
settings	monitorcenter/mc_config.c	/^struct settings settings;$/;"	v	typeref:struct:settings
settings	monitorcenter/mc_config.h	/^struct settings {$/;"	s
settings	readhistory/rh_config.c	/^struct settings settings;$/;"	v	typeref:struct:settings
settings	readhistory/rh_config.h	/^struct settings {$/;"	s
settings	utils/ut_http_svr.h	/^    http_parser_settings settings;$/;"	m	struct:http_svr
settings	utils/ut_ws_svr.h	/^    http_parser_settings settings;$/;"	m	struct:ws_svr
shift	utils/ut_config.h	/^    int     shift;$/;"	m	struct:log_cfg
shift_log	utils/ut_log.c	/^static int shift_log(dlog_t *log, struct timeval *now)$/;"	f	file:
shift_type	utils/ut_log.h	/^    int                 shift_type;$/;"	m	struct:__anon7
shm_key	utils/ut_queue.c	/^    uint64_t shm_key;$/;"	m	struct:queue_head	file:
shutdown	network/nw_job.h	/^    bool shutdown;$/;"	m	struct:nw_job
shutdown	utils/ut_kafka.h	/^    bool shutdown;$/;"	m	struct:kafka_consumer_t
side	matchengine/me_market.h	/^    uint32_t        side;$/;"	m	struct:order_t
side	matchengine/me_market.h	/^    uint32_t        side;$/;"	m	struct:stop_t
sign_request	accessws/aw_sign.c	/^struct sign_request {$/;"	s	file:
sign_url	accessws/aw_config.h	/^    char                *sign_url;$/;"	m	struct:settings
signal	utils/ut_signal.c	/^struct signal {$/;"	s	file:
signal_exit	utils/ut_signal.c	/^int signal_exit;$/;"	v
signal_handler	utils/ut_signal.c	/^static void signal_handler(int signo)$/;"	f	file:
signal_reload	utils/ut_signal.c	/^int signal_reload;$/;"	v
signals	utils/ut_signal.c	/^static struct signal signals[] = {$/;"	v	typeref:struct:signal	file:
signame	utils/ut_signal.c	/^    char *signame;$/;"	m	struct:signal	file:
signo	utils/ut_signal.c	/^    int signo;$/;"	m	struct:signal	file:
size	depends/hiredis/dict.h	/^    unsigned long size;$/;"	m	struct:dict
size	network/nw_buf.h	/^    uint32_t size;$/;"	m	struct:nw_buf
size	network/nw_buf.h	/^    uint32_t size;$/;"	m	struct:nw_buf_pool
size	network/nw_buf.h	/^    uint32_t size;$/;"	m	struct:nw_cache
size	utils/ut_dict.h	/^    uint32_t size;$/;"	m	struct:dict_t
sizemask	depends/hiredis/dict.h	/^    unsigned long sizemask;$/;"	m	struct:dict
skiplist_create	utils/ut_skiplist.c	/^skiplist_t *skiplist_create(skiplist_type *type)$/;"	f
skiplist_create_node	utils/ut_skiplist.c	/^static skiplist_node *skiplist_create_node(skiplist_t *list, int level, void *value)$/;"	f	file:
skiplist_delete	utils/ut_skiplist.c	/^void skiplist_delete(skiplist_t *list, skiplist_node *x)$/;"	f
skiplist_find	utils/ut_skiplist.c	/^skiplist_node *skiplist_find(skiplist_t *list, void *value)$/;"	f
skiplist_get_iterator	utils/ut_skiplist.c	/^skiplist_iter *skiplist_get_iterator(skiplist_t *list)$/;"	f
skiplist_insert	utils/ut_skiplist.c	/^skiplist_t *skiplist_insert(skiplist_t *list, void *value)$/;"	f
skiplist_iter	utils/ut_skiplist.h	/^typedef struct skiplist_iter {$/;"	s
skiplist_iter	utils/ut_skiplist.h	/^} skiplist_iter;$/;"	t	typeref:struct:skiplist_iter
skiplist_len	utils/ut_skiplist.h	/^# define skiplist_len(/;"	d
skiplist_next	utils/ut_skiplist.c	/^skiplist_node *skiplist_next(skiplist_iter *iter)$/;"	f
skiplist_node	utils/ut_skiplist.h	/^typedef struct skiplist_node {$/;"	s
skiplist_node	utils/ut_skiplist.h	/^} skiplist_node;$/;"	t	typeref:struct:skiplist_node
skiplist_node_value	utils/ut_skiplist.h	/^# define skiplist_node_value(/;"	d
skiplist_random_level	utils/ut_skiplist.c	/^static int skiplist_random_level(void)$/;"	f	file:
skiplist_release	utils/ut_skiplist.c	/^void skiplist_release(skiplist_t *list)$/;"	f
skiplist_release_iterator	utils/ut_skiplist.c	/^void skiplist_release_iterator(skiplist_iter *iter)$/;"	f
skiplist_reset_iterator	utils/ut_skiplist.c	/^skiplist_iter* skiplist_reset_iterator(skiplist_t *list, skiplist_iter *iter)$/;"	f
skiplist_t	utils/ut_skiplist.h	/^typedef struct skiplist_t {$/;"	s
skiplist_t	utils/ut_skiplist.h	/^} skiplist_t;$/;"	t	typeref:struct:skiplist_t
skiplist_type	utils/ut_skiplist.h	/^typedef struct skiplist_type {$/;"	s
skiplist_type	utils/ut_skiplist.h	/^} skiplist_type;$/;"	t	typeref:struct:skiplist_type
slice_count	matchengine/me_persist.c	/^static int slice_count(MYSQL *conn, time_t timestamp)$/;"	f	file:
slice_interval	matchengine/me_config.h	/^    int                 slice_interval;$/;"	m	struct:settings
slice_keeptime	matchengine/me_config.h	/^    int                 slice_keeptime;$/;"	m	struct:settings
snprintf	depends/hiredis/win32.h	/^#define snprintf /;"	d
sock_type	network/nw_clt.h	/^    int sock_type;$/;"	m	struct:nw_clt_cfg
sock_type	network/nw_ses.h	/^    int sock_type;$/;"	m	struct:nw_ses
sock_type	network/nw_svr.h	/^    int sock_type;$/;"	m	struct:nw_svr_bind
sock_type	utils/ut_cli.h	/^    int sock_type;$/;"	m	struct:cli_svr_cfg
sock_type	utils/ut_rpc_clt.h	/^    int sock_type;$/;"	m	struct:rpc_clt_cfg
socketRef	depends/hiredis/adapters/macosx.h	/^    CFSocketRef socketRef;$/;"	m	struct:__anon16
sockfd	network/nw_ses.h	/^    int sockfd;$/;"	m	struct:nw_ses
sockfd	utils/ut_alert.c	/^static int sockfd;$/;"	v	file:
sockfd	utils/ut_log.h	/^    int                 sockfd;$/;"	m	struct:__anon7
sockfd	utils/ut_profile.c	/^static int sockfd;$/;"	v	file:
source	accessws/aw_server.h	/^    char        *source;$/;"	m	struct:clt_info
source	depends/hiredis/adapters/glib.h	/^    GSource source;$/;"	m	struct:__anon15
source	matchengine/me_market.h	/^    char            *source;$/;"	m	struct:order_t
source	matchengine/me_market.h	/^    char            *source;$/;"	m	struct:stop_t
sourceRef	depends/hiredis/adapters/macosx.h	/^    CFRunLoopSourceRef sourceRef;$/;"	m	struct:__anon16
source_addr	depends/hiredis/hiredis.h	/^        char *source_addr;$/;"	m	struct:redisContext::__anon13
sql	matchengine/me_history.c	/^    sds     sql;$/;"	m	struct:dict_sql_val	file:
sql_append_mpd	matchengine/me_dump.c	/^static sds sql_append_mpd(sds sql, mpd_t *val, bool comma)$/;"	f	file:
sql_append_mpd	matchengine/me_history.c	/^static sds sql_append_mpd(sds sql, mpd_t *val, bool comma)$/;"	f	file:
sstrncpy	utils/ut_misc.c	/^char *sstrncpy(char *dest, const char *src, size_t n)$/;"	f
start_state	utils/http_parser.c	/^#define start_state /;"	d	file:
state	accesshttp/ah_server.c	/^static nw_state *state;$/;"	v	file:
state	utils/http_parser.c	/^enum state$/;"	g	file:
state	utils/http_parser.h	/^  unsigned int state : 7;        \/* enum state from http_parser.c *\/$/;"	m	struct:http_parser
state_context	accessrest/ar_server.c	/^static nw_state *state_context;$/;"	v	file:
state_context	accessrest/ar_ticker.c	/^static nw_state *state_context;$/;"	v	file:
state_context	accessws/aw_asset.c	/^static nw_state *state_context;$/;"	v	file:
state_context	accessws/aw_auth.c	/^static nw_state *state_context;$/;"	v	file:
state_context	accessws/aw_deals.c	/^static nw_state *state_context;$/;"	v	file:
state_context	accessws/aw_depth.c	/^static nw_state *state_context;$/;"	v	file:
state_context	accessws/aw_kline.c	/^static nw_state *state_context;$/;"	v	file:
state_context	accessws/aw_server.c	/^static nw_state *state_context;$/;"	v	file:
state_context	accessws/aw_sign.c	/^static nw_state *state_context;$/;"	v	file:
state_context	accessws/aw_state.c	/^static nw_state *state_context;$/;"	v	file:
state_context	marketprice/mp_access.c	/^static nw_state *state_context;$/;"	v	file:
state_data	accessrest/ar_server.c	/^struct state_data {$/;"	s	file:
state_data	accessrest/ar_ticker.c	/^struct state_data {$/;"	s	file:
state_data	accessws/aw_asset.c	/^struct state_data {$/;"	s	file:
state_data	accessws/aw_auth.c	/^struct state_data {$/;"	s	file:
state_data	accessws/aw_deals.c	/^struct state_data {$/;"	s	file:
state_data	accessws/aw_depth.c	/^struct state_data {$/;"	s	file:
state_data	accessws/aw_kline.c	/^struct state_data {$/;"	s	file:
state_data	accessws/aw_server.c	/^struct state_data {$/;"	s	file:
state_data	accessws/aw_sign.c	/^struct state_data {$/;"	s	file:
state_data	accessws/aw_state.c	/^struct state_data {$/;"	s	file:
state_info	accesshttp/ah_server.c	/^struct state_info {$/;"	s	file:
state_info	marketprice/mp_access.c	/^struct state_info {$/;"	s	file:
state_interval	accessrest/ar_config.h	/^    double              state_interval;$/;"	m	struct:settings
state_interval	accessws/aw_config.h	/^    double              state_interval;$/;"	m	struct:settings
state_release	network/nw_state.c	/^static void state_release(nw_state *context, nw_state_entry *entry)$/;"	f	file:
state_remove	network/nw_state.c	/^static void state_remove(nw_state *context, nw_state_entry *entry)$/;"	f	file:
state_send_last	accessws/aw_state.c	/^int state_send_last(nw_ses *ses)$/;"	f
state_subscribe	accessws/aw_state.c	/^int state_subscribe(nw_ses *ses, json_t *market_list)$/;"	f
state_subscribe_number	accessws/aw_state.c	/^size_t state_subscribe_number(void)$/;"	f
state_unsubscribe	accessws/aw_state.c	/^int state_unsubscribe(nw_ses *ses)$/;"	f
status	utils/ut_http.h	/^    uint32_t    status;$/;"	m	struct:http_response_t
status_code	utils/http_parser.h	/^  unsigned int status_code : 16; \/* responses only *\/$/;"	m	struct:http_parser
status_report	matchengine/me_market.c	/^static void status_report(void)$/;"	f	file:
status_report	matchengine/me_trade.c	/^static void status_report(void)$/;"	f	file:
std	test/utils/makefile	/^	gcc test_dict.c -std=gnu99 -g -o test_dict.exe -I ..\/..\/utils\/ -L ..\/..\/utils\/ -lutils -ljansson$/;"	m
std	test/utils/makefile	/^	gcc test_http.c -std=gnu99 -g -o test_http.exe -I ..\/..\/utils\/ -I ..\/..\/network\/ -L ..\/..\/utils\/ -lutils -L ..\/..\/network\/ -lnetwork -lm$/;"	m
std	test/utils/makefile	/^	gcc test_skiplist.c -std=gnu99 -g -o test_skiplist.exe -I ..\/..\/utils\/ -L ..\/..\/utils\/ -lutils$/;"	m
stock	matchengine/me_config.h	/^    char                *stock;$/;"	m	struct:market
stock	matchengine/me_market.h	/^    char            *stock;$/;"	m	struct:market_t
stock_prec	matchengine/me_config.h	/^    int                 stock_prec;$/;"	m	struct:market
stock_prec	matchengine/me_market.h	/^    int             stock_prec;$/;"	m	struct:market_t
stop_asks	matchengine/me_market.h	/^    skiplist_t      *stop_asks;$/;"	m	struct:market_t
stop_bids	matchengine/me_market.h	/^    skiplist_t      *stop_bids;$/;"	m	struct:market_t
stop_free	matchengine/me_market.c	/^static void stop_free(stop_t *stop)$/;"	f	file:
stop_id_compare	matchengine/me_market.c	/^static int stop_id_compare(const void *value1, const void *value2)$/;"	f	file:
stop_match_compare	matchengine/me_market.c	/^static int stop_match_compare(const void *value1, const void *value2)$/;"	f	file:
stop_price	matchengine/me_market.h	/^    mpd_t           *stop_price;$/;"	m	struct:stop_t
stop_t	matchengine/me_market.h	/^typedef struct stop_t {$/;"	s
stop_t	matchengine/me_market.h	/^} stop_t;$/;"	t	typeref:struct:stop_t
stops	accessws/aw_config.h	/^    kafka_consumer_cfg  stops;$/;"	m	struct:settings
stops	matchengine/me_market.h	/^    dict_t          *stops;$/;"	m	struct:market_t
str	depends/hiredis/hiredis.h	/^    char *str; \/* Used for both REDIS_REPLY_ERROR and REDIS_REPLY_STRING *\/$/;"	m	struct:redisReply
strclearblank	utils/ut_misc.c	/^void strclearblank(char *str)$/;"	f
strftimestamp	utils/ut_misc.c	/^char *strftimestamp(time_t t)$/;"	f
strtolower	utils/ut_log.c	/^static char *strtolower(char *str)$/;"	f	file:
strtolower	utils/ut_misc.c	/^void strtolower(char *str)$/;"	f
strtoupper	utils/ut_misc.c	/^void strtoupper(char *str)$/;"	f
sub	depends/hiredis/async.h	/^    } sub;$/;"	m	struct:redisAsyncContext	typeref:struct:redisAsyncContext::__anon18
sub_unit	accessws/aw_asset.c	/^struct sub_unit {$/;"	s	file:
sub_unit	accessws/aw_order.c	/^struct sub_unit {$/;"	s	file:
subscribe_user	accessws/aw_deals.c	/^static int subscribe_user(nw_ses *ses, uint32_t user_id)$/;"	f	file:
svr	accesshttp/ah_config.h	/^    http_svr_cfg        svr;$/;"	m	struct:settings
svr	accesshttp/ah_server.c	/^static http_svr *svr;$/;"	v	file:
svr	accessrest/ar_config.h	/^    http_svr_cfg        svr;$/;"	m	struct:settings
svr	accessrest/ar_server.c	/^static http_svr *svr;$/;"	v	file:
svr	accessws/aw_config.h	/^    ws_svr_cfg          svr;$/;"	m	struct:settings
svr	accessws/aw_server.c	/^static ws_svr *svr;$/;"	v	file:
svr	alertcenter/ac_config.h	/^    nw_svr_cfg          svr;$/;"	m	struct:settings
svr	alertcenter/ac_server.c	/^static nw_svr *svr;$/;"	v	file:
svr	logwriter/lw_server.c	/^    nw_svr *svr;$/;"	m	struct:instance	file:
svr	marketprice/mp_access.c	/^static rpc_svr *svr;$/;"	v	file:
svr	marketprice/mp_config.h	/^    rpc_svr_cfg         svr;$/;"	m	struct:settings
svr	marketprice/mp_server.c	/^static rpc_svr *svr;$/;"	v	file:
svr	matchengine/me_cli.c	/^static cli_svr *svr;$/;"	v	file:
svr	matchengine/me_config.h	/^    rpc_svr_cfg         svr;$/;"	m	struct:settings
svr	matchengine/me_server.c	/^static rpc_svr *svr;$/;"	v	file:
svr	monitoragent/ma_config.h	/^    nw_svr_cfg          svr;$/;"	m	struct:settings
svr	monitoragent/ma_server.c	/^static nw_svr *svr;$/;"	v	file:
svr	monitorcenter/mc_config.h	/^    rpc_svr_cfg         svr;$/;"	m	struct:settings
svr	monitorcenter/mc_server.c	/^static rpc_svr *svr;$/;"	v	file:
svr	network/nw_ses.h	/^    void *svr;$/;"	m	struct:nw_ses
svr	readhistory/rh_config.h	/^    rpc_svr_cfg         svr;$/;"	m	struct:settings
svr	readhistory/rh_server.c	/^static rpc_svr *svr;$/;"	v	file:
svr_count	network/nw_svr.h	/^    uint32_t svr_count;$/;"	m	struct:nw_svr
svr_list	network/nw_svr.h	/^    nw_ses *svr_list;$/;"	m	struct:nw_svr
svr_on_connection_close	marketprice/mp_access.c	/^static void svr_on_connection_close(nw_ses *ses)$/;"	f	file:
svr_on_connection_close	marketprice/mp_server.c	/^static void svr_on_connection_close(nw_ses *ses)$/;"	f	file:
svr_on_connection_close	matchengine/me_server.c	/^static void svr_on_connection_close(nw_ses *ses)$/;"	f	file:
svr_on_connection_close	monitorcenter/mc_server.c	/^static void svr_on_connection_close(nw_ses *ses)$/;"	f	file:
svr_on_connection_close	readhistory/rh_server.c	/^static void svr_on_connection_close(nw_ses *ses)$/;"	f	file:
svr_on_new_connection	marketprice/mp_access.c	/^static void svr_on_new_connection(nw_ses *ses)$/;"	f	file:
svr_on_new_connection	marketprice/mp_server.c	/^static void svr_on_new_connection(nw_ses *ses)$/;"	f	file:
svr_on_new_connection	matchengine/me_server.c	/^static void svr_on_new_connection(nw_ses *ses)$/;"	f	file:
svr_on_new_connection	monitorcenter/mc_server.c	/^static void svr_on_new_connection(nw_ses *ses)$/;"	f	file:
svr_on_new_connection	readhistory/rh_server.c	/^static void svr_on_new_connection(nw_ses *ses)$/;"	f	file:
svr_on_recv_pkg	marketprice/mp_access.c	/^static void svr_on_recv_pkg(nw_ses *ses, rpc_pkg *pkg)$/;"	f	file:
svr_on_recv_pkg	marketprice/mp_server.c	/^static void svr_on_recv_pkg(nw_ses *ses, rpc_pkg *pkg)$/;"	f	file:
svr_on_recv_pkg	matchengine/me_server.c	/^static void svr_on_recv_pkg(nw_ses *ses, rpc_pkg *pkg)$/;"	f	file:
svr_on_recv_pkg	monitorcenter/mc_server.c	/^static void svr_on_recv_pkg(nw_ses *ses, rpc_pkg *pkg)$/;"	f	file:
svr_on_recv_pkg	readhistory/rh_server.c	/^static void svr_on_recv_pkg(nw_ses *ses, rpc_pkg *pkg)$/;"	f	file:
sys	monitorcenter/delete_all.py	/^import sys$/;"	i
sys	tools/monitor_delete_scope.py	/^import sys$/;"	i
table	depends/hiredis/dict.h	/^    dictEntry **table;$/;"	m	struct:dict
table	network/nw_state.h	/^    nw_state_entry **table;$/;"	m	struct:nw_state
table	utils/ut_dict.h	/^    dict_entry **table;$/;"	m	struct:dict_t
table_mask	network/nw_state.h	/^    uint32_t table_mask;$/;"	m	struct:nw_state
table_size	network/nw_state.h	/^    uint32_t table_size;$/;"	m	struct:nw_state
tail	depends/hiredis/async.h	/^    redisCallback *head, *tail;$/;"	m	struct:redisCallbackList
tail	network/nw_buf.h	/^    nw_buf *tail;$/;"	m	struct:nw_buf_list
tail	utils/ut_list.h	/^    list_node *tail;$/;"	m	struct:list_t
taker_fee	matchengine/me_market.h	/^    mpd_t           *taker_fee;$/;"	m	struct:order_t
taker_fee	matchengine/me_market.h	/^    mpd_t           *taker_fee;$/;"	m	struct:stop_t
tcp	depends/hiredis/hiredis.h	/^    } tcp;$/;"	m	struct:redisContext	typeref:struct:redisContext::__anon13
tcp	depends/hiredis/test.c	/^    } tcp;$/;"	m	struct:config	typeref:struct:config::__anon19	file:
test	depends/hiredis/test.c	/^#define test(/;"	d	file:
test_append_formatted_commands	depends/hiredis/test.c	/^static void test_append_formatted_commands(struct config config) {$/;"	f	file:
test_blocking_connection	depends/hiredis/test.c	/^static void test_blocking_connection(struct config config) {$/;"	f	file:
test_blocking_connection_errors	depends/hiredis/test.c	/^static void test_blocking_connection_errors(void) {$/;"	f	file:
test_blocking_connection_timeouts	depends/hiredis/test.c	/^static void test_blocking_connection_timeouts(struct config config) {$/;"	f	file:
test_blocking_io_errors	depends/hiredis/test.c	/^static void test_blocking_io_errors(struct config config) {$/;"	f	file:
test_cond	depends/hiredis/test.c	/^#define test_cond(/;"	d	file:
test_format_commands	depends/hiredis/test.c	/^static void test_format_commands(void) {$/;"	f	file:
test_free_null	depends/hiredis/test.c	/^static void test_free_null(void) {$/;"	f	file:
test_invalid_timeout_errors	depends/hiredis/test.c	/^static void test_invalid_timeout_errors(struct config config) {$/;"	f	file:
test_reply_reader	depends/hiredis/test.c	/^static void test_reply_reader(void) {$/;"	f	file:
test_throughput	depends/hiredis/test.c	/^static void test_throughput(struct config config) {$/;"	f	file:
tests	depends/hiredis/test.c	/^static int tests = 0, fails = 0;$/;"	v	file:
thread	utils/ut_kafka.h	/^    pthread_t thread;$/;"	m	struct:kafka_consumer_t
thread_arg	network/nw_job.c	/^struct thread_arg {$/;"	s	file:
thread_count	network/nw_job.h	/^    int thread_count;$/;"	m	struct:nw_job
thread_routine	network/nw_job.c	/^static void *thread_routine(void *data)$/;"	f	file:
thread_routine	utils/ut_kafka.c	/^static void *thread_routine(void *data)$/;"	f	file:
thread_start	network/nw_job.h	/^    int thread_start;$/;"	m	struct:nw_job
threads	network/nw_job.h	/^    pthread_t *threads;$/;"	m	struct:nw_job
time	accessrest/ar_server.c	/^    double      time;$/;"	m	struct:cache_val	file:
time	accessws/aw_server.c	/^    double      time;$/;"	m	struct:cache_val	file:
time	alertcenter/send_alert.py	/^import time$/;"	i
time	marketprice/mp_server.c	/^    double      time;$/;"	m	struct:cache_val	file:
time	matchengine/me_server.c	/^    double      time;$/;"	m	struct:cache_val	file:
time	test/accesshttp/call.py	/^import time$/;"	i
time	test/monitoragent/test.py	/^import time$/;"	i
timeout	accesshttp/ah_config.h	/^    double              timeout;$/;"	m	struct:settings
timeout	depends/hiredis/hiredis.h	/^    struct timeval *timeout;$/;"	m	struct:redisContext	typeref:struct:redisContext::timeval
timeout	depends/hiredis/test.c	/^        struct timeval timeout;$/;"	m	struct:config::__anon19	typeref:struct:config::__anon19::timeval	file:
timer	accessrest/ar_server.c	/^static nw_timer timer;$/;"	v	file:
timer	accessws/aw_deals.c	/^static nw_timer timer;$/;"	v	file:
timer	accessws/aw_depth.c	/^static nw_timer timer;$/;"	v	file:
timer	accessws/aw_kline.c	/^static nw_timer timer;$/;"	v	file:
timer	accessws/aw_server.c	/^static nw_timer timer;$/;"	v	file:
timer	matchengine/me_history.c	/^static nw_timer timer;$/;"	v	file:
timer	matchengine/me_market.c	/^static nw_timer timer;$/;"	v	file:
timer	matchengine/me_message.c	/^static nw_timer timer;$/;"	v	file:
timer	matchengine/me_operlog.c	/^static nw_timer timer;$/;"	v	file:
timer	matchengine/me_persist.c	/^static nw_timer timer;$/;"	v	file:
timer	matchengine/me_trade.c	/^static nw_timer timer;$/;"	v	file:
timer	matchengine/me_update.c	/^static nw_timer timer;$/;"	v	file:
timer	monitoragent/ma_server.c	/^static nw_timer timer;$/;"	v	file:
timer	monitorcenter/mc_server.c	/^static nw_timer timer;$/;"	v	file:
timer	network/nw_clt.h	/^    nw_timer timer;$/;"	m	struct:nw_clt
timer	utils/ut_http_svr.h	/^    nw_timer timer;$/;"	m	struct:http_svr
timer	utils/ut_profile.c	/^static nw_timer timer;$/;"	v	file:
timer	utils/ut_rpc_clt.h	/^    nw_timer timer;$/;"	m	struct:rpc_clt
timer	utils/ut_rpc_svr.h	/^    nw_timer timer;$/;"	m	struct:rpc_svr
timer	utils/ut_ws_svr.h	/^    nw_timer timer;$/;"	m	struct:ws_svr
timestamp	marketprice/mp_message.c	/^    time_t timestamp;$/;"	m	struct:update_key	file:
timestamp	monitorcenter/mc_server.c	/^    time_t timestamp;$/;"	m	struct:monitor_key	file:
timeval_diff	utils/ut_log.c	/^static inline uint64_t timeval_diff(struct timeval *old, struct timeval *new)$/;"	f	file:
timeval_str	utils/ut_log.c	/^static char *timeval_str(struct timeval *tv)$/;"	f	file:
title_base	utils/ut_title.c	/^static char *title_base;$/;"	v	file:
title_tail	utils/ut_title.c	/^static char *title_tail;$/;"	v	file:
to_fixed	utils/ut_misc.c	/^double to_fixed(double val, int num)$/;"	f
tokens	utils/http_parser.c	/^static const char tokens[256] = {$/;"	v	file:
tonce	accessws/aw_sign.c	/^    uint64_t tonce;$/;"	m	struct:sign_request	file:
topic	utils/ut_kafka.h	/^    char    *topic;$/;"	m	struct:kafka_consumer_cfg
type	depends/hiredis/dict.h	/^    dictType *type;$/;"	m	struct:dict
type	depends/hiredis/hiredis.h	/^    int type; \/* REDIS_REPLY_* *\/$/;"	m	struct:redisReply
type	depends/hiredis/read.h	/^    int type;$/;"	m	struct:redisReadTask
type	depends/hiredis/test.c	/^    enum connection_type type;$/;"	m	struct:config	typeref:enum:config::connection_type	file:
type	matchengine/me_balance.h	/^    uint32_t    type;$/;"	m	struct:balance_key
type	matchengine/me_history.c	/^    uint32_t type;$/;"	m	struct:dict_sql_key	file:
type	matchengine/me_market.h	/^    uint32_t        type;$/;"	m	struct:order_t
type	matchengine/me_market.h	/^    uint32_t        type;$/;"	m	struct:stop_t
type	network/nw_clt.h	/^    nw_clt_type type;$/;"	m	struct:nw_clt
type	network/nw_job.h	/^    nw_job_type type;$/;"	m	struct:nw_job
type	network/nw_state.h	/^    nw_state_type type;$/;"	m	struct:nw_state
type	network/nw_svr.h	/^    nw_svr_type type;$/;"	m	struct:nw_svr
type	utils/http_parser.h	/^  unsigned int type : 2;         \/* enum http_parser_type *\/$/;"	m	struct:http_parser
type	utils/ut_dict.h	/^    dict_types type;$/;"	m	struct:dict_t
type	utils/ut_list.h	/^    list_type  type;$/;"	m	struct:list_t
type	utils/ut_skiplist.h	/^    skiplist_type type;$/;"	m	struct:skiplist_t
type	utils/ut_ws_svr.h	/^    ws_svr_type type;$/;"	m	struct:ws_svr
uint16_t	utils/http_parser.h	/^typedef unsigned __int16 uint16_t;$/;"	t
uint32_set_add	utils/ut_comm_dict.c	/^void uint32_set_add(dict_t *set, uint32_t value)$/;"	f
uint32_set_create	utils/ut_comm_dict.c	/^dict_t *uint32_set_create(void)$/;"	f
uint32_set_exist	utils/ut_comm_dict.c	/^bool uint32_set_exist(dict_t *set, uint32_t value)$/;"	f
uint32_set_hash_function	utils/ut_comm_dict.c	/^static uint32_t uint32_set_hash_function(const void *key)$/;"	f	file:
uint32_set_key_compare	utils/ut_comm_dict.c	/^static int uint32_set_key_compare(const void *key1, const void *key2)$/;"	f	file:
uint32_set_num	utils/ut_comm_dict.c	/^size_t uint32_set_num(dict_t *set)$/;"	f
uint32_set_release	utils/ut_comm_dict.c	/^void uint32_set_release(dict_t *set)$/;"	f
uint32_t	utils/http_parser.h	/^typedef unsigned __int32 uint32_t;$/;"	t
uint64_t	utils/http_parser.h	/^typedef unsigned __int64 uint64_t;$/;"	t
uint8_t	utils/http_parser.h	/^typedef unsigned __int8 uint8_t;$/;"	t
un	network/nw_sock.h	/^        struct sockaddr_un  un;$/;"	m	union:nw_addr_t::__anon2	typeref:struct:nw_addr_t::__anon2::sockaddr_un
uname_S	depends/hiredis/Makefile	/^uname_S := $(shell sh -c 'uname -s 2>\/dev\/null || echo not')$/;"	m
unhex	utils/http_parser.c	/^static const int8_t unhex[256] =$/;"	v	file:
unix	depends/hiredis/test.c	/^    } unix;$/;"	m	struct:config	typeref:struct:config::__anon20	file:
unix_sock	depends/hiredis/hiredis.h	/^    } unix_sock;$/;"	m	struct:redisContext	typeref:struct:redisContext::__anon14
unlink_expire	utils/ut_log.c	/^static int unlink_expire(dlog_t *log, struct timeval *now)$/;"	f	file:
unpack_buf	utils/ut_pack.c	/^int unpack_buf(void **src, size_t *left, void *dest, size_t len)$/;"	f
unpack_char	utils/ut_pack.c	/^int unpack_char(void **src, size_t *left, uint8_t *c)$/;"	f
unpack_oppush	utils/ut_pack.c	/^int unpack_oppush(void **src, size_t *left, char *dest, size_t *size)$/;"	f
unpack_oppushint_le	utils/ut_pack.c	/^int unpack_oppushint_le(void **src, size_t *left, int64_t *num)$/;"	f
unpack_uint16_le	utils/ut_pack.c	/^int unpack_uint16_le(void **src, size_t *left, uint16_t *num)$/;"	f
unpack_uint32_le	utils/ut_pack.c	/^int unpack_uint32_le(void **src, size_t *left, uint32_t *num)$/;"	f
unpack_uint64_le	utils/ut_pack.c	/^int unpack_uint64_le(void **src, size_t *left, uint64_t *num)$/;"	f
unpack_varint_le	utils/ut_pack.c	/^int unpack_varint_le(void **src, size_t *left, uint64_t *num)$/;"	f
unpack_varstr	utils/ut_pack.c	/^int unpack_varstr(void **src, size_t *left, sds *str)$/;"	f
unsubscribe_user	accessws/aw_deals.c	/^static int unsubscribe_user(nw_ses *ses, uint32_t user_id)$/;"	f	file:
update	marketprice/mp_message.c	/^    dict_t *update;$/;"	m	struct:market_info	file:
update_add	matchengine/me_update.c	/^int update_add(uint32_t user_id, const char *asset, const char *business, uint64_t business_id, double create_time)$/;"	f
update_asset_config	matchengine/me_config.c	/^int update_asset_config(void)$/;"	f
update_balance	matchengine/me_balance.c	/^int update_balance(void)$/;"	f
update_cache	accessrest/ar_server.c	/^static void update_cache(sds cache_key, char *message)$/;"	f	file:
update_dict_hash_function	matchengine/me_update.c	/^static uint32_t update_dict_hash_function(const void *key)$/;"	f	file:
update_dict_key_compare	matchengine/me_update.c	/^static int update_dict_key_compare(const void *key1, const void *key2)$/;"	f	file:
update_dict_key_dup	matchengine/me_update.c	/^static void *update_dict_key_dup(const void *key)$/;"	f	file:
update_dict_key_free	matchengine/me_update.c	/^static void update_dict_key_free(void *key)$/;"	f	file:
update_dict_val_dup	matchengine/me_update.c	/^static void *update_dict_val_dup(const void *val)$/;"	f	file:
update_dict_val_free	matchengine/me_update.c	/^static void update_dict_val_free(void *val)$/;"	f	file:
update_key	marketprice/mp_message.c	/^struct update_key {$/;"	s	file:
update_key	matchengine/me_update.h	/^struct update_key {$/;"	s
update_key_inc	monitoragent/ma_server.c	/^static int update_key_inc(struct monitor_key *mkey, uint64_t val)$/;"	f	file:
update_key_inc	monitorcenter/mc_server.c	/^static int update_key_inc(struct monitor_key *mkey, uint64_t val)$/;"	f	file:
update_key_list	monitorcenter/mc_server.c	/^static int update_key_list(char *full_key, const char *scope, const char *key, const char *host)$/;"	f	file:
update_key_set	monitoragent/ma_server.c	/^static int update_key_set(struct monitor_key *mkey, uint64_t val)$/;"	f	file:
update_key_set	monitorcenter/mc_server.c	/^static int update_key_set(struct monitor_key *mkey, uint64_t val)$/;"	f	file:
update_market_config	matchengine/me_config.c	/^int update_market_config(void)$/;"	f
update_market_last	matchengine/me_persist.c	/^static int update_market_last(const char *market_price)$/;"	f	file:
update_market_list	marketprice/mp_message.c	/^static int update_market_list(void)$/;"	f	file:
update_slice_history	matchengine/me_persist.c	/^int update_slice_history(MYSQL *conn, time_t end)$/;"	f
update_time	accessws/aw_state.c	/^    double  update_time;$/;"	m	struct:market_val	file:
update_time	marketprice/mp_message.c	/^    double update_time;$/;"	m	struct:market_info	file:
update_time	matchengine/me_market.h	/^    double          update_time;$/;"	m	struct:order_t
update_time	matchengine/me_market.h	/^    double          update_time;$/;"	m	struct:stop_t
update_timer	accessrest/ar_ticker.c	/^static nw_timer update_timer;$/;"	v	file:
update_timer	accessws/aw_state.c	/^static nw_timer update_timer;$/;"	v	file:
update_trade	matchengine/me_trade.c	/^int update_trade(void)$/;"	f
update_user_balance	matchengine/me_update.c	/^int update_user_balance(bool real, uint32_t user_id, const char *asset, const char *business, uint64_t business_id, mpd_t *change, json_t *detail)$/;"	f
update_user_lock	matchengine/me_update.c	/^int update_user_lock(bool real, uint32_t user_id, const char *asset, const char *business, uint64_t business_id, mpd_t *amount)$/;"	f
update_user_unlock	matchengine/me_update.c	/^int update_user_unlock(bool real, uint32_t user_id, const char *asset, const char *business, uint64_t business_id, mpd_t *amount)$/;"	f
update_val	matchengine/me_update.h	/^struct update_val {$/;"	s
upgrade	utils/http_parser.h	/^  unsigned int upgrade : 1;$/;"	m	struct:http_parser
upgrade	utils/ut_ws_svr.c	/^    bool        upgrade;$/;"	m	struct:clt_info	file:
urandom	utils/ut_misc.c	/^int urandom(void *buf, size_t size)$/;"	f
url	utils/ut_http.h	/^    sds         url;$/;"	m	struct:http_request_t
url	utils/ut_ws_svr.c	/^    sds         url;$/;"	m	struct:clt_info	file:
use_fork	utils/ut_log.h	/^    int                 use_fork;$/;"	m	struct:__anon7
usec	depends/hiredis/test.c	/^static long long usec(void) {$/;"	f	file:
used	depends/hiredis/dict.h	/^    unsigned long used;$/;"	m	struct:dict
used	network/nw_buf.h	/^    uint32_t used;$/;"	m	struct:nw_buf_pool
used	network/nw_buf.h	/^    uint32_t used;$/;"	m	struct:nw_cache
used	network/nw_state.h	/^    uint32_t used;$/;"	m	struct:nw_state
used	utils/ut_dict.h	/^    uint32_t used;$/;"	m	struct:dict_t
user	utils/ut_config.h	/^    char    *user;$/;"	m	struct:mysql_cfg
user_id	accessws/aw_asset.c	/^    uint32_t user_id;$/;"	m	struct:state_data	file:
user_id	accessws/aw_deals.c	/^    uint32_t user_id;$/;"	m	struct:user_key	file:
user_id	accessws/aw_server.h	/^    uint32_t    user_id;$/;"	m	struct:clt_info
user_id	matchengine/me_balance.h	/^    uint32_t    user_id;$/;"	m	struct:balance_key
user_id	matchengine/me_market.c	/^    uint32_t    user_id;$/;"	m	struct:dict_user_key	file:
user_id	matchengine/me_market.h	/^    uint32_t        user_id;$/;"	m	struct:order_t
user_id	matchengine/me_market.h	/^    uint32_t        user_id;$/;"	m	struct:stop_t
user_id	matchengine/me_update.h	/^    uint32_t    user_id;$/;"	m	struct:update_key
user_key	accessws/aw_deals.c	/^struct user_key {$/;"	s	file:
user_orders	matchengine/me_market.h	/^    dict_t          *user_orders;$/;"	m	struct:market_t
user_stops	matchengine/me_market.h	/^    dict_t          *user_stops;$/;"	m	struct:market_t
user_val	accessws/aw_deals.c	/^struct user_val {$/;"	s	file:
va_copy	depends/hiredis/win32.h	/^#define va_copy(/;"	d
val	depends/hiredis/dict.h	/^    void *val;$/;"	m	struct:dictEntry
val	monitoragent/ma_server.c	/^    uint64_t val;$/;"	m	struct:monitor_val	file:
val	monitorcenter/mc_server.c	/^    uint64_t val;$/;"	m	struct:monitor_val	file:
val	utils/ut_dict.h	/^    void *val;$/;"	m	struct:dict_entry
val	utils/ut_profile.c	/^    uint64_t val;$/;"	m	struct:profile_val	file:
valDestructor	depends/hiredis/dict.h	/^    void (*valDestructor)(void *privdata, void *obj);$/;"	m	struct:dictType
valDup	depends/hiredis/dict.h	/^    void *(*valDup)(void *privdata, const void *obj);$/;"	m	struct:dictType
val_destructor	utils/ut_dict.h	/^    void (*val_destructor)(void *val);$/;"	m	struct:dict_types
val_dict_hash_func	monitoragent/ma_server.c	/^static uint32_t val_dict_hash_func(const void *key)$/;"	f	file:
val_dict_hash_func	monitorcenter/mc_server.c	/^static uint32_t val_dict_hash_func(const void *key)$/;"	f	file:
val_dict_key_compare	monitoragent/ma_server.c	/^static int val_dict_key_compare(const void *key1, const void *key2)$/;"	f	file:
val_dict_key_compare	monitorcenter/mc_server.c	/^static int val_dict_key_compare(const void *key1, const void *key2)$/;"	f	file:
val_dict_key_dup	monitoragent/ma_server.c	/^static void *val_dict_key_dup(const void *key)$/;"	f	file:
val_dict_key_dup	monitorcenter/mc_server.c	/^static void *val_dict_key_dup(const void *key)$/;"	f	file:
val_dict_key_free	monitoragent/ma_server.c	/^static void val_dict_key_free(void *key)$/;"	f	file:
val_dict_key_free	monitorcenter/mc_server.c	/^static void val_dict_key_free(void *key)$/;"	f	file:
val_dict_val_dup	monitoragent/ma_server.c	/^static void *val_dict_val_dup(const void *val)$/;"	f	file:
val_dict_val_dup	monitorcenter/mc_server.c	/^static void *val_dict_val_dup(const void *val)$/;"	f	file:
val_dict_val_free	monitoragent/ma_server.c	/^static void val_dict_val_free(void *val)$/;"	f	file:
val_dict_val_free	monitorcenter/mc_server.c	/^static void val_dict_val_free(void *val)$/;"	f	file:
val_dup	utils/ut_dict.h	/^    void *(*val_dup)(const void *val);$/;"	m	struct:dict_types
value	utils/ut_http_svr.c	/^    sds     value;$/;"	m	struct:clt_info	file:
value	utils/ut_list.h	/^    void *value;$/;"	m	struct:list_node
value	utils/ut_skiplist.h	/^    void *value;$/;"	m	struct:skiplist_node
value	utils/ut_ws_svr.c	/^    sds         value;$/;"	m	struct:clt_info	file:
value_set	utils/ut_http_svr.c	/^    bool    value_set;$/;"	m	struct:clt_info	file:
value_set	utils/ut_ws_svr.c	/^    bool        value_set;$/;"	m	struct:clt_info	file:
version	alertcenter/ac_main.c	/^const char *version = "0.1.0";$/;"	v
version_major	utils/ut_http.h	/^    uint16_t    version_major;$/;"	m	struct:http_request_t
version_minor	utils/ut_http.h	/^    uint16_t    version_minor;$/;"	m	struct:http_request_t
volume	marketprice/mp_kline.h	/^    mpd_t *volume;$/;"	m	struct:kline_info
watch_accept	network/nw_ses.c	/^static void watch_accept(nw_ses *ses)$/;"	f	file:
watch_connect	network/nw_clt.c	/^static void watch_connect(nw_clt *clt)$/;"	f	file:
watch_connect	network/nw_ses.c	/^static void watch_connect(nw_ses *ses)$/;"	f	file:
watch_read	network/nw_ses.c	/^static void watch_read(nw_ses *ses)$/;"	f	file:
watch_read_write	network/nw_ses.c	/^static void watch_read_write(nw_ses *ses)$/;"	f	file:
watch_stop	network/nw_ses.c	/^static void watch_stop(nw_ses *ses)$/;"	f	file:
wev	depends/hiredis/adapters/libev.h	/^    ev_io rev, wev;$/;"	m	struct:redisLibevEvents
wev	depends/hiredis/adapters/libevent.h	/^    struct event rev, wev;$/;"	m	struct:redisLibeventEvents	typeref:struct:redisLibeventEvents::
worker_arr	marketprice/mp_access.c	/^static rpc_clt **worker_arr;$/;"	v	file:
worker_id	marketprice/mp_message.c	/^static int worker_id;$/;"	v	file:
worker_num	accesshttp/ah_config.h	/^    int                 worker_num;$/;"	m	struct:settings
worker_num	accessrest/ar_config.h	/^    int                 worker_num;$/;"	m	struct:settings
worker_num	accessws/aw_config.h	/^    int                 worker_num;$/;"	m	struct:settings
worker_num	marketprice/mp_config.h	/^    int                 worker_num;$/;"	m	struct:settings
worker_num	readhistory/rh_config.h	/^    int                 worker_num;$/;"	m	struct:settings
worker_on_connection_close	accesshttp/ah_listener.c	/^static void worker_on_connection_close(nw_ses *ses)$/;"	f	file:
worker_on_connection_close	accessrest/ar_listener.c	/^static void worker_on_connection_close(nw_ses *ses)$/;"	f	file:
worker_on_connection_close	accessws/aw_listener.c	/^static void worker_on_connection_close(nw_ses *ses)$/;"	f	file:
worker_on_new_connection	accesshttp/ah_listener.c	/^static void worker_on_new_connection(nw_ses *ses)$/;"	f	file:
worker_on_new_connection	accessrest/ar_listener.c	/^static void worker_on_new_connection(nw_ses *ses)$/;"	f	file:
worker_on_new_connection	accessws/aw_listener.c	/^static void worker_on_new_connection(nw_ses *ses)$/;"	f	file:
worker_on_recv_pkg	accesshttp/ah_listener.c	/^static void worker_on_recv_pkg(nw_ses *ses, rpc_pkg *pkg)$/;"	f	file:
worker_on_recv_pkg	accessrest/ar_listener.c	/^static void worker_on_recv_pkg(nw_ses *ses, rpc_pkg *pkg)$/;"	f	file:
worker_on_recv_pkg	accessws/aw_listener.c	/^static void worker_on_recv_pkg(nw_ses *ses, rpc_pkg *pkg)$/;"	f	file:
worker_svr	accesshttp/ah_listener.c	/^static rpc_svr *worker_svr;$/;"	v	file:
worker_svr	accessrest/ar_listener.c	/^static rpc_svr *worker_svr;$/;"	v	file:
worker_svr	accessws/aw_listener.c	/^static rpc_svr *worker_svr;$/;"	v	file:
worker_timeout	marketprice/mp_config.h	/^    double              worker_timeout;$/;"	m	struct:settings
wpos	network/nw_buf.h	/^    uint32_t wpos;$/;"	m	struct:nw_buf
write	depends/hiredis/adapters/qt.h	/^        void write() { redisAsyncHandleWrite(m_ctx); }$/;"	f	class:RedisQtAdapter
write_buf	network/nw_ses.h	/^    nw_buf_list *write_buf;$/;"	m	struct:nw_ses
write_callback_func	matchengine/me_config.c	/^static size_t write_callback_func(char *ptr, size_t size, size_t nmemb, void *userdata)$/;"	f	file:
write_file	utils/ut_queue.c	/^static int write_file(queue_t *queue, void *data, uint32_t size)$/;"	f	file:
write_in_full	utils/ut_log.c	/^static ssize_t write_in_full(int fd, const void *buf, size_t size)$/;"	f	file:
write_len	utils/ut_log.h	/^    size_t              write_len;$/;"	m	struct:__anon7
write_mem	network/nw_clt.h	/^    uint32_t write_mem;$/;"	m	struct:nw_clt
write_mem	network/nw_clt.h	/^    uint32_t write_mem;$/;"	m	struct:nw_clt_cfg
write_mem	network/nw_svr.h	/^    uint32_t write_mem;$/;"	m	struct:nw_svr
write_mem	network/nw_svr.h	/^    uint32_t write_mem;$/;"	m	struct:nw_svr_cfg
write_mem	utils/ut_http_svr.h	/^    uint32_t write_mem;$/;"	m	struct:http_svr_cfg
write_mem	utils/ut_rpc_clt.h	/^    uint32_t write_mem;$/;"	m	struct:rpc_clt_cfg
write_mem	utils/ut_rpc_svr.h	/^    uint32_t write_mem;$/;"	m	struct:rpc_svr_cfg
write_mem	utils/ut_ws_svr.h	/^    uint32_t write_mem;$/;"	m	struct:ws_svr_cfg
writer_flush	monitorcenter/mc_server.c	/^void writer_flush(void)$/;"	f
writing	depends/hiredis/adapters/ae.h	/^    int reading, writing;$/;"	m	struct:redisAeEvents
writing	depends/hiredis/adapters/libev.h	/^    int reading, writing;$/;"	m	struct:redisLibevEvents
ws_frame	utils/ut_ws_svr.c	/^struct ws_frame {$/;"	s	file:
ws_send_binary	utils/ut_ws_svr.c	/^int ws_send_binary(nw_ses *ses, void *data, size_t size)$/;"	f
ws_send_text	utils/ut_ws_svr.c	/^int ws_send_text(nw_ses *ses, char *message)$/;"	f
ws_ses_privdata	utils/ut_ws_svr.c	/^void *ws_ses_privdata(nw_ses *ses)$/;"	f
ws_svr	utils/ut_ws_svr.h	/^typedef struct ws_svr {$/;"	s
ws_svr	utils/ut_ws_svr.h	/^} ws_svr;$/;"	t	typeref:struct:ws_svr
ws_svr_broadcast_binary	utils/ut_ws_svr.c	/^int ws_svr_broadcast_binary(ws_svr *svr, void *data, size_t size)$/;"	f
ws_svr_broadcast_text	utils/ut_ws_svr.c	/^int ws_svr_broadcast_text(ws_svr *svr, char *message)$/;"	f
ws_svr_cfg	utils/ut_ws_svr.h	/^typedef struct ws_svr_cfg {$/;"	s
ws_svr_cfg	utils/ut_ws_svr.h	/^} ws_svr_cfg;$/;"	t	typeref:struct:ws_svr_cfg
ws_svr_close_clt	utils/ut_ws_svr.c	/^void ws_svr_close_clt(ws_svr *svr, nw_ses *ses)$/;"	f
ws_svr_create	utils/ut_ws_svr.c	/^ws_svr *ws_svr_create(ws_svr_cfg *cfg, ws_svr_type *type)$/;"	f
ws_svr_from_ses	utils/ut_ws_svr.c	/^ws_svr *ws_svr_from_ses(nw_ses *ses)$/;"	f
ws_svr_release	utils/ut_ws_svr.c	/^void ws_svr_release(ws_svr *svr)$/;"	f
ws_svr_start	utils/ut_ws_svr.c	/^int ws_svr_start(ws_svr *svr)$/;"	f
ws_svr_stop	utils/ut_ws_svr.c	/^int ws_svr_stop(ws_svr *svr)$/;"	f
ws_svr_type	utils/ut_ws_svr.h	/^typedef struct ws_svr_type {$/;"	s
ws_svr_type	utils/ut_ws_svr.h	/^} ws_svr_type;$/;"	t	typeref:struct:ws_svr_type
xwrite	utils/ut_log.c	/^static ssize_t xwrite(int fd, const void *buf, size_t len)$/;"	f	file:
~RedisQtAdapter	depends/hiredis/adapters/qt.h	/^        ~RedisQtAdapter() {$/;"	f	class:RedisQtAdapter
